{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nest-js_server/./LS_Admin.js","webpack://nest-js_server/./PLC/Lib/libFins/constants.js","webpack://nest-js_server/./PLC/Lib/libFins/fins_client.js","webpack://nest-js_server/./PLC/Lib/libFins/index.js","webpack://nest-js_server/./SubFunction.js","webpack://nest-js_server/./Variable.js","webpack://nest-js_server/./VariableSystem.js","webpack://nest-js_server/./src/app.controller.ts","webpack://nest-js_server/./src/app.module.ts","webpack://nest-js_server/./src/config/config.module.ts","webpack://nest-js_server/./src/config/config.service.ts","webpack://nest-js_server/./src/database/typeorm.config.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.controller.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.module.ts","webpack://nest-js_server/./src/microservice-client/microservice-client.service.ts","webpack://nest-js_server/./src/mqtt/mqtt.module.ts","webpack://nest-js_server/./src/mqtt/mqtt.service.ts","webpack://nest-js_server/./src/note/note.module.ts","webpack://nest-js_server/./src/post/post.module.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.controller.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.entity.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.module.ts","webpack://nest-js_server/./src/scada_3D/scada_3D.service.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.controller.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.entity.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.module.ts","webpack://nest-js_server/./src/scada_background-image-library/scada_background-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.controller.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.entity.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.module.ts","webpack://nest-js_server/./src/scada_bit-adjust-image-library/scada_bit-adjust-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.controller.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.entity.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.module.ts","webpack://nest-js_server/./src/scada_bit-adjust/scada_bit-adjust.service.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.controller.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.entity.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.module.ts","webpack://nest-js_server/./src/scada_bit-display-image-library/scada_bit-display-image-library.service.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display-refresh.service.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.controller.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.entity.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.module.ts","webpack://nest-js_server/./src/scada_bit-display/scada_bit-display.service.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.controller.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.entity.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.module.ts","webpack://nest-js_server/./src/scada_dword-adjust/scada_dword-adjust.service.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display-refresh.service.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.controller.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.entity.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.module.ts","webpack://nest-js_server/./src/scada_dword-display/scada_dword-display.service.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.controller.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.entity.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.module.ts","webpack://nest-js_server/./src/scada_element-image-library/scada_element-image-library.service.ts","webpack://nest-js_server/./src/scada_element/scada_element-refresh.service.ts","webpack://nest-js_server/./src/scada_element/scada_element.controller.ts","webpack://nest-js_server/./src/scada_element/scada_element.entity.ts","webpack://nest-js_server/./src/scada_element/scada_element.module.ts","webpack://nest-js_server/./src/scada_element/scada_element.service.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.controller.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.entity.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.module.ts","webpack://nest-js_server/./src/scada_icon-image-library/scada_icon-image-library.service.ts","webpack://nest-js_server/./src/scada_label/scada_label.controller.ts","webpack://nest-js_server/./src/scada_label/scada_label.entity.ts","webpack://nest-js_server/./src/scada_label/scada_label.module.ts","webpack://nest-js_server/./src/scada_label/scada_label.service.ts","webpack://nest-js_server/./src/scada_line/scada_line.controller.ts","webpack://nest-js_server/./src/scada_line/scada_line.entity.ts","webpack://nest-js_server/./src/scada_line/scada_line.module.ts","webpack://nest-js_server/./src/scada_line/scada_line.service.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.controller.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.entity.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.module.ts","webpack://nest-js_server/./src/scada_map-image-library/scada_map-image-library.service.ts","webpack://nest-js_server/./src/scada_map/scada_map.controller.ts","webpack://nest-js_server/./src/scada_map/scada_map.entity.ts","webpack://nest-js_server/./src/scada_map/scada_map.module.ts","webpack://nest-js_server/./src/scada_map/scada_map.service.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.controller.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.entity.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.module.ts","webpack://nest-js_server/./src/scada_memonic/scada_memonic.service.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.controller.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.entity.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.module.ts","webpack://nest-js_server/./src/scada_panel/scada_panel.service.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm-refresh.service.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.controller.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.entity.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.module.ts","webpack://nest-js_server/./src/scada_setup-alarm/scada_setup-alarm.service.ts","webpack://nest-js_server/./src/scada_string/scada_string-refresh.service.ts","webpack://nest-js_server/./src/scada_string/scada_string.controller.ts","webpack://nest-js_server/./src/scada_string/scada_string.entity.ts","webpack://nest-js_server/./src/scada_string/scada_string.module.ts","webpack://nest-js_server/./src/scada_string/scada_string.service.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field-refresh.service.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.controller.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.entity.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.module.ts","webpack://nest-js_server/./src/scada_text-field/scada_text-field.service.ts","webpack://nest-js_server/./src/scada_user/dto/index.ts","webpack://nest-js_server/./src/scada_user/dto/user.dto.ts","webpack://nest-js_server/./src/scada_user/scada_user.controller.ts","webpack://nest-js_server/./src/scada_user/scada_user.entity.ts","webpack://nest-js_server/./src/scada_user/scada_user.module.ts","webpack://nest-js_server/./src/scada_user/scada_user.service.ts","webpack://nest-js_server/./src/scada_user/strategy/index.ts","webpack://nest-js_server/./src/scada_user/strategy/jwt.strategy.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust-refresh.service.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.controller.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.entity.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.module.ts","webpack://nest-js_server/./src/scada_word-adjust/scada_word-adjust.service.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display-refresh.service.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.controller.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.entity.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.module.ts","webpack://nest-js_server/./src/scada_word-display/scada_word-display.service.ts","webpack://nest-js_server/./src/socket_io/socket_io.gateway.ts","webpack://nest-js_server/./src/socket_io/socket_io.module.ts","webpack://nest-js_server/./src/system_api/system_api.controller.ts","webpack://nest-js_server/./src/system_api/system_api.module.ts","webpack://nest-js_server/./src/system_api/system_api.service.ts","webpack://nest-js_server/external commonjs \"@nestjs/common\"","webpack://nest-js_server/external commonjs \"@nestjs/core\"","webpack://nest-js_server/external commonjs \"@nestjs/jwt\"","webpack://nest-js_server/external commonjs \"@nestjs/microservices\"","webpack://nest-js_server/external commonjs \"@nestjs/passport\"","webpack://nest-js_server/external commonjs \"@nestjs/typeorm\"","webpack://nest-js_server/external commonjs \"@nestjs/websockets\"","webpack://nest-js_server/external commonjs \"@node-minify/core\"","webpack://nest-js_server/external commonjs \"@node-minify/uglify-js\"","webpack://nest-js_server/external commonjs \"argon2\"","webpack://nest-js_server/external commonjs \"bcrypt\"","webpack://nest-js_server/external commonjs \"class-validator\"","webpack://nest-js_server/external commonjs \"dotenv\"","webpack://nest-js_server/external commonjs \"events\"","webpack://nest-js_server/external commonjs \"mqtt\"","webpack://nest-js_server/external commonjs \"node-red\"","webpack://nest-js_server/external commonjs \"passport-jwt\"","webpack://nest-js_server/external commonjs \"socket.io\"","webpack://nest-js_server/external commonjs \"sqlite3\"","webpack://nest-js_server/external commonjs \"systeminformation\"","webpack://nest-js_server/external commonjs \"typeorm\"","webpack://nest-js_server/external node-commonjs \"dgram\"","webpack://nest-js_server/external node-commonjs \"fs\"","webpack://nest-js_server/external node-commonjs \"path\"","webpack://nest-js_server/external node-commonjs \"util\"","webpack://nest-js_server/webpack/bootstrap","webpack://nest-js_server/./src/main.ts"],"sourcesContent":["\r\nvar active = false\r\nmodule.exports = {\r\n    active,\r\n}","\r\nmodule.exports.DefaultHostValues = {\r\n    host : '127.0.0.1',\r\n    port : 9600\r\n};\r\n\r\n\r\n\r\nmodule.exports.DefaultOptions = {\r\n   timeout: 2000\r\n};\r\n\r\n\r\nmodule.exports.DefaultFinsHeader = {\r\n    ICF : 0x80,\r\n    RSV : 0x00,\r\n    GCT : 0x02,\r\n    DNA : 0x00,\r\n    DA1 : 0x00,\r\n    DA2 : 0x00,\r\n    SNA : 0x00,\r\n    SA1 : 0x22,\r\n    SA2 : 0x00,\r\n    SID : 0x00\r\n};\r\n\r\nmodule.exports.Commands = {\r\n    CONTROLLER_STATUS_READ : [0x06,0x01],\r\n    MEMORY_AREA_READ       : [0x01,0x01],\r\n    MEMORY_AREA_WRITE      : [0x01,0x02],\r\n    MEMORY_AREA_FILL       : [0x01,0x03],\r\n    RUN                    : [0x04,0x01],\r\n    STOP                   : [0x04,0x02]\r\n};\r\n\r\nmodule.exports.FatalErrorData = {\r\n    SYSTEM_ERROR      : 1 << 6,\r\n    IO_SETTING_ERROR  : 1 << 10,\r\n    IO_POINT_OVERFLOW : 1 << 11,\r\n    CPU_BUS_ERROR     : 1 << 14,\r\n    MEMORY_ERROR      : 1 << 15\r\n};\r\n\r\nmodule.exports.NonFatalErrorData = {\r\n    PC_LINK_ERROR         : 1 << 0 ,\r\n    HOST_LINK_ERROR       : 1 << 1,\r\n    BATTERY_ERROR         : 1 << 4,\r\n    REMOTE_IO_ERROR       : 1 << 5,\r\n    SPECIAL_IO_UNIT_ERROR : 1 << 8,\r\n    IO_COLLATE_ERROR      : 1 << 9,\r\n    SYSTEM_ERROR          : 1 << 15\r\n};\r\n\r\nmodule.exports.Status = {\r\n    CPU_STANDBY : 0x80,\r\n    STOP        : 0x00,\r\n    RUN         : 0x01\r\n};\r\n\r\nmodule.exports.Modes = {\r\n    MONITOR : 0x02,\r\n    DEBUG   : 0x01,\r\n    RUN     : 0x04\r\n};\r\n\r\n\r\nmodule.exports.MemoryAreas = {\r\n    'E' : 0xA0,//Extended Memories\r\n    'C' : 0xB0,//CIO\r\n    'W' : 0xB1,//Work Area\r\n    'H' : 0xB2,//Holding Bit\r\n    'A' : 0xB3,//Auxiliary Bit\r\n    'D' : 0x82//Data Memories\r\n};\r\n\r\nmodule.exports.Errors = {\r\n    '0000': 'Completed normally',\r\n    '0001': 'Service was interrupted',\r\n    '0101': 'Local node not part of Network',\r\n    '0102': 'Token time-out, node number too large',\r\n    '0103': 'Number of transmit retries exceeded',\r\n    '0104': 'Maximum number of frames exceeded',\r\n    '0105': 'Node number setting error (range)',\r\n    '0106': 'Node number duplication error'\r\n};\r\n\r\n","var dgram = require('dgram');\r\nvar inherits = require('util').inherits;\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar constants = require('./constants');\r\n\r\nmodule.exports = FinsClient;\r\n\r\nfunction FinsClient (port,host,options) {\r\n  if(!(this instanceof FinsClient)) return new FinsClient(port,host,options);\r\n    EventEmitter.call(this);\r\n    FinsClient.init.call(this,port,host,options);\r\n};\r\n\r\ninherits(FinsClient,EventEmitter);\r\n\r\n\r\n\r\n_compareArrays = function(a,b) {\r\n    if(a.length !== b.length)\r\n        return false;\r\n    for(var i = a.length; i--;) {\r\n        if(a[i] !== b[i])\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\n\r\n\r\n/* Credit to http://tech.karbassi.com/2009/12/17/pure-javascript-flatten-array/ */\r\n_mergeArrays = function(array) {\r\n    var flat = [];\r\n    for (var i = 0, l = array.length; i < l; i++){\r\n        var type = Object.prototype.toString.call(array[i]).split(' ').pop().split(']').shift().toLowerCase();\r\n        if (type) { flat = flat.concat(/^(array|collection|arguments|object)$/.test(type) ? _mergeArrays(array[i]) : array[i]); }\r\n    }\r\n    return flat;\r\n};\r\n\r\n\r\n_keyFromValue = function(dict,value) {\r\n    var key = Object.keys(dict)\r\n    .filter(function(key){\r\n        return dict[key] === value\r\n    }\r\n    )[0];\r\n\r\n    return key;\r\n};\r\n\r\n  \r\n\r\n_padHex = function (width,number) {\r\n    return(\"0\"*width + number.toString(16).substr(-width));\r\n};\r\n\r\n\r\n\r\n_wordsToBytes = function(words) {\r\n    var bytes = [];\r\n    if(!words.length) {\r\n        bytes.push((words & 0xff00) >> 8);\r\n        bytes.push((words & 0x00ff));\r\n    } else {\r\n        for(var i in words) {\r\n            bytes.push((words[i] & 0xff00) >> 8);\r\n            bytes.push((words[i] & 0x00ff));\r\n        }\r\n    }\r\n    return bytes;\r\n\r\n};\r\n\r\n\r\n_translateMemoryAddress = function(memoryAddress) {\r\n    var re = /(.)([0-9]*):?([0-9]*)/; \r\n    var matches = memoryAddress.match(re);\r\n    var decodedMemory = {\r\n        'MemoryArea':matches[1],\r\n        'Address':matches[2],\r\n        'Bit':matches[3]\r\n    };\r\n\r\n    var temp = [];\r\n    var byteEncodedMemory = [];\r\n\r\n    if(!constants.MemoryAreas[decodedMemory['MemoryArea']]) {\r\n        temp.push([0x82]);\r\n    } else {\r\n         temp.push([constants.MemoryAreas[decodedMemory['MemoryArea']]]);\r\n    }\r\n\r\n     temp.push(_wordsToBytes([decodedMemory['Address']]));\r\n     temp.push([0x00]);\r\n     byteEncodedMemory = _mergeArrays(temp);\r\n\r\n    return byteEncodedMemory;\r\n\r\n  \r\n};\r\n\r\n_incrementSID = function(sid) {\r\n    return (sid % 254) + 1;\r\n};\r\n\r\n_buildHeader = function(header) {\r\n    var builtHeader =  [\r\n        header.ICF,\r\n        header.RSV,\r\n        header.GCT,\r\n        header.DNA,\r\n        header.DA1,\r\n        header.DA2,\r\n        header.SNA,\r\n        header.SA1,\r\n        header.SA2,\r\n        header.SID \r\n    ];\r\n    return builtHeader;\r\n\r\n};\r\n\r\n_buildPacket = function(raw) {\r\n    var packet = [];\r\n    packet = _mergeArrays(raw);\r\n    return packet;\r\n};\r\n\r\n_getResponseType = function(buf) {\r\n    \r\n    var response = [];\r\n    response.push(buf[10]);\r\n    response.push(buf[11]);\r\n    return response;\r\n};\r\n\r\n_processDefault = function(buf,rinfo) {\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    return {remotehost:rinfo.address,sid:sid,command:command,response:response};\r\n\r\n};\r\n\r\n_processStatusRead = function(buf,rinfo) {\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    var status = buf[14];\r\n    var mode = buf[15];\r\n    var fatalErrorData = {};\r\n    var nonFatalErrorData = {};    \r\n    for(var i in constants.FatalErrorData) {\r\n        if((buf.readInt16BE(17) & constants.FatalErrorData[i]) !=0 )\r\n            fatalErrorData.push(i);\r\n    }\r\n\r\n    for(var i in constants.nonFatalErrorData) {\r\n        if((buf.readInt16BE(18) & constants.nonFatalErrorData[i]) !=0 )\r\n            nonFatalErrorData.push(i);\r\n    };\r\n    var statusCodes = constants.Status;\r\n    var runModes = constants.Modes;\r\n\r\n\r\n    return {\r\n        remotehost:rinfo.address,\r\n        sid:sid,\r\n        command:command,\r\n        response:response,\r\n        status:_keyFromValue(statusCodes,status),\r\n        mode:_keyFromValue(runModes,mode),\r\n        fatalErrorData : fatalErrorData || null,\r\n        nonFatalErrorData : nonFatalErrorData || null\r\n    };\r\n};\r\n\r\n_processMemoryAreaRead = function(buf,rinfo) {\r\n    var data = [];\r\n    var sid = buf[9];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var response = (buf.slice(12,14)).toString(\"hex\");\r\n    var values = (buf.slice(14,buf.length));\r\n    for(var i = 0; i < values.length; i+=2) {\r\n        data.push(values.readInt16BE(i));\r\n    }\r\n    return {remotehost:rinfo.address,sid:sid,command:command,response:response,values:data};\r\n};\r\n\r\n\r\n_processReply = function(buf,rinfo) {\r\n    var commands = constants.Commands;\r\n    var responseType = (_getResponseType(buf)).join(' ');\r\n    \r\n    switch(responseType) {\r\n       \r\n        case commands.CONTROLLER_STATUS_READ.join(' ') : \r\n            return _processStatusRead(buf,rinfo);\r\n            break;\r\n\r\n        case commands.MEMORY_AREA_READ.join(' '):\r\n            return _processMemoryAreaRead(buf,rinfo);\r\n            break;\r\n\r\n        default:\r\n            return _processDefault(buf,rinfo);\r\n\r\n    };\r\n\r\n};\r\n_decodePacket = function(buf,rinfo) {\r\n    var data = [];\r\n    var command = (buf.slice(10,12)).toString(\"hex\");\r\n    var code = (buf.slice(12,14)).toString(\"hex\");\r\n    var values = (buf.slice(14,buf.length));\r\n    for(var i = 0; i < values.length; i+=2) {\r\n        data.push(values.readInt16BE(i));\r\n    }\r\n    return {remotehost:rinfo.address,command:command,code:code,values:data};\r\n};\r\n\r\n\r\nFinsClient.init = function (port,host,options) {\r\n    var self = this;\r\n    var defaultHost = constants.DefaultHostValues;\r\n    var defaultOptions = constants.DefaultOptions;\r\n    this.port = port || defaultHost.port;\r\n    this.host = host || defaultHost.host;\r\n    this.timeout = (options && options.timeout) || defaultOptions.timeout;\r\n    this.socket = dgram.createSocket('udp4');\r\n    this.responded = false;\r\n    this.header = constants.DefaultFinsHeader;\r\n\r\n    function receive (buf,rinfo) {\r\n      self.responded = true;\r\n      var msg = _processReply(buf,rinfo);\r\n      self.emit('reply',msg);\r\n    }\r\n\r\n    function listening() {\r\n        self.emit('open');\r\n    }\r\n\r\n    function close() {\r\n        self.emit('close');\r\n    }\r\n\r\n    function error(err) {\r\n        self.emit('error',err);\r\n    }\r\n\r\n    this.socket.on('message',receive);\r\n    this.socket.on('listening',listening);\r\n    this.socket.on('close',close);\r\n    this.socket.on('error',error);\r\n\r\n    if(this.timeout){\r\n        setTimeout(function cb_setTimeout() {\r\n            if(self.responded == false){\r\n                self.emit('timeout',self.host);\r\n            }\r\n        },self.timeout);\r\n    }\r\n};\r\n\r\n\r\nFinsClient.prototype.read = function(address,regsToRead,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToRead = _wordsToBytes(regsToRead);\r\n    var command = constants.Commands.MEMORY_AREA_READ;\r\n    var commandData = [address,regsToRead];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.write = function(address,dataToBeWritten,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToWrite = _wordsToBytes((dataToBeWritten.length || 1));\r\n    var command = constants.Commands.MEMORY_AREA_WRITE;\r\n    var dataToBeWritten = _wordsToBytes(dataToBeWritten);\r\n    var commandData = [address,regsToWrite,dataToBeWritten];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.fill = function(address,dataToBeWritten,regsToWrite,callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var address = _translateMemoryAddress(address);\r\n    var regsToWrite = _wordsToBytes(regsToWrite);\r\n    var command = constants.Commands.MEMORY_AREA_FILL;\r\n    var dataToBeWritten = _wordsToBytes(dataToBeWritten);\r\n    var commandData = [address,regsToWrite,dataToBeWritten];\r\n    var packet = _buildPacket([header,command,commandData]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.run = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.RUN;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\nFinsClient.prototype.stop = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.STOP;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n};\r\n\r\n\r\nFinsClient.prototype.status = function(callback) {\r\n    var self = this;\r\n    self.header.SID = _incrementSID(self.header.SID);\r\n    var header = _buildHeader(self.header);\r\n    var command = constants.Commands.CONTROLLER_STATUS_READ;\r\n    var packet = _buildPacket([header,command]);\r\n    var buffer = new Buffer(packet);\r\n    this.socket.send(buffer,0,buffer.length,self.port,self.host,callback);\r\n\r\n\r\n};\r\n\r\n\r\nFinsClient.prototype.close = function(){\r\n    this.socket.close();\r\n};\r\n\r\n\r\n","var FinsClient = require('./fins_client.js');\r\n\r\nexports.FinsClient = FinsClient;\r\n","const fs = require('fs')\r\n// const ObjectsToCsv = require('objects-to-csv');\r\nvar Variables = require('./Variable')\r\nvar VariableSystem = require('./VariableSystem.js');\r\n\r\nfunction saveLogData(data) {\r\n    try {\r\n        VariableSystem.LocalDB.serialize(() => {\r\n            let tempText = ''\r\n            tempText = tempText + '_id text,'\r\n            tempText = tempText + 'currentTime datetime,'\r\n            tempText = tempText + 'parent text,'\r\n            tempText = tempText + 'idDevice text,'\r\n            tempText = tempText + 'typeObject text,'\r\n            tempText = tempText + 'tag text,'\r\n            tempText = tempText + 'previousValue text,'\r\n            tempText = tempText + 'newValue text,'\r\n            tempText = tempText + 'action text,'\r\n            tempText = tempText + 'nameObject text,'\r\n            tempText = tempText + 'user text,'\r\n\r\n            let newTempText = tempText.substring(0, tempText.length - 1);\r\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS LogData(' + newTempText + ')', (err) => {\r\n                if (err) {\r\n                    response.json({\r\n                        result: \"error\",\r\n                        data: {},\r\n                        message: err\r\n                    });\r\n                } else {\r\n                    let command = `INSERT INTO LogData(_id,currentTime,parent,idDevice,typeObject,tag,previousValue,newValue,action,nameObject,user)VALUES(\r\n                    '${'a' + Math.random().toString(36)}',\r\n                    '${Date.now()}',\r\n                    '${data.parent ? data.parent : '___'}',\r\n                    '${data.idDevice ? data.idDevice : ''}',\r\n                    '${data.typeObject ? data.typeObject : ''}',\r\n                    '${data.tag ? data.tag : 0}',\r\n                    '${data.previousValue ? data.previousValue : ''}',\r\n                    '${data.newValue ? data.newValue : ''}',\r\n                    '${data.action ? data.action : ''}',\r\n                    '${data.nameObject ? data.nameObject : ''}',\r\n                    '${data.user ? data.user : ''}'\r\n                    )`\r\n                    VariableSystem.LocalDB.run(command, (err) => {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            throw err;\r\n                        } else {\r\n                            Variables.refreshLogData = true;\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nfunction saveAlarmData(data) {\r\n    try {\r\n        VariableSystem.LocalDB.serialize(() => {\r\n            let tempText = ''\r\n            tempText = tempText + '_id text,'\r\n            tempText = tempText + 'currentTime datetime,'\r\n            tempText = tempText + 'parent text,'\r\n            tempText = tempText + 'idDevice text,'\r\n            tempText = tempText + 'typeAlarm text,'\r\n            tempText = tempText + 'tag text,'\r\n            tempText = tempText + 'alarmText text,'\r\n            tempText = tempText + 'alarmAtOn int,'\r\n            tempText = tempText + 'alarmAtOff int,'\r\n            tempText = tempText + 'typeSnackBar text,'\r\n\r\n            let newTempText = tempText.substring(0, tempText.length - 1);\r\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS LogAlarmData(' + newTempText + ')', (err) => {\r\n                if (err) {\r\n                    response.json({\r\n                        result: \"error\",\r\n                        data: {},\r\n                        message: err\r\n                    });\r\n                } else {\r\n                    let command = `INSERT INTO LogAlarmData(_id,currentTime,parent,idDevice,typeAlarm,tag,alarmText,alarmAtOn,alarmAtOff,typeSnackBar)VALUES(\r\n                    '${'a' + Math.random().toString(36)}',\r\n                    '${Date.now()}',\r\n                    '${data.parent ? data.parent : '___'}',\r\n                    '${data.idDevice ? data.idDevice : ''}',\r\n                    '${data.typeAlarm ? data.typeAlarm : ''}',\r\n                    '${data.tag ? data.tag : 0}',\r\n                    '${data.alarmText ? data.alarmText : ''}',\r\n                    '${data.alarmAtOn ? data.alarmAtOn : ''}',\r\n                    '${data.alarmAtOff ? data.alarmAtOff : ''}',\r\n                    '${data.typeSnackBar ? data.typeSnackBar : ''}'\r\n                    )`\r\n                    VariableSystem.LocalDB.run(command, (err) => {\r\n                        if (err) {\r\n                            console.log(err);\r\n                            throw err;\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\nfunction setLogServer(data) {\r\n    console.log(data)\r\n    Variables.logServer.push(data + '\\n')\r\n    if (Variables.logServer.length > 100) {\r\n        Variables.logServer.shift()\r\n    }\r\n}\r\nfunction isEmpty(val) {\r\n    return (val === undefined || val == null || val.length <= 0) ? true : false;\r\n}\r\nfunction ReadBitOfPLC(WordStart, LengthOfWord, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord; i++) {\r\n        var temp = Number(Values[i]);\r\n        for (var j = 0; j < 16; j++) {\r\n            Array[16 * (i - WordStart) + j] = temp & 1;\r\n            temp = temp >> 1;\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadBitOfPLCSiemens(WordStart, LengthOfWord, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord; i++) {\r\n        var temp = Number(Values[i]);\r\n        for (var j = 0; j < 16; j++) {\r\n            if (j < 8) {\r\n                Array[16 * (i - WordStart) + j + 8] = temp & 1;\r\n                temp = temp >> 1;\r\n            }\r\n            if (j >= 8) {\r\n                Array[16 * (i - WordStart) + j - 8] = temp & 1;\r\n                temp = temp >> 1;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadWordOfPLC(Start, LengthOfWord, Values) {\r\n    var ArrayTemp = [];\r\n    if (Array.isArray(Values)) {\r\n        for (var i = Start; i < Start + LengthOfWord; i++) {\r\n            // console.log(i)\r\n            // console.log(Values[i])\r\n\r\n            if (Values[i] >= 0) {\r\n                ArrayTemp[i - Start] = (Values[i]);\r\n            } else {\r\n                ArrayTemp[i - Start] = (65536 + Values[i]);\r\n            }\r\n        }\r\n    }\r\n    return ArrayTemp;\r\n}\r\nfunction ReadWordOfPlcToByte(Start, LengthOfWord, Values) {\r\n    var byteArray = [];\r\n    for (var index = Start; index < Start + LengthOfWord; index++) {\r\n        var byte = Values[index] & 0xff;\r\n        byteArray[2 * (index - Start)] = byte;\r\n        Values[index] = (Values[index] - byte) / 256;\r\n        byteArray[2 * (index - Start) + 1] = Values[index]\r\n    }\r\n\r\n    return byteArray;\r\n}\r\nfunction StringToAscii(str) {\r\n    var code = new Array(str.length);\r\n    for (var i = 0; i < str.length; i++) {\r\n        code[i] = str.charCodeAt(i);\r\n    }\r\n    var arrOut = [], index = 0, result = 0;\r\n    for (var i = 0; i < code.length; i++) {\r\n        if (i % 2 === 0) {\r\n            result = code[i]\r\n            if (i + 1 === code.length) arrOut[index] = result;\r\n        };\r\n        if (i % 2 === 1) {\r\n            result = result + code[i] * 256;\r\n            arrOut[index] = result;\r\n            index = index + 1;\r\n        }\r\n    }\r\n    return arrOut;\r\n}\r\nfunction ReadDWordOfPLC(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n        if ((i - WordStart) % 2 == 1) {\r\n\r\n            // if((i - WordStart)==1){\r\n            //     console.log('Bit Thap '+ Values[i - 1])\r\n            //     console.log('Bit Cao '+ Values[i])\r\n            // }\r\n\r\n            if (Values[i] < 0) {\r\n                Values[i] = Values[i] + 65536;\r\n            }\r\n            if (Values[i - 1] < 0) {\r\n                Values[i - 1] = Values[i - 1] + 65536;\r\n            }\r\n\r\n            // if((i - WordStart)==1){\r\n            //     console.log('Bit Thap after '+ Values[i - 1])\r\n            //     console.log('Bit Cao after '+ Values[i])\r\n            // }\r\n\r\n            Array[(i - WordStart - 1) / 2] = (Values[i] * 65536 + Values[i - 1]);\r\n            if (Array[(i - WordStart - 1) / 2] < 0) {\r\n                Array[(i - WordStart - 1) / 2] = Array[(i - WordStart - 1) / 2] + 65536;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadReal2OfPLC(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n\r\n    if (LengthOfWord1) {\r\n        for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n            if ((i - WordStart) % 2 == 1) {\r\n                let buf = new ArrayBuffer(4);\r\n                let ints = new Uint16Array(buf);\r\n                ints[0] = Values[i - 1];\r\n                ints[1] = Values[i];\r\n                var floats = new Float32Array(buf);\r\n                Array[(i - WordStart - 1) / 2] = floats[0]\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadDWordOfPLCSiemens(WordStart, LengthOfWord1, Values) {\r\n    var Array = [];\r\n    for (var i = WordStart; i < WordStart + LengthOfWord1 * 2; i++) {\r\n        if (i % 2 == 1) {\r\n            if (Values[i] < 0) { Values[i] = Values[i] + 65536 }\r\n            if (Values[i - 1] < 0) { Values[i - 1] = Values[i - 1] + 65536 }\r\n            Array[(i - WordStart - 1) / 2] = (Values[i] + Values[i - 1] * 65536);\r\n            if (Array[(i - WordStart - 1) / 2] < 0) {\r\n                Array[(i - WordStart - 1) / 2] = Array[(i - WordStart - 1) / 2] + 65536;\r\n            }\r\n        }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadStringOfPLC(LengthOfString, Values) {\r\n    var Array = [];\r\n    for (var i = 0; i < Values.length / LengthOfString; i++) {\r\n        let TempArr = []\r\n        for (var j = 0; j < LengthOfString; j++) {\r\n            TempArr.push(Values[i * LengthOfString + j] & 0xff)\r\n            TempArr.push(parseInt(Values[i * LengthOfString + j] / 256))\r\n        }\r\n        Array[i] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n        if (Array[i].length === 0) { Array[i] = '_' }\r\n    }\r\n    return Array;\r\n}\r\nfunction ReadStringOfPLC_NodeRed(WordStart, LengthOfWord, LengthOfString, Values) {\r\n    var Array = [];\r\n    if (WordStart + LengthOfWord <= Values.length) {\r\n        for (var i = WordStart; i < WordStart + LengthOfWord / LengthOfString; i++) {\r\n            let TempArr = []\r\n            for (var j = 0; j < LengthOfString; j++) {\r\n                TempArr.push(Values[WordStart + (i - WordStart) * LengthOfString + j] & 0xff)\r\n                TempArr.push(parseInt(Values[WordStart + (i - WordStart) * LengthOfString + j] / 256))\r\n            }\r\n            Array[i - WordStart] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n            if (Array[i - WordStart].length === 0) { Array[i - WordStart] = '_' }\r\n        }\r\n    }\r\n\r\n    return Array;\r\n}\r\n\r\nfunction ReadStringOfPLCModbus(Start, LengthOfWord, LengthOfString, Values) {\r\n    var Array = [];\r\n    for (var i = Start; i < Start + LengthOfWord; i++) {\r\n        if (Values[i] >= 0) {\r\n            Array[i - Start] = (Values[i]);\r\n        } else {\r\n            Array[i - Start] = (65536 + Values[i]);\r\n        }\r\n    }\r\n    var ArrayString = []\r\n    for (var j = 0; j < Array.length / LengthOfString; j++) {\r\n        let TempArr = []\r\n        for (var jj = 0; jj < LengthOfString; jj++) {\r\n            if ((j * LengthOfString + jj) < Array.length) {\r\n                TempArr.push(Array[j * LengthOfString + jj] & 0xff)\r\n                TempArr.push(parseInt(Values[j * LengthOfString + jj] / 256))\r\n            }\r\n        }\r\n        ArrayString[j] = String.fromCharCode(...TempArr).toString().replace(/[^ -~]+/g, \"\");\r\n        if (ArrayString[j].length == 0) {\r\n            ArrayString[j] = '___'\r\n        }\r\n    }\r\n    return ArrayString;\r\n}\r\nfunction ConvertArray2Text(data) {\r\n    var temp = \"\";\r\n    for (var i = 0; i < data.length; i++) {\r\n        temp = temp + '|' + data[i];\r\n    }\r\n    return temp;\r\n}\r\nfunction CheckChangeValue(Variable, OldVariable) {\r\n    var temp = false;\r\n    if (!isEmpty(Variable)) {\r\n        for (var i = 0; i < Variable.length; i++) {\r\n            if (Variable[i] != OldVariable[i]) {\r\n                temp = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return temp;\r\n}\r\nfunction CheckNegativeNumber(nb) {\r\n    if (nb < 0) { return nb + 65536 }\r\n    if (nb > 32767) { return nb - 65536 }\r\n    return nb\r\n}\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\nfunction saveJsonFile(path, dataStore) {\r\n    try {\r\n        if (!fs.existsSync(path)) {\r\n            fs.writeFile(path, JSON.stringify(dataStore), 'utf8', function (err) {\r\n                if (err) {\r\n                    console.log(\"An error occured while writing JSON Object to File.\");\r\n                    return console.log(err);\r\n                }\r\n\r\n                console.log(\"JSON file has been saved.\");\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\nfunction saveFeedbackFile(path, dataStore) {\r\n    try {\r\n        fs.writeFile(path, dataStore, 'utf8', function (err) {\r\n            if (err) {\r\n                console.log(\"An error occured while writing JSON Object to File.\");\r\n                return console.log(err);\r\n            }\r\n            console.log(\"JSON file has been saved.\");\r\n        });\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\nfunction getJsonFile(path, cb) {\r\n    try {\r\n        if (fs.existsSync(path)) {\r\n            fs.readFile(path, 'utf8', function (err, data) {\r\n                if (err) console.log(err);\r\n                obj = JSON.parse(data);\r\n                cb(obj)\r\n            });\r\n        } else { cb('update') }\r\n    } catch (err) {\r\n        console.error(err)\r\n        cb([])\r\n    }\r\n}\r\nfunction convertPosCobot(pos0, pos1) {\r\n    var data = [];\r\n    data[0] = parseInt(pos1 % 256)\r\n    data[1] = parseInt(pos1 / 256)\r\n    data[2] = parseInt(pos0 % 256)\r\n    data[3] = parseInt(pos0 / 256)\r\n    return Buffer.from([data[3], data[2], data[1], data[0]]).readFloatBE(0)\r\n}\r\nfunction getIndexCobotWriteMB(indexBit, index) {\r\n    if (index % 10 <= indexBit) {\r\n        return index / 10\r\n    }\r\n    else {\r\n        return index / 10 + 1\r\n    }\r\n}\r\nfunction getDateTime() {\r\n    var date = new Date();\r\n    var year = date.getFullYear();\r\n\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getUTCDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n    var hour = date.getHours();\r\n    hour = (hour < 10 ? \"0\" : \"\") + hour;\r\n    var min = date.getMinutes();\r\n    min = (min < 10 ? \"0\" : \"\") + min;\r\n    var sec = date.getSeconds();\r\n    sec = (sec < 10 ? \"0\" : \"\") + sec;\r\n\r\n    return year + \"/\" + month + \"/\" + day + \" \" + hour + \":\" + min + \":\" + sec;\r\n\r\n}\r\nfunction getDate() {\r\n    var date = new Date();\r\n    var year = date.getFullYear();\r\n\r\n    var month = date.getMonth() + 1;\r\n    month = (month < 10 ? \"0\" : \"\") + month;\r\n    var day = date.getUTCDate();\r\n    day = (day < 10 ? \"0\" : \"\") + day;\r\n\r\n    return year + \"_\" + month + \"_\" + day;\r\n}\r\nfunction saveLog(path, command) {\r\n    var file = 'log/' + path + '.log';\r\n    var datetime = '[' + this.getDateTime() + '] ';\r\n    var text = datetime + command.replace(/[^ -~]+/g, \"\") + '\\r\\n';\r\n    try {\r\n        if (!fs.existsSync(file)) {\r\n            console.log(file)\r\n            fs.writeFile(file, 'Data:' + '\\r\\n', function (err) {\r\n                if (err) {\r\n                    console.log(\"An error occured while writing JSON Object to File.\");\r\n                }\r\n            });\r\n        }\r\n        fs.appendFile(file, text, function (err) {\r\n            if (err) return console.log(err);\r\n            console.log('successfully appended \"' + text + '\"');\r\n        });\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n// function saveExcel(nick, command) {\r\n//     var file = 'log/' + nick + '.csv';\r\n//     var datetime = '[' + this.getDateTime() + '] ';\r\n//     // var text = datetime + command.replace(/[^ -~]+/g, \"\") + '\\r\\n';\r\n\r\n//     let TempArr = command.split('||')\r\n//     const data = [\r\n//         { Field0: datetime, Field1: TempArr[0], Field2: TempArr[2], Field3: TempArr[3], Field4: TempArr[4] },\r\n//     ];\r\n//     (async () => {\r\n//         console.log('export-----------------------')\r\n//         const csv = new ObjectsToCsv(data);\r\n//         await csv.toDisk(file, { append: true });\r\n//         console.log(await csv.toString());\r\n//     })();\r\n// }\r\nfunction ProcessSocketIO_Fins(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'Fins-Omron') {\r\n        // if(!isNaN(data.idDevice)){\r\n        //   if(data.mode==0){\r\n        //     Variables.BitAdjust[data.idDevice][parseInt(data.tag)] = 0\r\n        //     Variables.BitDisplay[data.idDevice][parseInt(data.tag)] = 0\r\n        //   }\r\n        //   if(data.mode==1){\r\n        //     Variables.BitAdjust[data.idDevice][parseInt(data.tag)] = 1\r\n        //     Variables.BitDisplay[data.idDevice][parseInt(data.tag)] = 1\r\n        //   }\r\n        // }\r\n        if (parseInt(data.idDevice)) {\r\n            if (parseInt(VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)])) {\r\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\r\n                    if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                        Variables.OldWordBitAdjust[parseInt(data.idDevice)] = Variables.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                    }\r\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) / 16\r\n                    let currentWordOfBitAdjust = Variables.OldWordBitAdjust[data.idDevice][parseInt(parseInt(data.tag) / 16)]\r\n                    currentWordOfBitAdjust ^= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    Variables.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                    console.log('Write Bit To PLC')\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\r\n                }\r\n            } else {\r\n                if (parseInt(data.enableLogData)) {\r\n                    SubFunction.saveLogData({\r\n                        parent: 'logData',\r\n                        idDevice: data.idDevice,\r\n                        typeObject: 'BitAdjust',\r\n                        tag: data.tag,\r\n                        previousValue: 'old',\r\n                        newValue: 'new',\r\n                        action: 'Toggle',\r\n                        nameObject: '',\r\n                        user: data.currentUser\r\n                    })\r\n                }\r\n\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [110, 110, data.mode, data.mode, data.tag, data.tag]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.tag) <= VariableSystem.PLC_LengthOfWordWordAdjust[parseInt(data.idDevice)]) {\r\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + (parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)), [data.value]);\r\n                }\r\n            } else {\r\n                // Variables.WordAdjust[1][parseInt(data.tag)] = parseInt(data.value)\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [111, 111, data.tag, data.tag, data.value, data.value]);\r\n            }\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        if (parseInt(data.idDevice)) {\r\n            var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n            var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n            VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [112, 112, data.tag, data.tag, heightValueDWordAdjust, heightValueDWordAdjust, lowValueDWordAdjust, lowValueDWordAdjust]);\r\n        }\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Fins-Omron') {\r\n        var myBuffer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 40) myBuffer[i] = buffer[i];\r\n        }\r\n        let arr1 = [113, 113, data.tag, data.tag, 0, 0, 0, 0, 0, 0, 0,]\r\n        let arrResult = arr1.concat(myBuffer)\r\n\r\n        if (data.idDevice == '0') {\r\n            Variables.TextFieldInput[0][parseInt(data.tag)] = arrResult\r\n        } else {\r\n            if (parseInt(data.idDevice)) {\r\n                VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', arrResult);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction ProcessSocketIO_System(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && !isNaN(data.idDevice) && data.typeDevice === 'System') {\r\n        if (data.mode == 2) {\r\n            Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\r\n            Variables.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\r\n        }\r\n        if (data.mode == 0) {\r\n            Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n            Variables.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = 0\r\n        }\r\n        if (data.mode == 1) {\r\n            Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n            Variables.BitDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = 1\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n        Variables.WordDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        Variables.DWordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n        Variables.DWordDisplay[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'System') {\r\n        var myBuffer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 40) myBuffer[i] = buffer[i];\r\n        }\r\n        let arr1 = [113, 113, data.tag, data.tag, 0, 0, 0, 0, 0, 0, 0,]\r\n        let arrResult = arr1.concat(myBuffer)\r\n\r\n        if (data.idDevice == '0') {\r\n            Variables.TextFieldInput[parseInt(data.idDevice)][parseInt(data.tag)] = arrResult\r\n        }\r\n    }\r\n}\r\nfunction ProcessSocketIO_Modbus(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n    if (data.NameCommand === 'ElementWord_Force_RUN' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n                    let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n                    let currentWordOfElement = Variables.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n                    currentWordOfElement = currentWordOfElement | 1 << 4;\r\n                    currentWordOfElement = currentWordOfElement & ~(1 << 3);\r\n                    Variables.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data.NameCommand === 'ElementWord_Force_STOP' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n                    let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n                    let currentWordOfElement = Variables.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n                    //num & ~(1<<bit);\r\n                    currentWordOfElement = currentWordOfElement | 1 << 3;\r\n                    currentWordOfElement = currentWordOfElement & ~(1 << 4);\r\n                    Variables.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data.NameCommand === 'ElementWord_RUN' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n                    let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n                    let currentWordOfElement = Variables.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n                    currentWordOfElement = currentWordOfElement | 1 << 0;\r\n                    Variables.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data.NameCommand === 'ElementWord_STOP' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n                    let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n                    let currentWordOfElement = Variables.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n                    //num & ~(1<<bit);\r\n                    currentWordOfElement = currentWordOfElement & ~(1 << 0);\r\n                    Variables.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data.NameCommand === 'ElementWord_AUTO' && !isNaN(data.indexElement) && data.typeDevice === 'Modbus-Client') {\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.indexElement) <= VariableSystem.PLC_LengthOfWordElement[parseInt(data.idDevice)]) {\r\n                    let numberWordOfElement = VariableSystem.PLC_WordStartElement[parseInt(data.idDevice)] + parseInt(data.indexElement)\r\n                    let currentWordOfElement = Variables.Element[parseInt(data.idDevice)][parseInt(data.indexElement)]\r\n                    //num & ~(1<<bit);\r\n                    currentWordOfElement = currentWordOfElement & ~(1 << 3);\r\n                    currentWordOfElement = currentWordOfElement & ~(1 << 4);\r\n                    Variables.clientMB.writeSingleRegister(parseInt(numberWordOfElement), currentWordOfElement).then(function (resp) {\r\n                    }, console.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        if (data.idDevice == 'system') {\r\n            Variables.BitAdjust[0][parseInt(data.tag)] = !Variables.BitAdjust[0][parseInt(data.tag)]\r\n            Variables.BitDisplay[0][parseInt(data.tag)] = Variables.BitAdjust[0][parseInt(data.tag)]\r\n        } else {\r\n            if (parseInt(data.idDevice)) {\r\n                if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                    if (data.mode == 2) {\r\n                        if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\r\n                            if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                                Variables.OldWordBitAdjust[parseInt(data.idDevice)] = Variables.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                            }\r\n                            let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                            let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(parseInt(data.tag) / 16)\r\n                            let currentWordOfBitAdjust = Variables.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                            currentWordOfBitAdjust ^= mask;\r\n                            VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                            Variables.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                            VariableSystem.COMMUNICATION_PLC_MODBUS[parseInt(data.idDevice)].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                            }, console.error);\r\n                        }\r\n                    }\r\n                    if (data.mode == 1) {\r\n                        if (parseInt(data.tag) / 16 <= VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)]) {\r\n                            let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                            let numberWordOfBitAdjust = VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)] + parseInt(data.tag) / 16\r\n                            let currentWordOfBitAdjust = Variables.WordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                            currentWordOfBitAdjust |= mask;\r\n                            VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                            }, console.error);\r\n                        }\r\n                    }\r\n                    if (data.mode == 0) {\r\n                        if (parseInt(data.tag) / 16 <= VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)]) {\r\n                            let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                            console.log(mask)\r\n                            let numberWordOfBitAdjust = VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)] + parseInt(data.tag) / 16\r\n                            let currentWordOfBitAdjust = Variables.WordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)]\r\n                            currentWordOfBitAdjust &= ~mask;\r\n                            VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                            VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(numberWordOfBitAdjust), currentWordOfBitAdjust).then(function (resp) {\r\n                            }, console.error);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag) && data.tag == 'ExportPos') {\r\n    //     var TAB = '\\t';\r\n    //     ProjectFunction.savePositions('PositionSolomon', Variables.WordDisplay[4] + TAB + Variables.WordDisplay[5] + TAB + Variables.WordDisplay[6] + TAB + Variables.WordDisplay[7] + TAB + Variables.WordDisplay[8] + TAB + Variables.WordDisplay[9]);\r\n    // }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        if (data.idDevice == 'system') {\r\n            Variables.WordAdjust[0][parseInt(data.tag)] = data.value\r\n        } else {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.tag) <= parseInt(VariableSystem.PLC_LengthOfWordWordAdjust[parseInt(data.idDevice)])) {\r\n                    let DataWrite\r\n                    if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n                        DataWrite = parseInt(data.value)\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag), DataWrite).then(function (resp) {\r\n                        }, console.error);\r\n                    } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n                        DataWrite = parseInt(data.value) + 65536\r\n                        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeSingleRegister(parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag), DataWrite).then(function (resp) {\r\n                            // Variables.clientMB.writeMultipleRegisters(parseInt(config.PLC_Modbus_WordStartWordAdjust) + parseInt(data.tag), byteArray).then(function (resp) {\r\n                        }, console.error);\r\n                    }\r\n                    console.log(parseInt(data.value))\r\n\r\n                }\r\n            }\r\n            // VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [111, 111, data.tag, data.tag, data.value, data.value]);\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n        var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartDWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) * 2, [lowValueDWordAdjust, heightValueDWordAdjust]).then(function (resp) {\r\n            console.log(resp)\r\n        }, console.error);\r\n    }\r\n    //TextFieldInput\r\n    if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Client') {\r\n        var myBuffer = new Array(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]).fill(0);\r\n        var str = data.value;\r\n        var buffer = new Buffer(str, 'utf8');\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (i < 2 * VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]) myBuffer[i] = buffer[i];\r\n        }\r\n        VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartString[parseInt(data.idDevice)]) + parseInt(data.tag) * parseInt(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]), myBuffer).then(function (resp) {\r\n            console.log(resp)\r\n        }, console.error);\r\n    }\r\n}\r\nfunction ProcessSocketIO_Modbus_Server(data) {\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        if (parseInt(data.idDevice)) {\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_BitAdjust[parseInt(data.idDevice)]\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value)\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        if (parseInt(data.value) >= 0 && parseInt(data.value) < 65536) {\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_WordAdjust[parseInt(data.idDevice)]\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value)\r\n        } else if (parseInt(data.value) < 0 && parseInt(data.value) > -32767) {\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_WordAdjust[parseInt(data.idDevice)]\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = parseInt(data.value) + 65536\r\n        }\r\n    }\r\n    //DWordAdjust\r\n    if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'Modbus-Server') {\r\n        var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n        var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n        Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)]] = VariableSystem.PLC_Code_DWordAdjust[parseInt(data.idDevice)]\r\n        Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 1] = parseInt(data.tag)\r\n        Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 2] = heightValueDWordAdjust\r\n        Variables.StoreModbusServerReg[parseInt(data.idDevice)][VariableSystem.PLC_WordStartComPC[parseInt(data.idDevice)] + 3] = lowValueDWordAdjust\r\n    }\r\n    //TextFieldInput\r\n    // if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\r\n    //     var myBuffer = new Array(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]).fill(0);\r\n    //     var str = data.value;\r\n    //     var buffer = new Buffer(str, 'utf8');\r\n    //     for (let i = 0; i < buffer.length; i++) {\r\n    //         if (i < 2 * VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]) myBuffer[i] = buffer[i];\r\n    //     }\r\n    // VariableSystem.COMMUNICATION_PLC_MODBUS[data.idDevice].writeMultipleRegisters(parseInt(VariableSystem.PLC_WordStartString[parseInt(data.idDevice)]) + parseInt(data.tag) * parseInt(VariableSystem.PLC_NumberWordInString[parseInt(data.idDevice)]), myBuffer).then(function (resp) {\r\n    //     console.log(resp)\r\n    // }, console.error);\r\n    // }\r\n}\r\nfunction ProcessSocketIO_Profinet(data) {\r\n    // //Force 1\r\n    // if (data.NameCommand === 'ElementForce_Run' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [100, 100, data.tag, data.tag]);\r\n    // }\r\n    // //Force 0\r\n    // if (data.NameCommand === 'ElementForce_Stop' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [101, 101, data.tag, data.tag]);\r\n    // }\r\n    // //UnForce\r\n    // if (data.NameCommand === 'ElementForce_Auto' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [102, 102, data.tag, data.tag]);\r\n    // }\r\n    // //Interlock\r\n    // if (data.NameCommand === 'ElementForce_Interlock' && !isNaN(data.tag)) {\r\n    //   VariableSystem.COMMUNICATION_PLC_OMRON.write('D1000', [103, 103, data.tag, data.tag]);\r\n    // }\r\n\r\n    //BitAdjust\r\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'ProfiNet') {\r\n        // if(!isNaN(data.idDevice)){\r\n        //   if(data.mode==0){\r\n        //     Variables.BitAdjust[data.idDevice][parseInt(data.tag)] = 0\r\n        //     Variables.BitDisplay[data.idDevice][parseInt(data.tag)] = 0\r\n        //   }\r\n        //   if(data.mode==1){\r\n        //     Variables.BitAdjust[data.idDevice][parseInt(data.tag)] = 1\r\n        //     Variables.BitDisplay[data.idDevice][parseInt(data.tag)] = 1\r\n        //   }\r\n        // }\r\n        if (parseInt(data.idDevice)) {\r\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\r\n                    if (!VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)]) {\r\n                        Variables.OldWordBitAdjust[parseInt(data.idDevice)] = Variables.WordBitAdjust[parseInt(data.idDevice)].slice()\r\n                    }\r\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\r\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag) / 16\r\n                    let currentWordOfBitAdjust = Variables.OldWordBitAdjust[data.idDevice][parseInt(parseInt(data.tag) / 16)]\r\n                    currentWordOfBitAdjust ^= mask;\r\n                    VariableSystem.TimeDelayWriteWordBitAdjust[parseInt(data.idDevice)] = 10\r\n                    Variables.OldWordBitAdjust[parseInt(data.idDevice)][parseInt(parseInt(data.tag) / 16)] = currentWordOfBitAdjust\r\n                    VariableSystem.COMMUNICATION_PLC_SIEMENS[parseInt(data.idDevice)].writeItems('DB1,INT' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\r\n                }\r\n            } else {\r\n                if (parseInt(data.enableLogData)) {\r\n                    SubFunction.saveLogData({\r\n                        parent: 'logData',\r\n                        idDevice: data.idDevice,\r\n                        typeObject: 'BitAdjust',\r\n                        tag: data.tag,\r\n                        previousValue: 'old',\r\n                        newValue: 'new',\r\n                        action: 'Toggle',\r\n                        nameObject: '',\r\n                        user: data.currentUser\r\n                    })\r\n                }\r\n                VariableSystem.COMMUNICATION_PLC_SIEMENS[parseInt(data.idDevice)].writeItems('ComPC', [110, 110, data.mode, data.mode, data.tag, data.tag], () => { console.log('can not write data Siemens') })\r\n            }\r\n        }\r\n    }\r\n\r\n    //WordAdjust\r\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag) && data.typeDevice === 'ProfiNet') {\r\n        if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\r\n            if (parseInt(data.tag) <= VariableSystem.PLC_LengthOfWordWordAdjust[parseInt(data.idDevice)]) {\r\n                VariableSystem.COMMUNICATION_PLC_SIEMENS[parseInt(data.idDevice)].writeItems('DB1,INT' + (parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)), [data.value]);\r\n            }\r\n        } else {\r\n            VariableSystem.COMMUNICATION_PLC_SIEMENS[parseInt(data.idDevice)].writeItems('ComPC', [111, 111, data.tag, data.tag, data.value, data.value], () => { console.log('can not write data Siemens') })\r\n        }\r\n    }\r\n    // //DWordAdjust\r\n    // if (data.NameCommand === 'DWordAdjustForce' && !isNaN(data.tag)) {\r\n    //     var heightValueDWordAdjust = parseInt(data.value / 65536);\r\n    //     var lowValueDWordAdjust = parseInt(data.value % 65536);\r\n    //     VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D1000', [112, 112, data.tag, data.tag, heightValueDWordAdjust, heightValueDWordAdjust, lowValueDWordAdjust, lowValueDWordAdjust]);\r\n    // }\r\n\r\n}\r\nmodule.exports = {\r\n    saveLogData, saveAlarmData, setLogServer,\r\n    ReadWordOfPlcToByte, StringToAscii, ReadBitOfPLC, ReadBitOfPLCSiemens, ReadWordOfPLC, ReadDWordOfPLCSiemens,\r\n    ReadDWordOfPLC, ConvertArray2Text, CheckChangeValue, CheckNegativeNumber,\r\n    getRandomInt, saveJsonFile, getJsonFile, saveFeedbackFile,\r\n    convertPosCobot, getIndexCobotWriteMB, ReadStringOfPLC, ReadStringOfPLCModbus, getDateTime,\r\n    saveLog,\r\n    // saveExcel,\r\n    getDate, ReadReal2OfPLC, ReadStringOfPLC_NodeRed,\r\n    ProcessSocketIO_Fins, ProcessSocketIO_Modbus, ProcessSocketIO_Modbus_Server, ProcessSocketIO_Profinet, ProcessSocketIO_System\r\n}","var logServer = []\r\nvar oldLogServer = []\r\nvar currentUser = '';\r\nvar logs = []\r\n\r\nvar refreshData3D = true\r\nvar refreshDataPercent = true;\r\nvar refreshDataElement = true;\r\nvar refreshDataElementWord = true;\r\nvar refreshDataBitAdjust = true;\r\nvar refreshDataMap = true;\r\nvar refreshDataBitDisplay = true;\r\nvar refreshDataWordAdjust = true;\r\nvar refreshDataWordDisplay = true;\r\nvar refreshDataDWordAdjust = true;\r\nvar refreshDataDWordDisplay = true;\r\nvar refreshDataRealDisplay = true;\r\nvar refreshDataImage = true;\r\nvar refreshDataLabel = true;\r\nvar refreshDataString = true;\r\nvar refreshDataLine = true;\r\nvar refreshDataPoint = true;\r\nvar refreshDataPointPickPlace = true;\r\nvar refreshDataPanel = true;\r\nvar refreshDataChart = true;\r\nvar refreshDataProjectCall = true;\r\nvar refreshDataPalletizer = true;\r\nvar refreshDataPalletizerProduct = true;\r\nvar refreshDataTextField = true;\r\nvar refreshDataTextFieldInput = true;\r\nvar refreshDataPosCobot = true;\r\nvar refreshDataSubScreenImageLibrary = true;\r\nvar refreshDataBitDisplayImageLibrary = true;\r\nvar refreshDataBitAdjustImageLibrary = true;\r\nvar refreshDataMapImageLibrary = true;\r\nvar refreshDataElementImageLibrary = true;\r\nvar refreshDataGroupControl = true;\r\nvar refreshDataUser = true;\r\nvar refreshDataProduct = true;\r\nvar refreshDataSampleRoute = true;\r\nvar refreshDataFormularProject = true;\r\nvar refreshDataScaleProject = true;\r\nvar refreshDataGoal = true;\r\nvar refreshDataSearchBox = true;\r\nvar refreshDataSearchBoxList = true;\r\nvar refreshDataReportScaleProject = true;\r\nvar refreshDataReportScaleProjectTonKho = true;\r\nvar refreshDataProjectNanoenvi = true;\r\nvar refreshDataProjectStampingMachine = true;\r\nvar refreshDataJoystick = true;\r\nvar refreshDataIconImageLibrary = true\r\nvar refreshDataImageBackgroundImageLibrary = true\r\n\r\nvar refreshMemonic = true;\r\n\r\nvar refreshLogData = true;\r\n\r\nvar haveChangeElement = false;\r\nvar haveChangeBitAdjust = false;\r\nvar haveChangeMap = false;\r\nvar haveChangeBitDisplay = false;\r\nvar haveChangeWordAdjust = false;\r\nvar haveChangeWordDisplay = false;\r\nvar haveChangeDWordAdjust = false;\r\nvar haveChangeDWordDisplay = false;\r\nvar haveChangeRealDisplay = false;\r\nvar haveChangeTextField = false;\r\nvar haveChangeTextFieldInput = false;\r\nvar haveChangeString = false;\r\nvar haveChangePercent = false;\r\nvar haveChangeValueRotate = false;\r\nvar haveChangeJoystick = true;\r\n\r\nvar haveChangeMemonic = false;\r\n\r\nvar haveChangeArrElement = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrBitAdjust = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrBitAdjust_SetupAlarm = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrBitDisplay_SetupAlarm = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrBitDisplay = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrWordAdjust = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrWordDisplay = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrDWordAdjust = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrDWordDisplay = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrRealDisplay = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrString = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrTextField = [true, true, true, true, true, true, true, true, true, true];\r\nvar haveChangeArrTextFieldInput = [true, true, true, true, true, true, true, true, true, true];\r\n\r\n\r\n//////////////////////////////////////////////////////////////////MODBUS\r\nvar StoreModbusServerReg = [[], [], [], [], [], [], [], [], [], []];\r\nvar StoreModbusServerBit = [[], [], [], [], [], [], [], [], [], []];\r\nvar Element = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldElement = [[], [], [], [], [], [], [], [], [], []];\r\nvar Map = [];\r\nvar BitDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldBitDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar BitAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldBitAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar WordDisplay = [[1, 2, 3], [], [], [], [], [], [], [], [], []];\r\nvar OldWordDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar WordAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldWordAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar DWordDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldDWordDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar RealDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldRealDisplay = [[], [], [], [], [], [], [], [], [], []];\r\nvar DWordAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldDWordAdjust = [[], [], [], [], [], [], [], [], [], []];\r\nvar TextField = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldTextField = [[], [], [], [], [], [], [], [], [], []];\r\nvar TextFieldInput = [[], [], [], [], [], [], [], [], [], []];\r\nvar OldTextFieldInput = [[], [], [], [], [], [], [], [], [], []];\r\nvar WritePosCobot = [];\r\nvar WordBitAdjust = [];\r\nvar OldWordBitAdjust = [];\r\nvar ListString = [[], [], [], [], [], [], [], [], [], []];\r\nvar ListUserPass = [];\r\nvar ResultString = [];\r\nvar OldListString = [[], [], [], [], [], [], [], [], [], []];\r\nvar Percent = [];\r\nvar OldPercent = [];\r\nvar ValueRotate = [];\r\nvar OldValueRotate = [];\r\nvar ComPC = []\r\n\r\nvar IndexSocketInputSignal = 2;\r\nvar IndexSocketBitDisplay = 3;\r\nvar IndexSocketBitAdjust = 4;\r\nvar IndexSocketWordDisplay = 5;\r\nvar IndexSocketWordAdjust = 6;\r\nvar IndexSocketDWordDisplay = 7;\r\nvar IndexSocketDWordAdjust = 8;\r\n\r\nvar CheckBitDisplay = \"\";\r\nvar CheckBitAdjust = \"\";\r\nvar CheckWordDisplay = \"\";\r\nvar CheckWordAdjust = \"\";\r\nvar CheckDWordDisplay = \"\";\r\nvar CheckDWordAdjust = \"\";\r\n\r\nvar resultPercent = [];\r\nvar resultBitDisplay = [];\r\nvar resultBitAdjust = [];\r\nvar resultWordDisplay = [];\r\nvar resultWordAdjust = [];\r\nvar resultDWordDisplay = [];\r\nvar resultRealDisplay = [];\r\nvar resultDWordAdjust = [];\r\nvar resultPanel = [];\r\nvar resultChart = [];\r\nvar resultProjectCall = [];\r\nvar resultPalletizer = [];\r\nvar resultPalletizerProduct = [];\r\nvar resultlabel = [];\r\nvar resultline = [];\r\nvar resultElement = [];\r\nvar resultElementWord = [];\r\nvar resultTextField = [];\r\nvar resultTextFieldInput = [];\r\nvar resultcustomeroperator;\r\nvar refreshdata;\r\nvar CustomerOperator;\r\nvar resultPosCobot = []\r\nvar resultImage = []\r\nvar resultBitDisplayImageLibrary = []\r\nvar resultSubScreenImageLibrary = []\r\nvar resultBitAdjustImageLibrary = []\r\nvar resultIconImageLibrary = []\r\nvar resultImageBackgroundImageLibrary = []\r\nvar resultMapImageLibrary = []\r\nvar resultElementImageLibrary = []\r\nvar resultGroupControl = []\r\nvar resultUser = []\r\nvar resultProduct = []\r\nvar resultSampleRoute = []\r\nvar resultFormularProject = []\r\nvar resultScaleProject = []\r\nvar resultFormularProjectConvertType = []\r\nvar resultGoal = []\r\nvar resultSearchBox = []\r\nvar resultSearchBoxList = []\r\nvar resultReportScaleProject = []\r\nvar resultReportScaleProjectTonKho = []\r\nvar resultProjectNanoenvi1 = []\r\nvar resultProjectNanoenvi2 = []\r\nvar resultProjectNanoenvi3 = []\r\nvar resultProjectNanoenvi4 = []\r\nvar resultProjectNanoenvi = []\r\nvar resultStampingMachineStartTime = []\r\nvar storeListString = []\r\nvar resultFlow = []\r\nvar resultJoystick = []\r\n\r\n//PALLETIZER\r\nvar namePallet = ''\r\n//////////////////////////////////////////////////////////////////OMRON\r\nvar ValueCommunicationPLC = [];\r\n\r\nvar LoadProductsToPLC = false;\r\nvar xlData;\r\nvar xlData2;\r\nvar StoreBoxPalletizer = [];\r\nvar Plc_Connect_Status = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nvar Timer_Check_Connect_Status = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3];\r\n\r\n//HungKhang\r\nvar StoragePallet = []\r\nvar refreshStoragePallet = true\r\n\r\nvar StoragePallet2 = []\r\nvar refreshStoragePallet2 = true\r\n\r\nvar StoragePalletManual = []\r\nvar refreshStoragePalletManual = true\r\n\r\n//Weinteck\r\nvar refreshScreen_Label = true\r\nvar resultProjectScreen_Label = []\r\n\r\nvar refreshScreen_Panel = true\r\nvar resultProjectScreen_Panel = []\r\n\r\nvar refreshScreen_Element = true\r\nvar resultProjectScreen_Element = []\r\n\r\nvar refreshScreen_BitDisplay = true\r\nvar resultProjectScreen_BitDisplay = []\r\n\r\nvar refreshScreen_BitAdjust = true\r\nvar resultProjectScreen_BitAdjust = []\r\n\r\nvar refreshScreen_WordDisplay = true\r\nvar resultProjectScreen_WordDisplay = []\r\n\r\nvar refreshScreen_WordAdjust = true\r\nvar resultProjectScreen_WordAdjust = []\r\n\r\nvar refreshScreen_DWordDisplay = true\r\nvar resultProjectScreen_DWordDisplay = []\r\n\r\nvar refreshScreen_DWordAdjust = true\r\nvar resultProjectScreen_DWordAdjust = []\r\n\r\nvar refreshScreen_Line = true\r\nvar resultProjectScreen_Line = []\r\n\r\nvar refreshScreen_String = true\r\nvar resultProjectScreen_String = []\r\n\r\nvar refreshScreen_TextFieldInput = true\r\nvar resultProjectScreen_TextFieldInput = []\r\n\r\nvar refreshSetupElement = true\r\nvar resultSetupElement = []\r\n\r\nvar refreshDataSetupAlarm = true\r\nvar resultSetupAlarm = []\r\nvar resultSetupAlarmTable = []\r\nvar resultSetupAlarmTable_BitDisplay = []\r\nvar resultSetupAlarmTable_BitAdjust = []\r\n\r\nvar resultMemonic = []\r\n\r\nvar clientMB, clientMB_Writting = false;\r\nvar turnOff = 0\r\nvar result3D = []\r\nmodule.exports = {\r\n    turnOff, logs,\r\n    logServer, oldLogServer, refreshLogData,\r\n    Plc_Connect_Status, Timer_Check_Connect_Status,\r\n    namePallet,\r\n    currentUser,\r\n    ValueCommunicationPLC, ListUserPass,\r\n    WritePosCobot, resultImage, refreshDataSubScreenImageLibrary, refreshDataBitDisplayImageLibrary, refreshDataBitAdjustImageLibrary, resultBitDisplayImageLibrary, resultBitAdjustImageLibrary,\r\n    refreshDataMapImageLibrary,\r\n    resultSubScreenImageLibrary, resultMapImageLibrary, refreshDataElementImageLibrary, resultElementImageLibrary,\r\n    refreshDataElement, refreshDataElementWord, refreshDataBitAdjust, refreshDataBitDisplay, refreshDataMap, refreshDataWordAdjust, refreshDataWordDisplay, refreshDataDWordAdjust, refreshDataDWordDisplay,\r\n    refreshDataImage, refreshDataLabel, refreshDataString, refreshDataLine, refreshDataPoint, refreshDataPointPickPlace, refreshDataPanel, refreshDataChart, refreshDataProjectCall, refreshDataPalletizer,\r\n    refreshDataPalletizerProduct, refreshDataTextField, refreshDataTextFieldInput,\r\n    refreshDataGroupControl, refreshDataRealDisplay, refreshDataJoystick,\r\n\r\n    haveChangeElement, haveChangeBitAdjust, haveChangeBitDisplay, haveChangeMap, haveChangeWordAdjust, haveChangeWordDisplay, haveChangeDWordAdjust, haveChangeDWordDisplay, haveChangeTextField, haveChangeTextFieldInput,\r\n    haveChangeRealDisplay, haveChangeJoystick,\r\n\r\n    StoreModbusServerReg, StoreModbusServerBit,\r\n    refreshDataPercent, resultPercent, Percent, OldPercent, haveChangePercent,\r\n    Element, OldElement,\r\n    Map, BitDisplay, BitAdjust, WordDisplay, WordAdjust, DWordDisplay, DWordAdjust,\r\n    OldBitDisplay, OldBitAdjust, OldWordDisplay, OldWordAdjust, OldDWordDisplay, OldDWordAdjust,\r\n    TextField, OldTextField, TextFieldInput, OldTextFieldInput, WordBitAdjust, OldWordBitAdjust,\r\n    RealDisplay, OldRealDisplay,\r\n\r\n    IndexSocketInputSignal, IndexSocketBitAdjust, IndexSocketBitDisplay, IndexSocketWordDisplay, IndexSocketWordAdjust, IndexSocketDWordDisplay, IndexSocketDWordAdjust,\r\n    CheckBitDisplay, CheckBitAdjust, CheckWordDisplay, CheckWordAdjust, CheckDWordDisplay, CheckDWordAdjust,\r\n    resultlabel, resultline, resultElement, resultElementWord, resultBitDisplay, resultBitAdjust, resultWordDisplay, resultWordAdjust, resultDWordDisplay, resultDWordAdjust, resultPanel, resultChart, resultProjectCall,\r\n    resultPalletizer, resultPalletizerProduct,\r\n    resultTextField, resultTextFieldInput,\r\n    resultRealDisplay,\r\n    resultcustomeroperator, refreshdata, CustomerOperator,\r\n    resultFlow, resultJoystick,\r\n\r\n    refreshDataPosCobot, resultPosCobot, resultGroupControl,\r\n    ListString, OldListString, haveChangeString, ResultString, storeListString,\r\n\r\n    refreshData3D,\r\n    refreshDataProduct, resultProduct, refreshDataUser, resultUser, LoadProductsToPLC,\r\n    refreshDataGoal, resultGoal, refreshDataSampleRoute, resultSampleRoute,\r\n    refreshDataFormularProject, resultFormularProject, resultFormularProjectConvertType,\r\n    xlData, xlData2,\r\n    refreshDataScaleProject, resultScaleProject,\r\n    refreshDataSearchBox, resultSearchBox,\r\n    refreshDataSearchBoxList, resultSearchBoxList,\r\n    refreshDataReportScaleProject, resultReportScaleProject,\r\n    refreshDataReportScaleProjectTonKho, resultReportScaleProjectTonKho,\r\n    refreshDataProjectNanoenvi, resultProjectNanoenvi, resultProjectNanoenvi1, resultProjectNanoenvi2, resultProjectNanoenvi3, resultProjectNanoenvi4,\r\n    refreshDataProjectStampingMachine, resultStampingMachineStartTime,\r\n    ValueRotate, OldValueRotate, haveChangeValueRotate, StoreBoxPalletizer,\r\n    StoragePallet, refreshStoragePallet,\r\n    StoragePallet2, refreshStoragePallet2,\r\n    StoragePalletManual, refreshStoragePalletManual,\r\n    refreshScreen_Label, resultProjectScreen_Label,\r\n    refreshScreen_Panel, resultProjectScreen_Panel,\r\n    refreshScreen_Element, resultProjectScreen_Element,\r\n    refreshScreen_BitDisplay, resultProjectScreen_BitDisplay,\r\n    refreshScreen_BitAdjust, resultProjectScreen_BitAdjust,\r\n    refreshScreen_WordDisplay, resultProjectScreen_WordDisplay,\r\n    refreshScreen_WordAdjust, resultProjectScreen_WordAdjust,\r\n    refreshScreen_DWordDisplay, resultProjectScreen_DWordDisplay,\r\n    refreshScreen_DWordAdjust, resultProjectScreen_DWordAdjust,\r\n    refreshScreen_String, resultProjectScreen_String,\r\n    refreshScreen_TextFieldInput, resultProjectScreen_TextFieldInput,\r\n    refreshScreen_Line, resultProjectScreen_Line,\r\n    refreshSetupElement, resultSetupElement,\r\n    refreshDataSetupAlarm, resultSetupAlarm, resultSetupAlarmTable, resultSetupAlarmTable_BitDisplay, resultSetupAlarmTable_BitAdjust,\r\n\r\n    haveChangeArrBitAdjust, haveChangeArrBitAdjust_SetupAlarm,\r\n    haveChangeArrBitDisplay, haveChangeArrBitDisplay_SetupAlarm,\r\n    haveChangeArrWordAdjust, haveChangeArrWordDisplay,\r\n    haveChangeArrDWordAdjust, haveChangeArrDWordDisplay,\r\n    haveChangeArrElement, haveChangeArrString, haveChangeArrTextField, haveChangeArrTextFieldInput,\r\n    haveChangeArrRealDisplay,\r\n    clientMB, clientMB_Writting,\r\n    ComPC,\r\n\r\n    refreshMemonic, haveChangeMemonic, resultMemonic,\r\n    resultIconImageLibrary, refreshDataIconImageLibrary,\r\n    resultImageBackgroundImageLibrary, refreshDataImageBackgroundImageLibrary,\r\n    result3D\r\n}","\r\nvar active = false\r\nvar LocalDB = null\r\nvar PathLocalDB;\r\nvar IO;\r\nvar ProjectPalletizer = false\r\nvar COMMUNICATION_PLC_OMRON = [];\r\nvar COMMUNICATION_PLC_MODBUS = [];\r\nvar COMMUNICATION_MOBILE_ROBOT = [];\r\nvar COMMUNICATION_MOBILE_ROBOT_TIMER = [];\r\nvar PositionMobileRobot = [{}, {}, {}, {}, {}]\r\nvar OldPositionMobileRobot = []\r\n\r\nvar COMMUNICATION_SOCKET_CLIENT = [];\r\nvar COMMUNICATION_PLC_SIEMENS = []\r\nvar COMMUNICATION_VNC = []\r\nvar COMMUNICATION_VNC_INITIAL_DATA = []\r\nvar COMMUNICATION_SERVER_TYPE = [];\r\n\r\nvar TimeDelayWriteWordBitAdjust = [];\r\n\r\nvar PLC_Code_BitAdjust = [];\r\nvar PLC_Code_WordAdjust = [];\r\nvar PLC_Code_DWordAdjust = [];\r\n\r\nvar PLC_WordStartElement = []\r\nvar PLC_LengthOfWordElement = []\r\n\r\nvar PLC_WordStartBitDisplay = []\r\nvar PLC_LengthOfWordBitDisplay = []\r\n\r\nvar PLC_BitStartBitDisplay = []\r\nvar PLC_LengthOfBitBitDisplay = []\r\n\r\nvar PLC_WordStartBitAdjust = []\r\nvar PLC_LengthOfWordBitAdjust = []\r\n\r\nvar PLC_BitStartBitAdjust = []\r\nvar PLC_LengthOfBitBitAdjust = []\r\n\r\nvar PLC_WordStartWordDisplay = []\r\nvar PLC_LengthOfWordWordDisplay = []\r\n\r\nvar PLC_WordStartWordAdjust = []\r\nvar PLC_LengthOfWordWordAdjust = []\r\n\r\nvar PLC_WordStartDWordDisplay = []\r\nvar PLC_LengthOfWordDWordDisplay = []\r\n\r\nvar PLC_WordStartDWordAdjust = []\r\nvar PLC_LengthOfWordDWordAdjust = []\r\n\r\nvar PLC_Length_ReadWrite = []\r\n\r\nvar PLC_WriteUnSafe = []\r\nvar PLC_WordStartRotate = []\r\nvar PLC_LengthOfWordRotate = []\r\nvar PLC_WordStartComPC = []\r\nvar PLC_LengthOfWordComPC = []\r\nvar PLC_IntervalWriteData = []\r\nvar PLC_Enable_String = []\r\nvar PLC_WordStartString = []\r\nvar PLC_LengthOfWordString = []\r\nvar PLC_NumberWordInString = []\r\n\r\nvar RefreshData = false\r\n\r\nmodule.exports = {\r\n    PositionMobileRobot, OldPositionMobileRobot,\r\n    active,\r\n    IO, PathLocalDB, LocalDB,\r\n    PLC_Code_BitAdjust, PLC_Code_WordAdjust, PLC_Code_DWordAdjust,\r\n    ProjectPalletizer, COMMUNICATION_SERVER_TYPE,\r\n    COMMUNICATION_PLC_OMRON, COMMUNICATION_MOBILE_ROBOT, COMMUNICATION_MOBILE_ROBOT_TIMER, COMMUNICATION_PLC_MODBUS,\r\n    COMMUNICATION_PLC_SIEMENS, COMMUNICATION_VNC, COMMUNICATION_VNC_INITIAL_DATA,\r\n    COMMUNICATION_SOCKET_CLIENT, TimeDelayWriteWordBitAdjust,\r\n    PLC_WordStartElement, PLC_LengthOfWordElement,\r\n    PLC_WordStartBitDisplay, PLC_LengthOfWordBitDisplay,\r\n    PLC_WordStartBitAdjust, PLC_LengthOfWordBitAdjust,\r\n\r\n    PLC_BitStartBitDisplay, PLC_LengthOfBitBitDisplay,\r\n    PLC_BitStartBitAdjust, PLC_LengthOfBitBitAdjust,\r\n\r\n    PLC_WordStartWordDisplay, PLC_LengthOfWordWordDisplay,\r\n    PLC_WordStartWordAdjust, PLC_LengthOfWordWordAdjust,\r\n    PLC_WordStartDWordDisplay, PLC_LengthOfWordDWordDisplay,\r\n    PLC_WordStartDWordAdjust, PLC_LengthOfWordDWordAdjust,\r\n    PLC_Length_ReadWrite,\r\n\r\n    PLC_WriteUnSafe, PLC_IntervalWriteData,\r\n    PLC_WordStartRotate, PLC_LengthOfWordRotate,\r\n    PLC_WordStartComPC, PLC_LengthOfWordComPC,\r\n    PLC_Enable_String, PLC_WordStartString, PLC_LengthOfWordString, PLC_NumberWordInString,\r\n    RefreshData\r\n}","import { Controller, Get } from '@nestjs/common';\r\nimport { SocketGateway } from './socket_io/socket_io.gateway';\r\nimport { ScadaWordDisplayRefreshService } from './scada_word-display/scada_word-display-refresh.service';\r\nimport { ScadaElementRefreshService } from './scada_element/scada_element-refresh.service';\r\nimport { ScadaBitAdjustRefreshService } from './scada_bit-adjust/scada_bit-adjust-refresh.service';\r\nimport { ScadaBitDisplayRefreshService } from './scada_bit-display/scada_bit-display-refresh.service';\r\nimport { ScadaDWordDisplayRefreshService } from './scada_dword-display/scada_dword-display-refresh.service';\r\nimport { ScadaDWordAdjustRefreshService } from './scada_dword-adjust/scada_dword-adjust-refresh.service';\r\nimport { ScadaStringRefreshService } from './scada_string/scada_string-refresh.service';\r\nimport { ScadaTextFieldRefreshService } from './scada_text-field/scada_text-field-refresh.service';\r\nimport { ScadaWordAdjustRefreshService } from './scada_word-adjust/scada_word-adjust-refresh.service';\r\nimport { ScadaSetupAlarmRefreshService } from './scada_setup-alarm/scada_setup-alarm-refresh.service';\r\nconst Variable = require('../Variable');\r\nconst VariableSystem = require('../VariableSystem');\r\nconst LS_Admin = require('../LS_Admin.js');\r\n@Controller()\r\nexport class AppController {\r\n  constructor(\r\n    private readonly socketGateway: SocketGateway,\r\n    private readonly scadaWordDisplayRefreshService: ScadaWordDisplayRefreshService,\r\n    private readonly scadaWordAdjustRefreshService: ScadaWordAdjustRefreshService,\r\n    private readonly scadaDWordDisplayRefreshService: ScadaDWordDisplayRefreshService,\r\n    private readonly scadaElementRefreshService: ScadaElementRefreshService,\r\n    private readonly scadaBitAdjustRefreshService: ScadaBitAdjustRefreshService,\r\n    private readonly scadaBitDisplayRefreshService: ScadaBitDisplayRefreshService,\r\n    private readonly scadaDWordAdjustRefreshService: ScadaDWordAdjustRefreshService,\r\n    private readonly scadaStringRefreshService: ScadaStringRefreshService,\r\n    private readonly scadaTextFieldRefreshService: ScadaTextFieldRefreshService,\r\n    private readonly scadaSetupAlarmRefreshService: ScadaSetupAlarmRefreshService,\r\n  ) {\r\n    setInterval(() => {\r\n      if (Variable && LS_Admin.active == true) {\r\n        for (let i = 0; i < Variable.Element.length; i++) {\r\n          if (JSON.stringify(Variable.Element[i]) !== JSON.stringify(Variable.OldElement[i])) {\r\n            Variable.OldElement[i] = Variable.Element[i].slice();\r\n            Variable.haveChangeArrElement[i] = true;\r\n            this.scadaElementRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.BitAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.BitAdjust[i]) !== JSON.stringify(Variable.OldBitAdjust[i])) {\r\n            Variable.OldBitAdjust[i] = Variable.BitAdjust[i].slice();\r\n            Variable.haveChangeArrBitAdjust[i] = true;\r\n            this.scadaBitAdjustRefreshService.refreshData()\r\n\r\n            Variable.haveChangeArrBitAdjust_SetupAlarm[i] = true\r\n            this.scadaSetupAlarmRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.BitDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.BitDisplay[i]) !== JSON.stringify(Variable.OldBitDisplay[i])) {\r\n            Variable.OldBitDisplay[i] = Variable.BitDisplay[i].slice();\r\n            Variable.haveChangeArrBitDisplay[i] = true;\r\n            this.scadaBitDisplayRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.WordDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.WordDisplay[i]) !== JSON.stringify(Variable.OldWordDisplay[i])) {\r\n            Variable.OldWordDisplay[i] = Variable.WordDisplay[i].slice();\r\n            Variable.haveChangeArrWordDisplay[i] = true;\r\n            this.scadaWordDisplayRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.WordAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.WordAdjust[i]) !== JSON.stringify(Variable.OldWordAdjust[i])) {\r\n            Variable.OldWordAdjust[i] = Variable.WordAdjust[i].slice();\r\n            Variable.haveChangeArrWordAdjust[i] = true;\r\n            this.scadaWordAdjustRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.DWordDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.DWordDisplay[i]) !== JSON.stringify(Variable.OldDWordDisplay[i])) {\r\n            Variable.OldDWordDisplay[i] = Variable.DWordDisplay[i].slice();\r\n            Variable.haveChangeArrDWordDisplay[i] = true;\r\n            this.scadaDWordDisplayRefreshService.refreshData()\r\n          }\r\n        }\r\n        for (let i = 0; i < Variable.DWordAdjust.length; i++) {\r\n          if (JSON.stringify(Variable.DWordAdjust[i]) !== JSON.stringify(Variable.OldDWordAdjust[i])) {\r\n            Variable.OldDWordAdjust[i] = Variable.DWordAdjust[i].slice();\r\n            Variable.haveChangeArrDWordAdjust[i] = true;\r\n            this.scadaDWordAdjustRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        // if (JSON.stringify(Variable.logServer) !== JSON.stringify(Variable.oldLogServer)) {\r\n        //   Variable.oldLogServer = Variable.logServer.slice();\r\n        //   VariableSystem.IO.sockets.emit('LogServer', Variable.logServer);\r\n        // }\r\n\r\n        for (let i = 0; i < Variable.ListString.length; i++) {\r\n          if (JSON.stringify(Variable.ListString[i]) !== JSON.stringify(Variable.OldListString[i])) {\r\n            Variable.OldListString[i] = Variable.ListString[i].slice();\r\n            Variable.haveChangeArrString[i] = true;\r\n            this.scadaStringRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.RealDisplay.length; i++) {\r\n          if (JSON.stringify(Variable.RealDisplay[i]) !== JSON.stringify(Variable.OldRealDisplay[i])) {\r\n            Variable.OldRealDisplay[i] = Variable.RealDisplay[i].slice();\r\n            Variable.haveChangeArrRealDisplay[i] = true;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < Variable.TextField.length; i++) {\r\n          if (JSON.stringify(Variable.TextField[i]) !== JSON.stringify(Variable.OldTextField[i])) {\r\n            Variable.OldTextField[i] = Variable.TextField[i].slice();\r\n            Variable.haveChangeArrTextField[i] = true;\r\n            this.scadaTextFieldRefreshService.refreshData()\r\n          }\r\n        }\r\n\r\n        if (JSON.stringify(VariableSystem.PositionMobileRobot) !== JSON.stringify(VariableSystem.OldPositionMobileRobot)) {\r\n          VariableSystem.OldPositionMobileRobot = VariableSystem.PositionMobileRobot.slice();\r\n          if (this.socketGateway && this.socketGateway.server) {\r\n            this.socketGateway.server.emit('PositionMobile', VariableSystem.PositionMobileRobot);\r\n          }\r\n        }\r\n      }\r\n    }, 100);\r\n\r\n    setInterval(() => {\r\n      if (this.socketGateway && this.socketGateway.server) {\r\n        this.socketGateway.server.emit('PLC_Connect_Status', Variable.Plc_Connect_Status);\r\n      }\r\n      if (Variable.turnOff == 1) {\r\n        process.exit(0)\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n}\r\n","import { Module, OnModuleInit } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { PostModule } from './post/post.module';\r\nimport { UserModule } from './user/user.module';\r\nimport { NoteModule } from './note/note.module';\r\n// import { ConfigModule } from '@nestjs/config'\r\nimport { SocketGateway } from './socket_io/socket_io.gateway';\r\nimport { SocketIoModule } from './socket_io/socket_io.module';\r\nimport { SystemApiModule } from './system_api/system_api.module';\r\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\r\n\r\nimport { ScadaLabelModule } from './scada_label/scada_label.module';\r\nimport { ScadaUserModule } from './scada_user/scada_user.module';\r\nimport { ScadaPanelModule } from './scada_panel/scada_panel.module';\r\nimport { Scada3DModule } from './scada_3D/scada_3D.module';\r\nimport { ScadaBitAdjustModule } from './scada_bit-adjust/scada_bit-adjust.module';\r\nimport { ScadaWordAdjustModule } from './scada_word-adjust/scada_word-adjust.module';\r\nimport { ScadaDWordAdjustModule } from './scada_dword-adjust/scada_dword-adjust.module';\r\nimport { ScadaBitDisplayModule } from './scada_bit-display/scada_bit-display.module';\r\nimport { ScadaWordDisplayModule } from './scada_word-display/scada_word-display.module';\r\nimport { ScadaDWordDisplayModule } from './scada_dword-display/scada_dword-display.module';\r\nimport { ScadaBitDisplayImageLibraryModule } from './scada_bit-display-image-library/scada_bit-display-image-library.module';\r\nimport { ScadaBitAdjustImageLibraryModule } from './scada_bit-adjust-image-library/scada_bit-adjust-image-library.module';\r\nimport { ScadaElementImageLibraryModule } from './scada_element-image-library/scada_element-image-library.module';\r\nimport { ScadaIconImageLibraryModule } from './scada_icon-image-library/scada_icon-image-library.module';\r\nimport { ScadaBackgroundImageLibraryModule } from './scada_background-image-library/scada_background-image-library.module';\r\nimport { ScadaMapImageLibraryModule } from './scada_map-image-library/scada_map-image-library.module';\r\nimport { ScadaMapModule } from './scada_map/scada_map.module';\r\nimport { ScadaStringModule } from './scada_string/scada_string.module';\r\nimport { ScadaTextFieldModule } from './scada_text-field/scada_text-field.module';\r\nimport { ScadaLineModule } from './scada_line/scada_line.module';\r\nimport { ScadaElementModule } from './scada_element/scada_element.module';\r\nimport { ScadaMemonicModule } from './scada_memonic/scada_memonic.module';\r\nimport { ScadaSetupAlarmModule } from './scada_setup-alarm/scada_setup-alarm.module';\r\n\r\nimport { ScadaWordDisplayRefreshService } from './scada_word-display/scada_word-display-refresh.service';\r\nimport { ScadaElementRefreshService } from './scada_element/scada_element-refresh.service';\r\nimport { ScadaBitAdjustRefreshService } from './scada_bit-adjust/scada_bit-adjust-refresh.service';\r\nimport { ScadaBitDisplayRefreshService } from './scada_bit-display/scada_bit-display-refresh.service';\r\nimport { ScadaDWordDisplayRefreshService } from './scada_dword-display/scada_dword-display-refresh.service';\r\nimport { ScadaDWordAdjustRefreshService } from './scada_dword-adjust/scada_dword-adjust-refresh.service';\r\nimport { ScadaStringRefreshService } from './scada_string/scada_string-refresh.service';\r\nimport { ScadaTextFieldRefreshService } from './scada_text-field/scada_text-field-refresh.service';\r\nimport { ConfigService } from './config/config.service';\r\nimport { MicroserviceClientModule } from './microservice-client/microservice-client.module';\r\nimport { MqttModule } from './mqtt/mqtt.module';\r\nimport { ConfigModule } from './config/config.module';\r\n\r\nimport { typeOrmConfigAsync } from './database/typeorm.config';\r\nimport { ScadaWordAdjustRefreshService } from './scada_word-adjust/scada_word-adjust-refresh.service';\r\nimport { ScadaSetupAlarmRefreshService } from './scada_setup-alarm/scada_setup-alarm-refresh.service';\r\n@Module({\r\n  imports: [\r\n    // ConfigModule.forRoot({ isGlobal: true }),\r\n    PostModule,\r\n    // UserModule,\r\n    NoteModule,\r\n    SocketIoModule,\r\n    SystemApiModule,\r\n    ConfigModule,\r\n\r\n    TypeOrmModule.forRootAsync(typeOrmConfigAsync),\r\n\r\n    ScadaLabelModule,\r\n\r\n    ScadaUserModule,\r\n\r\n    ScadaPanelModule,\r\n    Scada3DModule,\r\n    ScadaBitAdjustModule,\r\n    ScadaWordAdjustModule,\r\n    ScadaDWordAdjustModule,\r\n\r\n    ScadaBitDisplayModule,\r\n    ScadaWordDisplayModule,\r\n    ScadaDWordDisplayModule,\r\n\r\n    ScadaBitDisplayImageLibraryModule,\r\n    ScadaBitAdjustImageLibraryModule,\r\n    ScadaIconImageLibraryModule,\r\n    ScadaBackgroundImageLibraryModule,\r\n    ScadaMapImageLibraryModule,\r\n    ScadaMapModule,\r\n    ScadaStringModule,\r\n    ScadaTextFieldModule,\r\n    ScadaLineModule,\r\n    ScadaElementImageLibraryModule,\r\n    ScadaElementModule,\r\n    ScadaMemonicModule,\r\n    SocketIoModule,\r\n    MicroserviceClientModule,\r\n    MqttModule,\r\n    ScadaSetupAlarmModule\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [\r\n    // ConfigService,\r\n    ScadaWordDisplayRefreshService,\r\n    ScadaWordAdjustRefreshService,\r\n    ScadaElementRefreshService,\r\n    ScadaBitAdjustRefreshService,\r\n    ScadaBitDisplayRefreshService,\r\n    ScadaDWordDisplayRefreshService,\r\n    ScadaDWordAdjustRefreshService,\r\n    ScadaStringRefreshService,\r\n    ScadaTextFieldRefreshService,\r\n    ScadaSetupAlarmRefreshService,\r\n  ],\r\n})\r\nexport class AppModule {\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ConfigService } from './config.service';\r\n\r\n@Module({\r\n    providers: [ConfigService],\r\n    exports: [ConfigService]\r\n})\r\nexport class ConfigModule {\r\n\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport * as dotenv from 'dotenv';\r\nimport * as fs from 'fs';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    private readonly envConfig: Record<string, string>;\r\n\r\n    constructor() {\r\n        const isDevelopmentEnv = process.env.NODE_ENV !== 'production';\r\n\r\n        if (isDevelopmentEnv) {\r\n            const envFilePath = __dirname + '/../../.env';\r\n            const existsPath = fs.existsSync(envFilePath);\r\n\r\n            if (!existsPath) {\r\n                console.log('.env file does not exist');\r\n                process.exit(0);\r\n            }\r\n\r\n            this.envConfig = dotenv.parse(fs.readFileSync(envFilePath));\r\n        } else {\r\n            const envFilePath = __dirname + '/../.env';\r\n            const existsPath = fs.existsSync(envFilePath);\r\n\r\n            if (!existsPath) {\r\n                console.log('.env file does not exist');\r\n                process.exit(0);\r\n            }\r\n\r\n            this.envConfig = dotenv.parse(fs.readFileSync(envFilePath));\r\n        };\r\n    }\r\n\r\n    get(key: string): string {\r\n        return this.envConfig[key];\r\n    }\r\n}\r\n","import { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\r\nimport { ConfigModule } from \"../config/config.module\";\r\nimport { ConfigService } from \"../config/config.service\"; // Update with the correct path\r\n\r\nimport { BackgroundImageLibraryEntity } from \"../scada_background-image-library/scada_background-image-library.entity\";\r\nimport { BitAdjustImageLibraryEntity } from \"../scada_bit-adjust-image-library/scada_bit-adjust-image-library.entity\";\r\nimport { BitAdjustEntity } from \"../scada_bit-adjust/scada_bit-adjust.entity\";\r\nimport { BitDisplayImageLibraryEntity } from \"../scada_bit-display-image-library/scada_bit-display-image-library.entity\";\r\nimport { BitDisplayEntity } from \"../scada_bit-display/scada_bit-display.entity\";\r\nimport { DWordAdjustEntity } from \"../scada_dword-adjust/scada_dword-adjust.entity\";\r\nimport { DWordDisplayEntity } from \"../scada_dword-display/scada_dword-display.entity\";\r\nimport { ElementImageLibraryEntity } from \"../scada_element-image-library/scada_element-image-library.entity\";\r\nimport { ElementEntity } from \"../scada_element/scada_element.entity\";\r\nimport { IconImageLibraryEntity } from \"../scada_icon-image-library/scada_icon-image-library.entity\";\r\nimport { LabelEntity } from \"../scada_label/scada_label.entity\";\r\nimport { LineEntity } from \"../scada_line/scada_line.entity\";\r\nimport { MapImageLibraryEntity } from \"../scada_map-image-library/scada_map-image-library.entity\";\r\nimport { MapEntity } from \"../scada_map/scada_map.entity\";\r\nimport { MemonicEntity } from \"../scada_memonic/scada_memonic.entity\";\r\nimport { PanelEntity } from \"../scada_panel/scada_panel.entity\";\r\nimport { _3DEntity } from \"../scada_3D/scada_3D.entity\";\r\nimport { StringEntity } from \"../scada_string/scada_string.entity\";\r\nimport { TextFieldEntity } from \"../scada_text-field/scada_text-field.entity\";\r\nimport { UserEntity } from \"../scada_user/scada_user.entity\";\r\nimport { WordAdjustEntity } from \"../scada_word-adjust/scada_word-adjust.entity\";\r\nimport { WordDisplayEntity } from \"../scada_word-display/scada_word-display.entity\";\r\nimport { SetupAlarmEntity } from \"../scada_setup-alarm/scada_setup-alarm.entity\";\r\n\r\n\r\n\r\nexport const typeOrmConfigAsync = {\r\n    imports: [ConfigModule],\r\n    inject: [ConfigService],\r\n    useFactory: async (configService: ConfigService): Promise<TypeOrmModuleOptions> => {\r\n        const database = configService.get('dbPath'); // Update with your database path config key\r\n        // const entity_dirname = configService.get('entity_dirname'); // Update with your database port config key\r\n\r\n        return {\r\n            type: 'sqlite',\r\n            database,\r\n            entities: [\r\n                BackgroundImageLibraryEntity,\r\n                UserEntity,\r\n                BitAdjustEntity,\r\n                BitAdjustImageLibraryEntity,\r\n                BitDisplayEntity,\r\n                BitDisplayImageLibraryEntity,\r\n                DWordAdjustEntity,\r\n                DWordDisplayEntity,\r\n                ElementEntity,\r\n                ElementImageLibraryEntity,\r\n                IconImageLibraryEntity,\r\n                LabelEntity,\r\n                LineEntity,\r\n                MapEntity,\r\n                MapImageLibraryEntity,\r\n                MemonicEntity,\r\n                PanelEntity,\r\n                _3DEntity,\r\n                StringEntity,\r\n                TextFieldEntity,\r\n                WordAdjustEntity,\r\n                WordDisplayEntity,\r\n                SetupAlarmEntity\r\n            ],\r\n            synchronize: true, // Set to false in production\r\n        };\r\n    },\r\n}","// app.controller.ts\r\nimport { Controller, Get } from '@nestjs/common';\r\nimport { MicroserviceClientService } from './microservice-client.service';\r\n\r\n@Controller()\r\nexport class MicroserviceClientController {\r\n    constructor(private readonly microserviceClientService: MicroserviceClientService) { }\r\n\r\n    @Get()\r\n    async sendMessage(): Promise<string> {\r\n        const response = await this.microserviceClientService.sendMessage('Hello from client!');\r\n        return response;\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MicroserviceClientService } from './microservice-client.service';\nimport { MicroserviceClientController } from './microservice-client.controller';\n\r\n@Module({\n  providers: [MicroserviceClientService],\n  controllers: [MicroserviceClientController]\n})\r\nexport class MicroserviceClientModule {}\r\n","// microservice-client.service.ts\r\nimport { Injectable } from '@nestjs/common';\r\nimport { ClientProxyFactory, Transport, ClientProxy } from '@nestjs/microservices';\r\n\r\n@Injectable()\r\nexport class MicroserviceClientService {\r\n    private client: ClientProxy;\r\n\r\n    constructor() {\r\n        this.client = ClientProxyFactory.create({\r\n            transport: Transport.MQTT,\r\n            options: {\r\n                host: 'localhost',\r\n                port: 1883, // Change this to the port your server microservice is running on\r\n            },\r\n        });\r\n    }\r\n\r\n    // Add methods to interact with the server microservice\r\n    async sendMessage(message: string): Promise<string> {\r\n        return this.client.send<string>('message', message).toPromise();\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MqttService } from './mqtt.service';\r\nimport { ConfigService } from '../config/config.service';\r\n\r\n@Module({\r\n  providers: [MqttService, ConfigService],\r\n  exports: [MqttService]\r\n})\r\nexport class MqttModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { connect } from \"mqtt\";\r\nimport { ConfigService } from '../config/config.service';\r\n@Injectable()\r\nexport class MqttService implements OnModuleInit {\r\n    constructor(\r\n        private readonly configService: ConfigService,\r\n    ) { }\r\n    private mqttClient;\r\n    onModuleInit() {\r\n        const host = this.configService.get('host');\r\n        const port = this.configService.get('port');\r\n        const clientId = `mqtt_${Math.random().toString(16).slice(3)}`;\r\n\r\n        const connectUrl = `mqtt://${host}:${port}`;\r\n        const topic = \"/nodejs/mqtt/sp\";\r\n\r\n        this.mqttClient = connect(connectUrl, {\r\n            clientId,\r\n            clean: true,\r\n            connectTimeout: 4000,\r\n            reconnectPeriod: 1000,\r\n        });\r\n\r\n        this.mqttClient.on(\"connect\", function () {\r\n            console.log(\"Connected to CloudMQTT\");\r\n        });\r\n\r\n        this.mqttClient.on(\"error\", function () {\r\n            // console.log(\"Error in connecting to CloudMQTT\");\r\n        });\r\n    }\r\n    publish(topic: string, payload: string): string {\r\n        this.mqttClient.publish(topic, payload);\r\n        return `Publishing to ${topic}`;\r\n    }\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class NoteModule {}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class PostModule {}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { Scada3DService } from './scada_3D.service';\r\n\r\n@Controller('3D')\r\nexport class Scada3DController {\r\n    constructor(\r\n        private readonly scada3DService: Scada3DService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scada3DService.getData();\r\n    }\r\n\r\n    @Post('/insert_3D')\r\n    insert3D(@Body() requestBody) {\r\n        return this.scada3DService.insert3D(requestBody);\r\n    }\r\n\r\n    @Put('/update_3D')\r\n    update3D(@Body() requestBody) {\r\n        return this.scada3DService.update3D(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_3D')\r\n    delete3D(@Body() requestBody) {\r\n        return this.scada3DService.delete3D(requestBody);\r\n    }\r\n\r\n}\r\n","// src/3D/3D.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('3D')\r\nexport class _3DEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { Scada3DService } from './scada_3D.service';\nimport { Scada3DController } from './scada_3D.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { _3DEntity } from './scada_3D.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([_3DEntity]), SocketIoModule],\n  providers: [Scada3DService,],\n  controllers: [Scada3DController]\n})\nexport class Scada3DModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { _3DEntity } from './scada_3D.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class Scada3DService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(_3DEntity)\r\n        private readonly _3DRepository: Repository<_3DEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshData3D) {\r\n                Variable.refreshData3D = false;\r\n                // console.log('===============================refresh 3D========================================');\r\n                try {\r\n                    Variable.result3D = await this._3DRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('Update3D', Variable.result3D);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.result3D\r\n    }\r\n\r\n    async insert3D(_3DData: any): Promise<any> {\r\n        try {\r\n            _3DData._id = 'a' + Math.random().toString(36)\r\n            const new3D = this._3DRepository.create(_3DData);\r\n            await this._3DRepository.save(new3D);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Add 3D Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update3D(updateData: any): Promise<any> {\r\n        try {\r\n            await this._3DRepository.update(updateData._id, updateData);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Update 3D Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete3D(_3DId: string): Promise<any> {\r\n        try {\r\n            await this._3DRepository.delete(_3DId);\r\n            Variable.refreshData3D = true\r\n            return { result: 'success', message: 'Delete 3D Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body, Query } from '@nestjs/common';\r\nimport { ScadaBackgroundImageLibraryService } from './scada_background-image-library.service';\r\n\r\n@Controller('uploadImageImageBackground')\r\nexport class ScadaBackgroundImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBackgroundImageLibraryService: ScadaBackgroundImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBackgroundImageLibraryService.getData();\r\n    }\r\n\r\n    @Get('/getdata_query')\r\n    getDataQuery(@Query('screenName') screenName: string) {\r\n        return this.scadaBackgroundImageLibraryService.getDataQuery(screenName);\r\n    }\r\n    user\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBackgroundImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaBackgroundImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBackgroundImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ImageBackgroundImageLibrary')\r\nexport class BackgroundImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    height: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BackgroundImageLibraryEntity } from './scada_background-image-library.entity';\r\nimport { ScadaBackgroundImageLibraryController } from './scada_background-image-library.controller';\r\nimport { ScadaBackgroundImageLibraryService } from './scada_background-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BackgroundImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBackgroundImageLibraryController],\r\n    providers: [ScadaBackgroundImageLibraryService]\r\n})\r\nexport class ScadaBackgroundImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BackgroundImageLibraryEntity } from './scada_background-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBackgroundImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BackgroundImageLibraryEntity)\r\n        private readonly BackgroundImageLibraryRepository: Repository<BackgroundImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BACKGROUND IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataImageBackgroundImageLibrary) {\r\n                Variable.refreshDataImageBackgroundImageLibrary = false;\r\n                // console.log('===============================refresh background image library========================================');\r\n                try {\r\n                    Variable.resultImageBackgroundImageLibrary = await this.BackgroundImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateImageBackgroundImageLibrary', Variable.resultImageBackgroundImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultImageBackgroundImageLibrary\r\n    }\r\n\r\n    async getDataQuery(screenName): Promise<any> {\r\n        let user = await this.BackgroundImageLibraryRepository.query(\"SELECT * FROM ImageBackgroundImageLibrary WHERE name=\" + '\"' + screenName + '\"');\r\n        // let user = await this.BackgroundImageLibraryRepository.createQueryBuilder('ImageBackgroundImageLibrary')\r\n        //     .where('name = :screenName', { screenName })\r\n        //     .getOne();\r\n\r\n        return user;\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data,\r\n                enable: data.enable,\r\n                width: data.width,\r\n                height: data.height\r\n            }\r\n\r\n            const newBackgroundImageLibrary = this.BackgroundImageLibraryRepository.create(temp);\r\n            await this.BackgroundImageLibraryRepository.save(newBackgroundImageLibrary);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Add Background Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.BackgroundImageLibraryRepository.delete(id);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Delete Background Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.BackgroundImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataImageBackgroundImageLibrary = true\r\n            return { result: 'success', message: 'Update Background Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitAdjustImageLibraryService } from './scada_bit-adjust-image-library.service';\r\n\r\n@Controller('uploadImageBitAdjust')\r\nexport class ScadaBitAdjustImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBitAdjustImageLibraryService: ScadaBitAdjustImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitAdjustImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBitAdjustImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBitAdjustImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitAdjustImageLibrary')\r\nexport class BitAdjustImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitAdjustImageLibraryEntity } from './scada_bit-adjust-image-library.entity';\r\nimport { ScadaBitAdjustImageLibraryController } from './scada_bit-adjust-image-library.controller';\r\nimport { ScadaBitAdjustImageLibraryService } from './scada_bit-adjust-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BitAdjustImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBitAdjustImageLibraryController],\r\n    providers: [ScadaBitAdjustImageLibraryService]\r\n})\r\nexport class ScadaBitAdjustImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BitAdjustImageLibraryEntity } from './scada_bit-adjust-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitAdjustImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<BitAdjustImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITADJUST IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitAdjustImageLibrary) {\r\n                Variable.refreshDataBitAdjustImageLibrary = false;\r\n                // console.log('===============================refresh bitAdjsut image library========================================');\r\n                try {\r\n                    Variable.resultBitAdjustImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitAdjustImageLibrary', Variable.resultBitAdjustImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitAdjustImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newBitAdjustImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newBitAdjustImageLibrary);\r\n            Variable.refreshDataBitAdjustImageLibrary = true\r\n            return { result: 'success', message: 'Add BitAdjust Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataBitAdjustImageLibrary = true\r\n            return { result: 'success', message: 'Delete BitAdjust Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitAdjust)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitAdjust.length; i++) {\r\n                    if (Variable.haveChangeArrBitAdjust[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitAdjust[i] = false;\r\n                        if (Array.isArray(Variable.resultBitAdjust)) {\r\n                            for (let j = 0; j < Variable.resultBitAdjust.length; j++) {\r\n                                if (Variable.resultBitAdjust[j].idDevice === '0' && i == 0) {\r\n                                    if (Array.isArray(Variable.BitAdjust[0]) && Variable.BitAdjust[0]) {\r\n                                        if (Variable.resultBitAdjust[j].tag <= Variable.BitAdjust[0].length) { Variable.resultBitAdjust[j].status = Variable.BitAdjust[0][Variable.resultBitAdjust[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (parseInt(Variable.resultBitAdjust[j].idDevice) && i > 0 && Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)]) {\r\n                                        if (Variable.resultBitAdjust[j].tag <= Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)].length) { Variable.resultBitAdjust[j].status = Variable.BitAdjust[parseInt(Variable.resultBitAdjust[j].idDevice)][Variable.resultBitAdjust[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateBitAdjust', Variable.resultBitAdjust)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_BitAdjust)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_BitAdjust.length; j++) {\r\n                                if (Variable.resultProjectScreen_BitAdjust[j].idDevice === '0' && i == 0) {\r\n                                    if (Array.isArray(Variable.BitAdjust[0]) && Variable.BitAdjust[0]) {\r\n                                        if (Variable.resultProjectScreen_BitAdjust[j].tag <= Variable.BitAdjust[0].length) { Variable.resultProjectScreen_BitAdjust[j].status = Variable.BitAdjust[0][Variable.resultProjectScreen_BitAdjust[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice) && i > 0 && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)]) {\r\n                                        if (Variable.resultProjectScreen_BitAdjust[j].tag <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)].length) { Variable.resultProjectScreen_BitAdjust[j].status = Variable.BitAdjust[parseInt(Variable.resultProjectScreen_BitAdjust[j].idDevice)][Variable.resultProjectScreen_BitAdjust[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_BitAdjust', Variable.resultProjectScreen_BitAdjust)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element Screen In BitAdjust Have Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2 //STOP \r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOff)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOn)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagFault]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 3\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element In BitAdjust Have tag ON OFF\r\n                        if (Array.isArray(Variable.resultElement)) {\r\n                            for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                                if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOff)\r\n\r\n                                    ) {\r\n                                        Variable.resultElement[j].status = 2 //STOP \r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultElement[j].notOff)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                                                    Variable.resultElement[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                                                    Variable.resultElement[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultElement[j].notOn)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                                                    Variable.resultElement[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                                                    Variable.resultElement[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault]) {\r\n                                                Variable.resultElement[j].status = 3\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Screen Element in BitAdjust No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element in BitAdjust No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultElement)) {\r\n                            for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                                if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultElement[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultElement[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                                                Variable.resultElement[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!Variable.resultElement[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                                                Variable.resultElement[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                            }\r\n                        }\r\n\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'BitAdjust') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultLine[j].tag) <= Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) {\r\n                                                Variable.resultLine[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultLine[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line Screen\r\n                        if (Array.isArray(Variable.resultProjectScreen_Line)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Line.length; j++) {\r\n                                if (Variable.resultProjectScreen_Line[j].typeTag == 'BitAdjust') {\r\n                                    if (!isNaN(Variable.resultProjectScreen_Line[j].idDevice) && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Line[j].tag) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Line[j].idDevice)][Variable.resultProjectScreen_Line[j].tag]) {\r\n                                                Variable.resultProjectScreen_Line[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultProjectScreen_Line[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Line', Variable.resultProjectScreen_Line)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitAdjustService } from './scada_bit-adjust.service';\r\n\r\n@Controller('bitAdjust')\r\nexport class ScadaBitAdjustController {\r\n    constructor(\r\n        private readonly scadaBitAdjustService: ScadaBitAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_bitAdjust')\r\n    insertBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.insertBitAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_bitAdjust')\r\n    updateBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.updateBitAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_bitAdjust')\r\n    deleteBitAdjust(@Body() requestBody) {\r\n        return this.scadaBitAdjustService.deleteBitAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-adjust.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitAdjust')\r\nexport class BitAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    myKeyPress: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderWidthOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaBitAdjustController } from './scada_bit-adjust.controller';\r\nimport { ScadaBitAdjustService } from './scada_bit-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitAdjustEntity } from './scada_bit-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([BitAdjustEntity]), SocketIoModule\r\n  ],\r\n  controllers: [ScadaBitAdjustController],\r\n  providers: [ScadaBitAdjustService]\r\n})\r\nexport class ScadaBitAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BitAdjustEntity } from './scada_bit-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitAdjustEntity)\r\n        private readonly bitAdjustRepository: Repository<BitAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BIT ADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitAdjust) {\r\n                Variable.refreshDataBitAdjust = false;\r\n                // console.log('===============================refresh bitAdjust========================================');\r\n                try {\r\n                    Variable.resultBitAdjust = await this.bitAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitAdjust', Variable.resultBitAdjust);\r\n                    }\r\n                    Variable.OldBitAdjust = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitAdjust;\r\n    }\r\n\r\n    async insertBitAdjust(bitAdjustData: any): Promise<any> {\r\n        try {\r\n            bitAdjustData._id = 'a' + Math.random().toString(36)\r\n            bitAdjustData.status = 0\r\n            const newBitAdjust = this.bitAdjustRepository.create(bitAdjustData);\r\n            await this.bitAdjustRepository.save(newBitAdjust);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Add BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateBitAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Update BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteBitAdjust(bitAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.bitAdjustRepository.delete(bitAdjustId);\r\n            Variable.refreshDataBitAdjust = true\r\n            return { result: 'success', message: 'Delete BitAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitDisplayImageLibraryService } from './scada_bit-display-image-library.service';\r\n\r\n@Controller('uploadImage')\r\nexport class ScadaBitDisplayImageLibraryController {\r\n    constructor(\r\n        private readonly scadaBitDisplayImageLibraryService: ScadaBitDisplayImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitDisplayImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaBitDisplayImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaBitDisplayImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitDisplayImageLibrary')\r\nexport class BitDisplayImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { BitDisplayImageLibraryEntity } from './scada_bit-display-image-library.entity';\r\nimport { ScadaBitDisplayImageLibraryController } from './scada_bit-display-image-library.controller';\r\nimport { ScadaBitDisplayImageLibraryService } from './scada_bit-display-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([BitDisplayImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaBitDisplayImageLibraryController],\r\n    providers: [ScadaBitDisplayImageLibraryService,]\r\n})\r\nexport class ScadaBitDisplayImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { BitDisplayImageLibraryEntity } from './scada_bit-display-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitDisplayImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<BitDisplayImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitDisplayImageLibrary) {\r\n                Variable.refreshDataBitDisplayImageLibrary = false;\r\n                // console.log('===============================refresh bitDisplay image library========================================');\r\n                try {\r\n                    Variable.resultBitDisplayImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitDisplayImageLibrary', Variable.resultBitDisplayImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitDisplayImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newBitDisplayImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newBitDisplayImageLibrary);\r\n            Variable.refreshDataBitDisplayImageLibrary = true\r\n            return { result: 'success', message: 'Add BitDisplay Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataBitDisplayImageLibrary = true\r\n            return { result: 'success', message: 'Delete BitDisplay Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitDisplay)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitDisplay.length; i++) {\r\n                    if (Variable.haveChangeArrBitDisplay[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitDisplay[i] = false;\r\n                        if (Array.isArray(Variable.resultBitDisplay)) {\r\n                            for (let j = 0; j < Variable.resultBitDisplay.length; j++) {\r\n                                if (Variable.resultBitDisplay[j].idDevice === '0' && i == 0) {\r\n                                    if (Array.isArray(Variable.BitDisplay[0]) && Variable.BitDisplay[0]) {\r\n                                        if (Variable.resultBitDisplay[j].tag <= Variable.BitDisplay[0].length) { Variable.resultBitDisplay[j].status = Variable.BitDisplay[0][Variable.resultBitDisplay[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                } else {\r\n                                    if (parseInt(Variable.resultBitDisplay[j].idDevice) && i > 0 && Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                        if (Variable.resultBitDisplay[j].tag <= Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)].length) { Variable.resultBitDisplay[j].status = Variable.BitDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)][Variable.resultBitDisplay[j].tag] }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_BitDisplay)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_BitDisplay.length; j++) {\r\n                                if (Variable.resultProjectScreen_BitDisplay[j].idDevice && Array.isArray(Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_BitDisplay[j].tag <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)].length) { Variable.resultProjectScreen_BitDisplay[j].status = Variable.BitDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)][Variable.resultProjectScreen_BitDisplay[j].tag] }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_BitDisplay', Variable.resultProjectScreen_BitDisplay)\r\n                            }\r\n                        }\r\n\r\n                        //Element Screen in BitDisplay Have Tag ON OFF\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOff)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOff]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultProjectScreen_Element[j].notOn)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagOn]) {\r\n                                                    Variable.resultProjectScreen_Element[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultProjectScreen_Element[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagFault]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 3\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        //Element In BitDisplay Have Tag ON OFF\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultElement)) {\r\n                            for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                                if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.resultElement[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultElement[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagOff && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagOff) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultElement[j].notOff)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                                                    Variable.resultElement[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOff]) {\r\n                                                    Variable.resultElement[j].status = 0\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagOn && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagOn) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultElement[j].notOn)) {\r\n                                                if (!Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                                                    Variable.resultElement[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            } else {\r\n                                                if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagOn]) {\r\n                                                    Variable.resultElement[j].status = 1\r\n                                                    haveChange = true\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (Variable.resultElement[j].tagFault && Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagFault) <= Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagFault]) {\r\n                                                Variable.resultElement[j].status = 3\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Screen Element in BitDisplay No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultProjectScreen_Element)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Element.length; j++) {\r\n                                if (!isNaN(Variable.resultProjectScreen_Element[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && !Variable.resultProjectScreen_Element[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultProjectScreen_Element[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (!Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!Variable.resultProjectScreen_Element[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][parseInt(Variable.resultProjectScreen_Element[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Element[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultProjectScreen_Element[j].idDevice)][Variable.resultProjectScreen_Element[j].tagBit]) {\r\n                                                Variable.resultProjectScreen_Element[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Element', Variable.resultProjectScreen_Element)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check Element in BitDisplay No Tag ON OFF\r\n                        if (Array.isArray(Variable.resultElement)) {\r\n                            for (let j = 0; j < Variable.resultElement.length; j++) {\r\n                                if (!isNaN(Variable.resultElement[j].idDevice)) {\r\n                                    if (\r\n                                        (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOn) ||\r\n                                        (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && !Variable.resultElement[j].tagOff)\r\n                                    ) {\r\n                                        Variable.resultElement[j].status = 2\r\n                                        haveChange = true\r\n                                    }\r\n\r\n                                    if (!Variable.resultElement[j].tagOff && !Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (!Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                                                Variable.resultElement[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!Variable.resultElement[j].tagOn && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][parseInt(Variable.resultElement[j].tagBit)] && Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultElement[j].tagBit) <= Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)].length) {\r\n                                            if (Variable.BitAdjust[parseInt(Variable.resultElement[j].idDevice)][Variable.resultElement[j].tagBit]) {\r\n                                                Variable.resultElement[j].status = 1\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElement', Variable.resultElement)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'BitDisplay') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultLine[j].tag) <= Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) {\r\n                                                Variable.resultLine[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultLine[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine)\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line Screen\r\n                        if (Array.isArray(Variable.resultProjectScreen_Line)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_Line.length; j++) {\r\n                                if (Variable.resultProjectScreen_Line[j].typeTag == 'BitDisplay') {\r\n                                    if (!isNaN(Variable.resultProjectScreen_Line[j].idDevice) && Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultProjectScreen_Line[j].tag) <= Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)].length) {\r\n                                            if (Variable.BitDisplay[parseInt(Variable.resultProjectScreen_Line[j].idDevice)][Variable.resultProjectScreen_Line[j].tag]) {\r\n                                                Variable.resultProjectScreen_Line[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultProjectScreen_Line[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_Line', Variable.resultProjectScreen_Line)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaBitDisplayService } from './scada_bit-display.service';\r\n\r\n@Controller('bitDisplay')\r\nexport class ScadaBitDisplayController {\r\n    constructor(\r\n        private readonly scadaBitDisplayService: ScadaBitDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaBitDisplayService.getData();\r\n    }\r\n\r\n    @Post('/insert_bitDisplay')\r\n    insertBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.insertBitDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_bitDisplay')\r\n    updateBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.updateBitDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_bitDisplay')\r\n    deleteBitDisplay(@Body() requestBody) {\r\n        return this.scadaBitDisplayService.deleteBitDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('BitDisplay')\r\nexport class BitDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text0: string;\r\n\r\n    @Column({ nullable: true })\r\n    text1: string;\r\n\r\n    @Column({ nullable: true })\r\n    color0: string;\r\n\r\n    @Column({ nullable: true })\r\n    color1: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage0: string;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage1: string;\r\n\r\n    @Column({ nullable: true })\r\n    type: string;\r\n\r\n    @Column({ nullable: true })\r\n    blink0: number;\r\n\r\n    @Column({ nullable: true })\r\n    blink1: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagRotate: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaBitDisplayController } from './scada_bit-display.controller';\nimport { ScadaBitDisplayService } from './scada_bit-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { BitDisplayEntity } from './scada_bit-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([BitDisplayEntity]), SocketIoModule],\n  controllers: [ScadaBitDisplayController],\n  providers: [ScadaBitDisplayService,]\n})\nexport class ScadaBitDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { BitDisplayEntity } from './scada_bit-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaBitDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(BitDisplayEntity)\r\n        private readonly bitDisplayRepository: Repository<BitDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized BITDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataBitDisplay) {\r\n                Variable.refreshDataBitDisplay = false;\r\n                // console.log('===============================refresh bitDisplay========================================');\r\n                try {\r\n                    Variable.resultBitDisplay = await this.bitDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay);\r\n                        Variable.OldBitDisplay = []\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultBitDisplay\r\n    }\r\n\r\n    async insertBitDisplay(bitDisplayData: any): Promise<any> {\r\n        try {\r\n            bitDisplayData._id = 'a' + Math.random().toString(36)\r\n            bitDisplayData.status = 0\r\n            const newBitDisplay = this.bitDisplayRepository.create(bitDisplayData);\r\n            await this.bitDisplayRepository.save(newBitDisplay);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Add BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateBitDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Update BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteBitDisplay(bitDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayRepository.delete(bitDisplayId);\r\n            Variable.refreshDataBitDisplay = true\r\n            return { result: 'success', message: 'Delete BitDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrDWordAdjust)) {\r\n            for (let i = 0; i < Variable.haveChangeArrDWordAdjust.length; i++) {\r\n                if (Variable.haveChangeArrDWordAdjust[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrDWordAdjust[i] = false;\r\n                    if (Array.isArray(Variable.resultDWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultDWordAdjust.length; j++) {\r\n                            if (Variable.resultDWordAdjust[j].idDevice === '0' && i == 0) {\r\n                                if (Array.isArray(Variable.DWordAdjust[0]) && Variable.DWordAdjust[0]) {\r\n                                    if (Variable.resultDWordAdjust[j].tag <= Variable.DWordAdjust[0].length) {\r\n                                        if (parseInt(Variable.resultDWordAdjust[j].negative)) {\r\n                                            if (parseInt(Variable.DWordAdjust[0][Variable.resultDWordAdjust[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordAdjust[j].text = parseInt(Variable.DWordAdjust[0][Variable.resultDWordAdjust[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[0][Variable.resultDWordAdjust[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[0][Variable.resultDWordAdjust[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parseInt(Variable.resultDWordAdjust[j].idDevice) && i > 0 && Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)]) {\r\n                                    if (Variable.resultDWordAdjust[j].tag <= Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultDWordAdjust[j].negative)) {\r\n                                            if (parseInt(Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordAdjust[j].text = parseInt(Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultDWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultDWordAdjust[j].idDevice)][Variable.resultDWordAdjust[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateDWordAdjust', Variable.resultDWordAdjust)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_DWordAdjust)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_DWordAdjust.length; j++) {\r\n                            if (Variable.resultProjectScreen_DWordAdjust[j].idDevice && Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_DWordAdjust[j].tag <= Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_DWordAdjust[j].negative)) {\r\n                                        if (parseInt(Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]) > 2147483647) {\r\n                                            Variable.resultProjectScreen_DWordAdjust[j].text = parseInt(Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]) - 4294967296\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_DWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_DWordAdjust[j].text = Variable.DWordAdjust[parseInt(Variable.resultProjectScreen_DWordAdjust[j].idDevice)][Variable.resultProjectScreen_DWordAdjust[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_DWordAdjust', Variable.resultProjectScreen_DWordAdjust)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDWordAdjustService } from './scada_dword-adjust.service';\r\n\r\n@Controller('dwordAdjust')\r\nexport class ScadaDWordAdjustController {\r\n    constructor(\r\n        private readonly scadaDWordAdjustService: ScadaDWordAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDWordAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_dwordAdjust')\r\n    insertDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.insertDWordAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_dwordAdjust')\r\n    updateDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.updateDWordAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_dwordAdjust')\r\n    deleteDWordAdjust(@Body() requestBody) {\r\n        return this.scadaDWordAdjustService.deleteDWordAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DWordAdjust')\r\nexport class DWordAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaDWordAdjustController } from './scada_dword-adjust.controller';\r\nimport { ScadaDWordAdjustService } from './scada_dword-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { DWordAdjustEntity } from './scada_dword-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([DWordAdjustEntity]), SocketIoModule],\r\n  controllers: [ScadaDWordAdjustController],\r\n  providers: [ScadaDWordAdjustService,]\r\n})\r\nexport class ScadaDWordAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DWordAdjustEntity } from './scada_dword-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DWordAdjustEntity)\r\n        private readonly dwordAdjustRepository: Repository<DWordAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized DWORDADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDWordAdjust) {\r\n                Variable.refreshDataDWordAdjust = false;\r\n                // console.log('===============================refresh dwordAdjust========================================');\r\n                try {\r\n                    Variable.resultDWordAdjust = await this.dwordAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDWordAdjust', Variable.resultDWordAdjust);\r\n                    }\r\n                    Variable.OldDWordAdjust = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDWordAdjust\r\n    }\r\n\r\n    async insertDWordAdjust(dwordAdjustData: any): Promise<any> {\r\n        try {\r\n            dwordAdjustData._id = 'a' + Math.random().toString(36)\r\n            dwordAdjustData.text = 0\r\n            const newDWordAdjust = this.dwordAdjustRepository.create(dwordAdjustData);\r\n            await this.dwordAdjustRepository.save(newDWordAdjust);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Add DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDWordAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.dwordAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Update DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDWordAdjust(dwordAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.dwordAdjustRepository.delete(dwordAdjustId);\r\n            Variable.refreshDataDWordAdjust = true\r\n            return { result: 'success', message: 'Delete DWordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrDWordDisplay)) {\r\n            for (let i = 0; i < Variable.haveChangeArrDWordDisplay.length; i++) {\r\n                if (Variable.haveChangeArrDWordDisplay[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrDWordDisplay[i] = false;\r\n                    if (Array.isArray(Variable.resultDWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultDWordDisplay.length; j++) {\r\n                            if (Variable.resultDWordDisplay[j].idDevice === '0' && i == 0) {\r\n                                if (Array.isArray(Variable.DWordDisplay[0]) && Variable.DWordDisplay[0]) {\r\n                                    if (Variable.resultDWordDisplay[j].tag <= Variable.DWordDisplay[0].length) {\r\n                                        if (parseInt(Variable.resultDWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.DWordDisplay[0][Variable.resultDWordDisplay[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordDisplay[j].text = parseInt(Variable.DWordDisplay[0][Variable.resultDWordDisplay[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[0][Variable.resultDWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[0][Variable.resultDWordDisplay[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parseInt(Variable.resultDWordDisplay[j].idDevice) && i > 0 && Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultDWordDisplay[j].tag <= Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultDWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]) > 2147483647) {\r\n                                                Variable.resultDWordDisplay[j].text = parseInt(Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]) - 4294967296\r\n                                            } else {\r\n                                                Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultDWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultDWordDisplay[j].idDevice)][Variable.resultDWordDisplay[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateDWordDisplay', Variable.resultDWordDisplay)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_DWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_DWordDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_DWordDisplay[j].idDevice && Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_DWordDisplay[j].tag <= Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_DWordDisplay[j].negative)) {\r\n                                        if (parseInt(Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]) > 2147483647) {\r\n                                            Variable.resultProjectScreen_DWordDisplay[j].text = parseInt(Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]) - 4294967296\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_DWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_DWordDisplay[j].text = Variable.DWordDisplay[parseInt(Variable.resultProjectScreen_DWordDisplay[j].idDevice)][Variable.resultProjectScreen_DWordDisplay[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_DWordDisplay', Variable.resultProjectScreen_DWordDisplay)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaDWordDisplayService } from './scada_dword-display.service';\r\n\r\n@Controller('dwordDisplay')\r\nexport class ScadaDWordDisplayController {\r\n    constructor(\r\n        private readonly scadaDWordDisplayService: ScadaDWordDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaDWordDisplayService.getData();\r\n    }\r\n\r\n    @Post('/insert_dwordDisplay')\r\n    insertDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.insertDWordDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_dwordDisplay')\r\n    updateDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.updateDWordDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_dwordDisplay')\r\n    deleteDWordDisplay(@Body() requestBody) {\r\n        return this.scadaDWordDisplayService.deleteDWordDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('DWordDisplay')\r\nexport class DWordDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaDWordDisplayController } from './scada_dword-display.controller';\nimport { ScadaDWordDisplayService } from './scada_dword-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DWordDisplayEntity } from './scada_dword-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DWordDisplayEntity]), SocketIoModule],\n  controllers: [ScadaDWordDisplayController],\n  providers: [ScadaDWordDisplayService,]\n})\nexport class ScadaDWordDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DWordDisplayEntity } from './scada_dword-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaDWordDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(DWordDisplayEntity)\r\n        private readonly dwordDisplayRepository: Repository<DWordDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized DWORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataDWordDisplay) {\r\n                Variable.refreshDataDWordDisplay = false;\r\n                // console.log('===============================refresh dwordDisplay========================================');\r\n                try {\r\n                    Variable.resultDWordDisplay = await this.dwordDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateDWordDisplay', Variable.resultDWordDisplay);\r\n                    }\r\n                    Variable.OldDWordDisplay = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultDWordDisplay\r\n    }\r\n\r\n    async insertDWordDisplay(dwordDisplayData: any): Promise<any> {\r\n        try {\r\n            dwordDisplayData._id = 'a' + Math.random().toString(36)\r\n            dwordDisplayData.text = 0\r\n            const newDWordDisplay = this.dwordDisplayRepository.create(dwordDisplayData);\r\n            await this.dwordDisplayRepository.save(newDWordDisplay);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Add DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateDWordDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.dwordDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Update DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteDWordDisplay(dwordDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.dwordDisplayRepository.delete(dwordDisplayId);\r\n            Variable.refreshDataDWordDisplay = true\r\n            return { result: 'success', message: 'Delete DWordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaElementImageLibraryService } from './scada_element-image-library.service';\r\n\r\n@Controller('uploadImageElement')\r\nexport class ScadaElementImageLibraryController {\r\n    constructor(\r\n        private readonly scadaElementImageLibraryService: ScadaElementImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaElementImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaElementImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaElementImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('ElementImageLibrary')\r\nexport class ElementImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ElementImageLibraryEntity } from './scada_element-image-library.entity';\r\nimport { ScadaElementImageLibraryController } from './scada_element-image-library.controller';\r\nimport { ScadaElementImageLibraryService } from './scada_element-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([ElementImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaElementImageLibraryController],\r\n    providers: [ScadaElementImageLibraryService,]\r\n})\r\nexport class ScadaElementImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { ElementImageLibraryEntity } from './scada_element-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ElementImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<ElementImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized ELEMENT IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataElementImageLibrary) {\r\n                Variable.refreshDataElementImageLibrary = false;\r\n                // console.log('===============================refresh element image library========================================');\r\n                try {\r\n                    Variable.resultElementImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateElementImageLibrary', Variable.resultElementImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultElementImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newElementImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newElementImageLibrary);\r\n            Variable.refreshDataElementImageLibrary = true\r\n            return { result: 'success', message: 'Add Element Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataElementImageLibrary = true\r\n            return { result: 'success', message: 'Delete Element Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrElement)) {\r\n                for (let i = 0; i < Variable.haveChangeArrElement.length; i++) {\r\n                    if (Variable.haveChangeArrElement[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrElement[i] = false;\r\n                        for (let j = 0; j < Variable.resultElementWord.length; j++) {\r\n                            if (Variable.resultElementWord[j].idDevice && Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)]) {\r\n                                if (Variable.resultElementWord[j].indexElement <= Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)].length) {\r\n                                    Variable.resultElementWord[j].status = Variable.Element[parseInt(Variable.resultElementWord[j].idDevice)][Variable.resultElementWord[j].indexElement]\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateElementWord', Variable.resultElementWord);\r\n                            }\r\n                        }\r\n\r\n                        haveChange = false\r\n                        //Check in Line\r\n                        if (Array.isArray(Variable.resultLine)) {\r\n                            for (let j = 0; j < Variable.resultLine.length; j++) {\r\n                                if (Variable.resultLine[j].typeTag == 'Element') {\r\n                                    if (!isNaN(Variable.resultLine[j].idDevice) && Variable.Element[parseInt(Variable.resultLine[j].idDevice)]) {\r\n                                        if (parseInt(Variable.resultLine[j].tag) <= Variable.Element[parseInt(Variable.resultLine[j].idDevice)].length) {\r\n                                            //(num>>bit) % 2 != 0\r\n                                            if (parseInt(Variable.Element[parseInt(Variable.resultLine[j].idDevice)][Variable.resultLine[j].tag]) >> 0 % 2 != 0) {\r\n                                                Variable.resultLine[j].status = 1\r\n                                                haveChange = true\r\n                                            } else {\r\n                                                Variable.resultLine[j].status = 0\r\n                                                haveChange = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateLine', Variable.resultLine);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaElementService } from './scada_element.service';\r\n\r\n@Controller('Element')\r\nexport class ScadaElementController {\r\n    constructor(\r\n        private readonly scadaElementService: ScadaElementService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaElementService.getData();\r\n    }\r\n\r\n    @Post('/insert_Element')\r\n    insertElement(@Body() requestBody) {\r\n        return this.scadaElementService.insertElement(requestBody);\r\n    }\r\n\r\n    @Put('/update_Element')\r\n    updateElement(@Body() requestBody) {\r\n        return this.scadaElementService.updateElement(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_Element')\r\n    deleteElement(@Body() requestBody) {\r\n        return this.scadaElementService.deleteElement(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Element')\r\nexport class ElementEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagBit: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    tagFault: string;\r\n\r\n    @Column({ nullable: true })\r\n    notOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    notOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameElement: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    src_R: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_S: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_N: string;\r\n\r\n    @Column({ nullable: true })\r\n    src_F: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaElementController } from './scada_element.controller';\nimport { ScadaElementService } from './scada_element.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ElementEntity } from './scada_element.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ElementEntity]), SocketIoModule],\n  controllers: [ScadaElementController],\n  providers: [ScadaElementService,]\n})\nexport class ScadaElementModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ElementEntity } from './scada_element.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaElementService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(ElementEntity)\r\n        private readonly ElementRepository: Repository<ElementEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized Element');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataElement) {\r\n                Variable.refreshDataElement = false;\r\n                // console.log('===============================refresh Element========================================');\r\n                try {\r\n                    Variable.resultElement = await this.ElementRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateElement', Variable.resultElement);\r\n                    }\r\n                    Variable.OldBitAdjust = []\r\n                    Variable.OldBitDisplay = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultElement\r\n    }\r\n\r\n    async insertElement(ElementData: any): Promise<any> {\r\n        try {\r\n            ElementData._id = 'a' + Math.random().toString(36)\r\n            ElementData.status = 0\r\n            const newElement = this.ElementRepository.create(ElementData);\r\n            await this.ElementRepository.save(newElement);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Add Element Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateElement(updateData: any): Promise<any> {\r\n        try {\r\n            await this.ElementRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Update Element Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteElement(ElementId: string): Promise<any> {\r\n        try {\r\n            await this.ElementRepository.delete(ElementId);\r\n            Variable.refreshDataElement = true\r\n            return { result: 'success', message: 'Delete Element Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaIconImageLibraryService } from './scada_icon-image-library.service';\r\n\r\n@Controller('uploadImageIcon')\r\nexport class ScadaIconImageLibraryController {\r\n    constructor(\r\n        private readonly scadaIconImageLibraryService: ScadaIconImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaIconImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    update(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.update(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaIconImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('IconImageLibrary')\r\nexport class IconImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    enable: number;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    width: number;\r\n\r\n    @Column({ nullable: true, default: 0 })\r\n    height: number;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { IconImageLibraryEntity } from './scada_icon-image-library.entity';\r\nimport { ScadaIconImageLibraryController } from './scada_icon-image-library.controller';\r\nimport { ScadaIconImageLibraryService } from './scada_icon-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([IconImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaIconImageLibraryController],\r\n    providers: [ScadaIconImageLibraryService,]\r\n})\r\nexport class ScadaIconImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { IconImageLibraryEntity } from './scada_icon-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaIconImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(IconImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<IconImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized ICONICON IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataIconImageLibrary) {\r\n                Variable.refreshDataIconImageLibrary = false;\r\n                // console.log('===============================refresh icon image library========================================');\r\n                try {\r\n                    Variable.resultIconImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateIconImageLibrary', Variable.resultIconImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultIconImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data,\r\n                enable: data.enable,\r\n                width: data.width,\r\n                height: data.height\r\n            }\r\n\r\n            const newIconImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newIconImageLibrary);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Add Icon Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Delete Icon Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async update(updateData: any): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataIconImageLibrary = true\r\n            return { result: 'success', message: 'Update Icon Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaLabelService } from './scada_label.service';\r\n\r\n@Controller('label')\r\nexport class ScadaLabelController {\r\n    constructor(\r\n        private readonly scadaLabelService: ScadaLabelService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaLabelService.getData();\r\n    }\r\n\r\n    @Post('/insert_label')\r\n    insertLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.insertLabel(requestBody);\r\n    }\r\n\r\n    @Put('/update_label')\r\n    updateLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.updateLabel(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_label')\r\n    deleteLabel(@Body() requestBody) {\r\n        return this.scadaLabelService.deleteLabel(requestBody);\r\n    }\r\n\r\n}\r\n","// src/label/label.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Label')\r\nexport class LabelEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idScreen: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaLabelController } from './scada_label.controller';\nimport { ScadaLabelService } from './scada_label.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LabelEntity } from './scada_label.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([LabelEntity]), SocketIoModule],\n  controllers: [ScadaLabelController],\n  providers: [ScadaLabelService,]\n})\nexport class ScadaLabelModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { LabelEntity } from './scada_label.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaLabelService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(LabelEntity)\r\n        private readonly labelRepository: Repository<LabelEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized LABEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataLabel) {\r\n                Variable.refreshDataLabel = false;\r\n                // console.log('===============================refresh label========================================');\r\n                try {\r\n                    Variable.resultlabel = await this.labelRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateLabel', Variable.resultlabel);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultlabel\r\n    }\r\n\r\n    async insertLabel(labelData: any): Promise<any> {\r\n        try {\r\n            labelData._id = 'a' + Math.random().toString(36)\r\n            const newLabel = this.labelRepository.create(labelData);\r\n            await this.labelRepository.save(newLabel);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Add Label Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateLabel(updateData: any): Promise<any> {\r\n        try {\r\n            await this.labelRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Update Label Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteLabel(labelId: string): Promise<any> {\r\n        try {\r\n            await this.labelRepository.delete(labelId);\r\n            Variable.refreshDataLabel = true\r\n            return { result: 'success', message: 'Delete Label Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaLineService } from './scada_line.service';\r\n\r\n@Controller('line')\r\nexport class ScadaLineController {\r\n    constructor(\r\n        private readonly scadaLineService: ScadaLineService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaLineService.getData();\r\n    }\r\n\r\n    @Post('/insert_line')\r\n    insertLine(@Body() requestBody) {\r\n        return this.scadaLineService.insertLine(requestBody);\r\n    }\r\n\r\n    @Put('/update_line')\r\n    updateLine(@Body() requestBody) {\r\n        return this.scadaLineService.updateLine(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_line')\r\n    deleteLine(@Body() requestBody) {\r\n        return this.scadaLineService.deleteLine(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Line')\r\nexport class LineEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    length: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorOff: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorOn: string;\r\n\r\n    @Column({ nullable: true })\r\n    orientation: string;\r\n\r\n    @Column({ nullable: true })\r\n    rotate: number;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeTag: string;\r\n\r\n    @Column({ nullable: true })\r\n    status: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode_On: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode_Off: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaLineController } from './scada_line.controller';\nimport { ScadaLineService } from './scada_line.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LineEntity } from './scada_line.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LineEntity]), SocketIoModule],\n  controllers: [ScadaLineController],\n  providers: [ScadaLineService,]\n})\nexport class ScadaLineModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { LineEntity } from './scada_line.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaLineService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(LineEntity)\r\n        private readonly lineRepository: Repository<LineEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized LINE');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataLine) {\r\n                Variable.refreshDataLine = false;\r\n                // console.log('===============================refresh line========================================');\r\n                try {\r\n                    Variable.resultLine = await this.lineRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateLine', Variable.resultLine);\r\n                    }\r\n                    Variable.OldBitAdjust = []\r\n                    Variable.OldBitDisplay = []\r\n                    Variable.OldElement = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultLine\r\n    }\r\n\r\n    async insertLine(lineData: any): Promise<any> {\r\n        try {\r\n            lineData._id = 'a' + Math.random().toString(36)\r\n            lineData.status = 0\r\n            const newLine = this.lineRepository.create(lineData);\r\n            await this.lineRepository.save(newLine);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Add Line Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateLine(updateData: any): Promise<any> {\r\n        try {\r\n            await this.lineRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Update Line Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteLine(lineId: string): Promise<any> {\r\n        try {\r\n            await this.lineRepository.delete(lineId);\r\n            Variable.refreshDataLine = true\r\n            return { result: 'success', message: 'Delete Line Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMapImageLibraryService } from './scada_map-image-library.service';\r\n\r\n@Controller('uploadMap')\r\nexport class ScadaMapImageLibraryController {\r\n    constructor(\r\n        private readonly scadaMapImageLibraryService: ScadaMapImageLibraryService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMapImageLibraryService.getData();\r\n    }\r\n\r\n    @Post('/upload')\r\n    upload(@Body() requestBody) {\r\n        return this.scadaMapImageLibraryService.upload(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    delete(@Body() requestBody) {\r\n        return this.scadaMapImageLibraryService.delete(requestBody);\r\n    }\r\n\r\n\r\n}\r\n","// src/bit-adjust/bit-display.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('MapImageLibrary')\r\nexport class MapImageLibraryEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    img: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { MapImageLibraryEntity } from './scada_map-image-library.entity';\r\nimport { ScadaMapImageLibraryController } from './scada_map-image-library.controller';\r\nimport { ScadaMapImageLibraryService } from './scada_map-image-library.service';\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([MapImageLibraryEntity]), SocketIoModule],\r\n    controllers: [ScadaMapImageLibraryController],\r\n    providers: [ScadaMapImageLibraryService,]\r\n})\r\nexport class ScadaMapImageLibraryModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nimport { MapImageLibraryEntity } from './scada_map-image-library.entity';\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMapImageLibraryService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MapImageLibraryEntity)\r\n        private readonly bitDisplayImageLibraryRepository: Repository<MapImageLibraryEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MAP IMAGE LIBRARY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMapImageLibrary) {\r\n                Variable.refreshDataMapImageLibrary = false;\r\n                // console.log('===============================refresh map image library========================================');\r\n                try {\r\n                    Variable.resultMapImageLibrary = await this.bitDisplayImageLibraryRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMapImageLibrary', Variable.resultMapImageLibrary);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultMapImageLibrary\r\n    }\r\n\r\n    async upload(data: any): Promise<any> {\r\n        try {\r\n            var matches = data.data.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n                response = {};\r\n            if (matches.length !== 3) {\r\n                return { result: 'error', data: {}, message: `Invalid input string` };\r\n            }\r\n            let temp = {\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: data.name,\r\n                img: data.data\r\n            }\r\n\r\n            const newMapImageLibrary = this.bitDisplayImageLibraryRepository.create(temp);\r\n            await this.bitDisplayImageLibraryRepository.save(newMapImageLibrary);\r\n            Variable.refreshDataMapImageLibrary = true\r\n            return { result: 'success', message: 'Add Map Image Library Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async delete(id: string): Promise<any> {\r\n        try {\r\n            await this.bitDisplayImageLibraryRepository.delete(id);\r\n            Variable.refreshDataMapImageLibrary = true\r\n            return { result: 'success', message: 'Delete Map Image Library Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMapService } from './scada_map.service';\r\nconst VariableSystem = require('../../VariableSystem.js');\r\n\r\n@Controller('map')\r\nexport class ScadaMapController {\r\n    constructor(\r\n        private readonly scadaMapService: ScadaMapService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMapService.getData();\r\n    }\r\n\r\n    @Get('/getposition')\r\n    getPosition() {\r\n        return VariableSystem.PositionMobileRobot;\r\n    }\r\n\r\n    @Post('/insert_map')\r\n    insertMap(@Body() requestBody) {\r\n        return this.scadaMapService.insertMap(requestBody);\r\n    }\r\n\r\n    @Put('/update_map')\r\n    updateMap(@Body() requestBody) {\r\n        return this.scadaMapService.updateMap(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_map')\r\n    deleteMap(@Body() requestBody) {\r\n        return this.scadaMapService.deleteMap(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Map')\r\nexport class MapEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    selectPoint: number;\r\n\r\n    @Column({ nullable: true })\r\n    image1X: number;\r\n\r\n    @Column({ nullable: true })\r\n    image1Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    image2X: number;\r\n\r\n    @Column({ nullable: true })\r\n    image2Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    map1X: number;\r\n\r\n    @Column({ nullable: true })\r\n    map1Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    map2X: number;\r\n\r\n    @Column({ nullable: true })\r\n    map2Y: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameImage: string;\r\n\r\n    @Column({ nullable: true })\r\n    indexMobileRobot: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaMapController } from './scada_map.controller';\nimport { ScadaMapService } from './scada_map.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MapEntity } from './scada_map.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MapEntity]), SocketIoModule],\n  controllers: [ScadaMapController],\n  providers: [ScadaMapService,]\n})\nexport class ScadaMapModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { MapEntity } from './scada_map.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMapService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MapEntity)\r\n        private readonly mapRepository: Repository<MapEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MAP');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMap) {\r\n                Variable.refreshDataMap = false;\r\n                // console.log('===============================refresh map========================================');\r\n                try {\r\n                    Variable.resultMap = await this.mapRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMap', Variable.resultMap);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultMap\r\n    }\r\n\r\n    async insertMap(mapData: any): Promise<any> {\r\n        try {\r\n            mapData._id = 'a' + Math.random().toString(36)\r\n            const newMap = this.mapRepository.create(mapData);\r\n            await this.mapRepository.save(newMap);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Add Map Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateMap(updateData: any): Promise<any> {\r\n        try {\r\n            await this.mapRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Update Map Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteMap(mapId: string): Promise<any> {\r\n        try {\r\n            await this.mapRepository.delete(mapId);\r\n            Variable.refreshDataMap = true\r\n            return { result: 'success', message: 'Delete Map Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaMemonicService } from './scada_memonic.service';\r\n\r\n@Controller('memonic')\r\nexport class ScadaMemonicController {\r\n    constructor(\r\n        private readonly scadaMemonicService: ScadaMemonicService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaMemonicService.getData();\r\n    }\r\n\r\n    @Post('/insert')\r\n    insertMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.insertMemonic(requestBody);\r\n    }\r\n\r\n    @Put('/update')\r\n    updateMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.updateMemonic(requestBody);\r\n    }\r\n\r\n    @Delete('/delete')\r\n    deleteMemonic(@Body() requestBody) {\r\n        return this.scadaMemonicService.deleteMemonic(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Memonic')\r\nexport class MemonicEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    indexPLC: number;\r\n\r\n    @Column({ nullable: true })\r\n    typeMemonic: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: number;\r\n\r\n    @Column({ nullable: true })\r\n    nameVariable: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaMemonicController } from './scada_memonic.controller';\nimport { ScadaMemonicService } from './scada_memonic.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MemonicEntity } from './scada_memonic.entity';\n@Module({\n  imports: [TypeOrmModule.forFeature([MemonicEntity]), SocketIoModule],\n  controllers: [ScadaMemonicController],\n  providers: [ScadaMemonicService,]\n})\nexport class ScadaMemonicModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { MemonicEntity } from './scada_memonic.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaMemonicService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(MemonicEntity)\r\n        private readonly memonicRepository: Repository<MemonicEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized MEMONIC');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataMemonic) {\r\n                Variable.refreshDataMemonic = false;\r\n                // console.log('===============================refresh memonic========================================');\r\n                try {\r\n                    Variable.resultmemonic = await this.memonicRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateMemonic', Variable.resultmemonic);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultmemonic\r\n    }\r\n\r\n    async insertMemonic(memonicData: any): Promise<any> {\r\n        try {\r\n            memonicData._id = 'a' + Math.random().toString(36)\r\n            const newMemonic = this.memonicRepository.create(memonicData);\r\n            await this.memonicRepository.save(newMemonic);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Add Memonic Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateMemonic(updateData: any): Promise<any> {\r\n        try {\r\n            await this.memonicRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Update Memonic Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteMemonic(memonicId: string): Promise<any> {\r\n        try {\r\n            await this.memonicRepository.delete(memonicId);\r\n            Variable.refreshDataMemonic = true\r\n            return { result: 'success', message: 'Delete Memonic Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaPanelService } from './scada_panel.service';\r\n\r\n@Controller('panel')\r\nexport class ScadaPanelController {\r\n    constructor(\r\n        private readonly scadaPanelService: ScadaPanelService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaPanelService.getData();\r\n    }\r\n\r\n    @Post('/insert_panel')\r\n    insertPanel(@Body() requestBody) {\r\n        return this.scadaPanelService.insertPanel(requestBody);\r\n    }\r\n\r\n    @Put('/update_panel')\r\n    updatePanel(@Body() requestBody) {\r\n        return this.scadaPanelService.updatePanel(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_panel')\r\n    deletePanel(@Body() requestBody) {\r\n        return this.scadaPanelService.deletePanel(requestBody);\r\n    }\r\n\r\n}\r\n","// src/panel/panel.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('Panel')\r\nexport class PanelEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ name: 'backgroundColor', nullable: true })\r\n    backgroundColor: string;\r\n\r\n    @Column({ name: 'borderRadius', nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ name: 'boxShadow1', nullable: true })\r\n    boxShadow1: string;\r\n\r\n    @Column({ name: 'boxShadow2', nullable: true })\r\n    boxShadow2: string;\r\n\r\n    @Column({ name: 'boxShadow3', nullable: true })\r\n    boxShadow3: string;\r\n\r\n    @Column({ name: 'boxShadowColor', nullable: true })\r\n    boxShadowColor: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    margin: string;\r\n\r\n    @Column({ nullable: true })\r\n    padding: number;\r\n\r\n    @Column({ name: 'idGroupControl', nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaPanelService } from './scada_panel.service';\nimport { ScadaPanelController } from './scada_panel.controller';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PanelEntity } from './scada_panel.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PanelEntity]), SocketIoModule],\n  providers: [ScadaPanelService,],\n  controllers: [ScadaPanelController]\n})\nexport class ScadaPanelModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { PanelEntity } from './scada_panel.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaPanelService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(PanelEntity)\r\n        private readonly panelRepository: Repository<PanelEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized PANEL');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataPanel) {\r\n                Variable.refreshDataPanel = false;\r\n                // console.log('===============================refresh panel========================================');\r\n                try {\r\n                    Variable.resultPanel = await this.panelRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdatePanel', Variable.resultPanel);\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultPanel\r\n    }\r\n\r\n    async insertPanel(panelData: any): Promise<any> {\r\n        try {\r\n            panelData._id = 'a' + Math.random().toString(36)\r\n            const newPanel = this.panelRepository.create(panelData);\r\n            await this.panelRepository.save(newPanel);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Add Panel Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updatePanel(updateData: any): Promise<any> {\r\n        try {\r\n            await this.panelRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Update Panel Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deletePanel(panelId: string): Promise<any> {\r\n        try {\r\n            await this.panelRepository.delete(panelId);\r\n            Variable.refreshDataPanel = true\r\n            return { result: 'success', message: 'Delete Panel Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSetupAlarmRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitAdjust_SetupAlarm)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitAdjust_SetupAlarm.length; i++) {\r\n                    if (Variable.haveChangeArrBitAdjust_SetupAlarm[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitAdjust_SetupAlarm[i] = false;\r\n                        //Alarm\r\n                        Variable.resultSetupAlarmTable_BitAdjust = []\r\n                        if (Array.isArray(Variable.resultSetupAlarm)) {\r\n                            for (let j = 0; j < Variable.resultSetupAlarm.length; j++) {\r\n                                if (!isNaN(Variable.resultSetupAlarm[j].idDevice) && Variable.resultSetupAlarm[j].typeVariable == 'BitAdjust' && Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)]) {\r\n                                    if (parseInt(Variable.resultSetupAlarm[j].tag) <= Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)].length) {\r\n\r\n                                        if (parseInt(Variable.resultSetupAlarm[j].alarmAtOn) && Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarmTable_BitAdjust.push({\r\n                                                _id: Variable.resultSetupAlarm[j]._id,\r\n                                                typeVariable: 'BitAdjust',\r\n                                                idDevice: Variable.resultSetupAlarm[j].idDevice,\r\n                                                tag: Variable.resultSetupAlarm[j].tag,\r\n                                                alarmText: Variable.resultSetupAlarm[j].alarmText,\r\n                                                typeAlarm: Variable.resultSetupAlarm[j].typeAlarm\r\n                                            })\r\n                                        }\r\n                                        if (parseInt(Variable.resultSetupAlarm[j].alarmAtOff) && !Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarmTable_BitAdjust.push({\r\n                                                _id: Variable.resultSetupAlarm[j]._id,\r\n                                                typeVariable: 'BitAdjust',\r\n                                                idDevice: Variable.resultSetupAlarm[j].idDevice,\r\n                                                tag: Variable.resultSetupAlarm[j].tag,\r\n                                                alarmText: Variable.resultSetupAlarm[j].alarmText,\r\n                                                typeAlarm: Variable.resultSetupAlarm[j].typeAlarm\r\n                                            })\r\n                                        }\r\n                                        if (Variable.resultSetupAlarm[j].oldValue !== Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarm[j].oldValue = Variable.BitAdjust[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]\r\n                                            if (parseInt(Variable.resultSetupAlarm[j].alarmAtOn) && !isNaN(Variable.resultSetupAlarm[j].oldValue) && Variable.resultSetupAlarm[j].oldValue) {\r\n                                                // if (Variable.resultSetupAlarm[j].saveAlarm) {\r\n                                                //     SubFunction.saveAlarmData(Variable.resultSetupAlarm[j])\r\n                                                // }\r\n                                                if (this.socketGateway && this.socketGateway.server) {\r\n                                                    this.socketGateway.server.emit('Server-Send-Snackbar', {\r\n                                                        status: Variable.resultSetupAlarm[j].typeAlarm,\r\n                                                        message: Variable.resultSetupAlarm[j].alarmText\r\n                                                    })\r\n                                                }\r\n\r\n                                            }\r\n                                            if (parseInt(Variable.resultSetupAlarm[j].alarmAtOff) && !isNaN(Variable.resultSetupAlarm[j].oldValue) && !Variable.resultSetupAlarm[j].oldValue) {\r\n                                                // if (Variable.resultSetupAlarm[j].saveAlarm) {\r\n                                                //     SubFunction.saveAlarmData(Variable.resultSetupAlarm[j])\r\n                                                // }\r\n                                                this.socketGateway.server.emit('Server-Send-Snackbar', {\r\n                                                    status: Variable.resultSetupAlarm[j].typeAlarm,\r\n                                                    message: Variable.resultSetupAlarm[j].alarmText\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Variable.resultSetupAlarmTable = [...Variable.resultSetupAlarmTable_BitAdjust, ...Variable.resultSetupAlarmTable_BitDisplay];\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateSetupAlarmTable', Variable.resultSetupAlarmTable)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n\r\n        try {\r\n            if (Array.isArray(Variable.haveChangeArrBitDisplay_SetupAlarm)) {\r\n                for (let i = 0; i < Variable.haveChangeArrBitDisplay_SetupAlarm.length; i++) {\r\n                    if (Variable.haveChangeArrBitDisplay_SetupAlarm[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrBitDisplay_SetupAlarm[i] = false;\r\n                        //Alarm\r\n                        Variable.resultSetupAlarmTable_BitDisplay = []\r\n                        if (Array.isArray(Variable.resultSetupAlarm)) {\r\n                            for (let j = 0; j < Variable.resultSetupAlarm.length; j++) {\r\n                                if (!isNaN(Variable.resultSetupAlarm[j].idDevice) && Variable.resultSetupAlarm[j].typeVariable == 'BitDisplay' && Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)]) {\r\n                                    if (parseInt(Variable.resultSetupAlarm[j].tag) <= Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)].length) {\r\n\r\n                                        if (parseInt(Variable.resultSetupAlarm[j].alarmAtOn) && Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarmTable_BitDisplay.push({\r\n                                                _id: Variable.resultSetupAlarm[j]._id,\r\n                                                typeVariable: 'BitDisplay',\r\n                                                idDevice: Variable.resultSetupAlarm[j].idDevice,\r\n                                                tag: Variable.resultSetupAlarm[j].tag,\r\n                                                alarmText: Variable.resultSetupAlarm[j].alarmText,\r\n                                                typeAlarm: Variable.resultSetupAlarm[j].typeAlarm\r\n                                            })\r\n                                        }\r\n                                        if (parseInt(Variable.resultSetupAlarm[j].alarmAtOff) && !Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarmTable_BitDisplay.push({\r\n                                                _id: Variable.resultSetupAlarm[j]._id,\r\n                                                typeVariable: 'BitDisplay',\r\n                                                idDevice: Variable.resultSetupAlarm[j].idDevice,\r\n                                                tag: Variable.resultSetupAlarm[j].tag,\r\n                                                alarmText: Variable.resultSetupAlarm[j].alarmText,\r\n                                                typeAlarm: Variable.resultSetupAlarm[j].typeAlarm\r\n                                            })\r\n                                        }\r\n                                        if (Variable.resultSetupAlarm[j].oldValue !== Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]) {\r\n                                            Variable.resultSetupAlarm[j].oldValue = Variable.BitDisplay[parseInt(Variable.resultSetupAlarm[j].idDevice)][parseInt(Variable.resultSetupAlarm[j].tag)]\r\n                                            if (parseInt(Variable.resultSetupAlarm[j].alarmAtOn) && !isNaN(Variable.resultSetupAlarm[j].oldValue) && Variable.resultSetupAlarm[j].oldValue) {\r\n                                                // if (Variable.resultSetupAlarm[j].saveAlarm) {\r\n                                                //     SubFunction.saveAlarmData(Variable.resultSetupAlarm[j])\r\n                                                // }\r\n                                                if (this.socketGateway && this.socketGateway.server) {\r\n                                                    this.socketGateway.server.emit('Server-Send-Snackbar', {\r\n                                                        status: Variable.resultSetupAlarm[j].typeAlarm,\r\n                                                        message: Variable.resultSetupAlarm[j].alarmText\r\n                                                    })\r\n                                                }\r\n\r\n                                            }\r\n                                            if (parseInt(Variable.resultSetupAlarm[j].alarmAtOff) && !isNaN(Variable.resultSetupAlarm[j].oldValue) && !Variable.resultSetupAlarm[j].oldValue) {\r\n                                                // if (Variable.resultSetupAlarm[j].saveAlarm) {\r\n                                                //     SubFunction.saveAlarmData(Variable.resultSetupAlarm[j])\r\n                                                // }\r\n                                                this.socketGateway.server.emit('Server-Send-Snackbar', {\r\n                                                    status: Variable.resultSetupAlarm[j].typeAlarm,\r\n                                                    message: Variable.resultSetupAlarm[j].alarmText\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Variable.resultSetupAlarmTable = [...Variable.resultSetupAlarmTable_BitAdjust, ...Variable.resultSetupAlarmTable_BitDisplay];\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateSetupAlarmTable', Variable.resultSetupAlarmTable)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) { console.log(error) }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaSetupAlarmService } from './scada_setup-alarm.service';\r\n\r\n@Controller('setupAlarm')\r\nexport class ScadaSetupAlarmController {\r\n    constructor(\r\n        private readonly scadaSetupAlarmService: ScadaSetupAlarmService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaSetupAlarmService.getData();\r\n    }\r\n\r\n    @Get('/getdata_setupAlarmTable')\r\n    getDataSetupAlarmTable() {\r\n        return this.scadaSetupAlarmService.getDataSetupAlarmTable();\r\n    }\r\n\r\n    @Post('/insert_setupAlarm')\r\n    insertSetupAlarm(@Body() requestBody) {\r\n        console.log(requestBody)\r\n        return this.scadaSetupAlarmService.insertSetupAlarm(requestBody);\r\n    }\r\n\r\n    @Put('/update_setupAlarm')\r\n    updateSetupAlarm(@Body() requestBody) {\r\n        return this.scadaSetupAlarmService.updateSetupAlarm(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_setupAlarm')\r\n    deleteSetupAlarm(@Body() requestBody) {\r\n        return this.scadaSetupAlarmService.deleteSetupAlarm(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('SetupAlarm')\r\nexport class SetupAlarmEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeVariable: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeAlarm: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: number;\r\n\r\n    @Column({ nullable: true })\r\n    oldValue: number;\r\n\r\n    @Column({ nullable: true })\r\n    alarmText: string;\r\n\r\n    @Column({ nullable: true })\r\n    alarmAtOn: number;\r\n\r\n    @Column({ nullable: true })\r\n    alarmAtOff: number;\r\n\r\n    @Column({ nullable: true })\r\n    saveAlarm: number;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaSetupAlarmController } from './scada_setup-alarm.controller';\nimport { ScadaSetupAlarmService } from './scada_setup-alarm.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SetupAlarmEntity } from './scada_setup-alarm.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([SetupAlarmEntity]), SocketIoModule],\n  controllers: [ScadaSetupAlarmController],\n  providers: [ScadaSetupAlarmService,]\n})\nexport class ScadaSetupAlarmModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SetupAlarmEntity } from './scada_setup-alarm.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaSetupAlarmService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(SetupAlarmEntity)\r\n        private readonly setupAlarmRepository: Repository<SetupAlarmEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataSetupAlarm) {\r\n                Variable.refreshDataSetupAlarm = false;\r\n                // console.log('===============================refresh setupAlarm========================================');\r\n                try {\r\n                    Variable.resultSetupAlarm = await this.setupAlarmRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateSetupAlarm', Variable.resultSetupAlarm);\r\n                        Variable.OldBitDisplay = []\r\n                        Variable.OldBitAdjust = []\r\n                        Variable.OldWordDisplay = []\r\n                        Variable.OldWordAdjust = []\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultSetupAlarm\r\n    }\r\n\r\n    async getDataSetupAlarmTable() {\r\n        return Variable.resultSetupAlarmTable;\r\n    }\r\n\r\n    async insertSetupAlarm(setupAlarmData: any): Promise<any> {\r\n        try {\r\n            setupAlarmData._id = 'a' + Math.random().toString(36)\r\n            setupAlarmData.oldValue = -1\r\n            console.log(setupAlarmData)\r\n            const newSetupAlarm = this.setupAlarmRepository.create(setupAlarmData);\r\n            await this.setupAlarmRepository.save(newSetupAlarm);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Add SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateSetupAlarm(updateData: any): Promise<any> {\r\n        try {\r\n            await this.setupAlarmRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Update SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteSetupAlarm(setupAlarmId: string): Promise<any> {\r\n        try {\r\n            await this.setupAlarmRepository.delete(setupAlarmId);\r\n            Variable.refreshDataSetupAlarm = true\r\n            return { result: 'success', message: 'Delete SetupAlarm Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaStringRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrString)) {\r\n            for (let i = 0; i < Variable.haveChangeArrString.length; i++) {\r\n                if (Variable.haveChangeArrString[i]) {\r\n                    Variable.haveChangeArrString[i] = false;\r\n                    if (Array.isArray(Variable.resultString)) {\r\n                        for (let j = 0; j < Variable.resultString.length; j++) {\r\n                            if (!isNaN(Variable.resultString[j].idDevice) && Variable.ListString[parseInt(Variable.resultString[j].idDevice)]) {\r\n                                if (Variable.resultString[j].tag <= Variable.ListString[parseInt(Variable.resultString[j].idDevice)].length) { Variable.resultString[j].text = Variable.ListString[parseInt(Variable.resultString[j].idDevice)][Variable.resultString[j].tag] }\r\n                                haveChange = true\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateString', Variable.resultString)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_String)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_String.length; j++) {\r\n                            if (!isNaN(Variable.resultProjectScreen_String[j].idDevice) && Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_String[j].tag <= Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)].length) {\r\n                                    Variable.resultProjectScreen_String[j].text = Variable.ListString[parseInt(Variable.resultProjectScreen_String[j].idDevice)][Variable.resultProjectScreen_String[j].tag]\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_String', Variable.resultProjectScreen_String)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaStringService } from './scada_string.service';\r\n\r\n@Controller('string')\r\nexport class ScadaStringController {\r\n    constructor(\r\n        private readonly scadaStringService: ScadaStringService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaStringService.getData();\r\n    }\r\n\r\n    @Post('/insert_string')\r\n    insertString(@Body() requestBody) {\r\n        return this.scadaStringService.insertString(requestBody);\r\n    }\r\n\r\n    @Put('/update_string')\r\n    updateString(@Body() requestBody) {\r\n        return this.scadaStringService.updateString(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_string')\r\n    deleteString(@Body() requestBody) {\r\n        return this.scadaStringService.deleteString(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('String')\r\nexport class StringEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    speedScroll: number;\r\n\r\n    @Column({ nullable: true })\r\n    lengthScroll: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaStringController } from './scada_string.controller';\nimport { ScadaStringService } from './scada_string.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StringEntity } from './scada_string.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([StringEntity]), SocketIoModule],\n  controllers: [ScadaStringController],\n  providers: [ScadaStringService,]\n})\nexport class ScadaStringModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { StringEntity } from './scada_string.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaStringService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(StringEntity)\r\n        private readonly stringRepository: Repository<StringEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized STRING');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataString) {\r\n                Variable.refreshDataString = false;\r\n                // console.log('===============================refresh string========================================');\r\n                try {\r\n                    Variable.resultString = await this.stringRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateString', Variable.resultString);\r\n                    }\r\n                    Variable.OldListString = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultString\r\n    }\r\n\r\n    async insertString(stringData: any): Promise<any> {\r\n        try {\r\n            stringData._id = 'a' + Math.random().toString(36)\r\n            stringData.text = '---'\r\n            const newString = this.stringRepository.create(stringData);\r\n            await this.stringRepository.save(newString);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Add String Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateString(updateData: any): Promise<any> {\r\n        try {\r\n            await this.stringRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Update String Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteString(stringId: string): Promise<any> {\r\n        try {\r\n            await this.stringRepository.delete(stringId);\r\n            Variable.refreshDataString = true\r\n            return { result: 'success', message: 'Delete String Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaTextFieldRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrTextField)) {\r\n            for (let i = 0; i < Variable.haveChangeArrTextField.length; i++) {\r\n                if (Variable.haveChangeArrTextField[i]) {\r\n                    Variable.haveChangeArrTextField[i] = false;\r\n                    if (Array.isArray(Variable.resultTextField)) {\r\n                        for (let j = 0; j < Variable.resultTextField.length; j++) {\r\n                            if (!isNaN(Variable.resultTextField[j].idDevice) && Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)]) {\r\n                                if (Variable.resultTextField[j].tag <= Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)].length) {\r\n                                    Variable.resultTextField[j].text = Variable.TextField[parseInt(Variable.resultTextField[j].idDevice)][Variable.resultTextField[j].tag]\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateTextField', Variable.resultTextField)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaTextFieldService } from './scada_text-field.service';\r\n\r\n@Controller('textField')\r\nexport class ScadaTextFieldController {\r\n    constructor(\r\n        private readonly scadaTextFieldService: ScadaTextFieldService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaTextFieldService.getData();\r\n    }\r\n\r\n    @Post('/insert_textField')\r\n    insertTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.insertTextField(requestBody);\r\n    }\r\n\r\n    @Put('/update_textField')\r\n    updateTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.updateTextField(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_textField')\r\n    deleteTextField(@Body() requestBody) {\r\n        return this.scadaTextFieldService.deleteTextField(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('TextField')\r\nexport class TextFieldEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    color: string;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    rows: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: string;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaTextFieldController } from './scada_text-field.controller';\nimport { ScadaTextFieldService } from './scada_text-field.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TextFieldEntity } from './scada_text-field.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TextFieldEntity]), SocketIoModule],\n  controllers: [ScadaTextFieldController],\n  providers: [ScadaTextFieldService,]\n})\nexport class ScadaTextFieldModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { TextFieldEntity } from './scada_text-field.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaTextFieldService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(TextFieldEntity)\r\n        private readonly textFieldRepository: Repository<TextFieldEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized STRING');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataTextField) {\r\n                Variable.refreshDataTextField = false;\r\n                // console.log('===============================refresh textField========================================');\r\n                try {\r\n                    Variable.resultTextField = await this.textFieldRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateTextField', Variable.resultTextField);\r\n                    }\r\n                    Variable.OldTextField = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultTextField\r\n    }\r\n\r\n    async insertTextField(textFieldData: any): Promise<any> {\r\n        try {\r\n            textFieldData._id = 'a' + Math.random().toString(36)\r\n            textFieldData.text = ''\r\n            const newTextField = this.textFieldRepository.create(textFieldData);\r\n            await this.textFieldRepository.save(newTextField);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Add TextField Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateTextField(updateData: any): Promise<any> {\r\n        try {\r\n            await this.textFieldRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Update TextField Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteTextField(textFieldId: string): Promise<any> {\r\n        try {\r\n            await this.textFieldRepository.delete(textFieldId);\r\n            Variable.refreshDataTextField = true\r\n            return { result: 'success', message: 'Delete TextField Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","export * from './user.dto'","import { IsNotEmpty, IsString } from \"class-validator\"\r\n\r\n//dto: data transfer object\r\nexport class AuthDTO {\r\n    @IsNotEmpty()\r\n    name: string\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    password: string\r\n}","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaUserService } from './scada_user.service';\r\nimport { AuthDTO } from './dto'\r\n@Controller('user')\r\nexport class ScadaUserController {\r\n    constructor(\r\n        private readonly scadaUserService: ScadaUserService\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaUserService.getData();\r\n    }\r\n\r\n    @Post('signup')\r\n    signup(@Body() body: AuthDTO) {\r\n        return this.scadaUserService.signup(body)\r\n    }\r\n\r\n    @Post('signin')\r\n    signin(@Body() body: AuthDTO) {\r\n        return this.scadaUserService.signin(body)\r\n    }\r\n\r\n    @Post('userVerify')\r\n    userCheck(@Body() body: any) {\r\n        return this.scadaUserService.verify(body.token)\r\n    }\r\n\r\n    @Put('/update_user')\r\n    updateUser(@Body() requestBody) {\r\n        return this.scadaUserService.updateUser(requestBody);\r\n    }\r\n\r\n    // @Post('/signup')\r\n    // insertUser(@Body() requestBody) {\r\n    //     return this.scadaUserService.signupUser(requestBody);\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    // @Delete('/delete_user')\r\n    // deleteUser(@Body() requestBody) {\r\n    //     return this.scadaUserService.deleteUser(requestBody);\r\n    // }\r\n}\r\n","// src/user/user.entity.ts\r\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('User')\r\nexport class UserEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column()\r\n    name: string;\r\n\r\n    @Column()\r\n    password: string;\r\n\r\n    @Column()\r\n    levelUser: number;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScadaUserController } from './scada_user.controller';\nimport { ScadaUserService } from './scada_user.service';\nimport { UserEntity } from './scada_user.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([UserEntity]),\n    JwtModule.register({\n      global: true,\n      secret: '123123',\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  controllers: [ScadaUserController],\n  providers: [ScadaUserService, JwtStrategy]\n})\nexport class ScadaUserModule { }\n","import { Injectable, ForbiddenException, NotFoundException } from '@nestjs/common';\r\nimport * as argon from 'argon2'\r\nimport { AuthDTO } from './dto'\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserEntity } from './scada_user.entity';\r\nimport { JwtService } from '@nestjs/jwt';\r\n\r\n@Injectable()\r\nexport class ScadaUserService {\r\n    constructor(\r\n        @InjectRepository(UserEntity)\r\n        private readonly userRepository: Repository<UserEntity>,\r\n        private jwtService: JwtService,\r\n    ) { }\r\n\r\n    async getData(): Promise<UserEntity[]> {\r\n        return this.userRepository.find();\r\n    }\r\n\r\n    async signup(userDTO: AuthDTO) {\r\n        const hashedPassword = await argon.hash(userDTO.password)\r\n        //Insert database\r\n        try {\r\n            const newUser = this.userRepository.create({\r\n                _id: 'a' + Math.random().toString(36),\r\n                name: userDTO.name,\r\n                password: hashedPassword,\r\n                levelUser: 0\r\n            });\r\n            await this.userRepository.save(newUser);\r\n            return { result: 'success', message: 'Create Account Success', data: {} };\r\n            // await this.signJwtToken(user.id, user.email)\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n    async signin(userDTO: AuthDTO) {\r\n        const { name, password } = userDTO;\r\n        //default\r\n        if (name === 'ADMIN' && password === '1101111010') {\r\n            const userInfo = {\r\n                _id: '123',\r\n                name: 'admin',\r\n                password: '',\r\n                levelUser: 0,\r\n                token: ''\r\n            }\r\n            const token = '123'\r\n            userInfo.token = token\r\n            delete userInfo.password;\r\n            return {\r\n                result: \"success\",\r\n                message: 'SignIn Success',\r\n                data: userInfo\r\n            }\r\n        }\r\n        let user = await this.userRepository.createQueryBuilder('User')\r\n            .where('name = :name', { name })\r\n            .getOne();\r\n        // let user = await this.userRepository.query(\"SELECT * FROM User WHERE name=\" + '\"' + name + '\"');\r\n        if (!user) {\r\n            throw new NotFoundException('User not found')\r\n        }\r\n        const passwordMatched = await argon.verify(\r\n            user.password,\r\n            password\r\n        )\r\n        if (!passwordMatched) {\r\n            throw new ForbiddenException('Incorrect credentials')\r\n        }\r\n        let token = await this.signJwtToken(user._id, user.name, user.levelUser)\r\n        return {\r\n            result: \"success\",\r\n            message: 'SignIn Success',\r\n            data: { name: user.name, password: user.password, levelUser: user.levelUser, token }\r\n        }\r\n    }\r\n    async signJwtToken(userId: string, name: string, levelUser: number)\r\n        : Promise<{ accessToken: string }> {\r\n        const payload = {\r\n            sub: userId,\r\n            name, levelUser\r\n        }\r\n        const jwtString = await this.jwtService.signAsync(payload, {\r\n            expiresIn: '1d',\r\n            secret: '123123'\r\n        })\r\n        return {\r\n            accessToken: jwtString\r\n        }\r\n    }\r\n    async verify(info: string) {\r\n        try {\r\n            let user = await this.jwtService.verifyAsync(info)\r\n            return {\r\n                result: \"success\",\r\n                message: 'SignIn Success',\r\n                data: { name: user.name, levelUser: user.levelUser }\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                result: \"error\",\r\n                message: 'verify error',\r\n                data: {}\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async updateUser(updateData: any): Promise<any> {\r\n        try {\r\n            await this.userRepository.update(updateData._id, updateData);\r\n            return { result: 'success', message: 'Update User Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","export * from './jwt.strategy'","import { Injectable } from \"@nestjs/common\";\r\nimport { PassportStrategy } from '@nestjs/passport'\r\nimport { ExtractJwt, Strategy } from 'passport-jwt'\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { UserEntity } from '../scada_user.entity';\r\nimport { ConfigService } from \"../../config/config.service\";\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\r\n    constructor(\r\n        @InjectRepository(UserEntity)\r\n        private readonly userRepository: Repository<UserEntity>,\r\n        configService: ConfigService,\r\n    ) {\r\n        super({\r\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n            secretOrKey: configService.get('JWT_SECRET')\r\n        })\r\n    }\r\n    async validate(payload: { sub: string, name: string }) {\r\n        console.log('1231231231313')\r\n        const user = await this.userRepository.findOneBy({\r\n            _id: payload.sub\r\n        })\r\n        console.log('User')\r\n        console.log(user)\r\n        delete user.password\r\n        return user\r\n    }\r\n}","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordAdjustRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrWordAdjust)) {\r\n            for (let i = 0; i < Variable.haveChangeArrWordAdjust.length; i++) {\r\n                try {\r\n                    if (Variable.haveChangeArrWordAdjust[i]) {\r\n                        haveChange = false\r\n                        Variable.haveChangeArrWordAdjust[i] = false;\r\n\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('WordAdjust', Variable.WordAdjust)\r\n                        }\r\n\r\n                        if (Array.isArray(Variable.resultWordAdjust)) {\r\n                            for (let j = 0; j < Variable.resultWordAdjust.length; j++) {\r\n                                if (Variable.resultWordAdjust[j].idDevice === '0' && i == 0) {\r\n                                    if (Array.isArray(Variable.WordAdjust[0]) && Variable.WordAdjust[0]) {\r\n                                        if (Variable.resultWordAdjust[j].tag <= Variable.WordAdjust[0].length) {\r\n                                            if (parseInt(Variable.resultWordAdjust[j].negative)) {\r\n                                                if (parseInt(Variable.WordAdjust[0][Variable.resultWordAdjust[j].tag]) > 32767) {\r\n                                                    Variable.resultWordAdjust[j].text = parseInt(Variable.WordAdjust[0][Variable.resultWordAdjust[j].tag]) - 65536\r\n                                                } else {\r\n                                                    Variable.resultWordAdjust[j].text = Variable.WordAdjust[0][Variable.resultWordAdjust[j].tag]\r\n                                                }\r\n                                            } else {\r\n                                                Variable.resultWordAdjust[j].text = Variable.WordAdjust[0][Variable.resultWordAdjust[j].tag]\r\n                                            }\r\n                                            haveChange = true\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (parseInt(Variable.resultWordAdjust[j].idDevice) && i > 0 && Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)]) {\r\n                                        if (Variable.resultWordAdjust[j].tag <= Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)].length) {\r\n                                            if (parseInt(Variable.resultWordAdjust[j].negative)) {\r\n                                                if (parseInt(Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]) > 32767) {\r\n                                                    Variable.resultWordAdjust[j].text = parseInt(Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]) - 65536\r\n                                                } else {\r\n                                                    Variable.resultWordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]\r\n                                                }\r\n                                            } else {\r\n                                                Variable.resultWordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultWordAdjust[j].idDevice)][Variable.resultWordAdjust[j].tag]\r\n                                            }\r\n                                            haveChange = true\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateWordAdjust', Variable.resultWordAdjust)\r\n                            }\r\n                        }\r\n                        haveChange = false\r\n                        if (Array.isArray(Variable.resultProjectScreen_WordAdjust)) {\r\n                            for (let j = 0; j < Variable.resultProjectScreen_WordAdjust.length; j++) {\r\n                                if (Variable.resultProjectScreen_WordAdjust[j].idDevice && Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_WordAdjust[j].tag < Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultProjectScreen_WordAdjust[j].negative)) {\r\n                                            if (parseInt(Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]) > 32767) {\r\n                                                Variable.resultProjectScreen_WordAdjust[j].text = parseInt(Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]) - 65536\r\n                                            } else {\r\n                                                Variable.resultProjectScreen_WordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_WordAdjust[j].text = Variable.WordAdjust[parseInt(Variable.resultProjectScreen_WordAdjust[j].idDevice)][Variable.resultProjectScreen_WordAdjust[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (haveChange) {\r\n                            if (this.socketGateway && this.socketGateway.server) {\r\n                                this.socketGateway.server.emit('UpdateScreen_WordAdjust', Variable.resultProjectScreen_WordAdjust)\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.log('WordAdjust Error Sqlite: ' + error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaWordAdjustService } from './scada_word-adjust.service';\r\n\r\n@Controller('wordAdjust')\r\nexport class ScadaWordAdjustController {\r\n    constructor(\r\n        private readonly scadaWordAdjustService: ScadaWordAdjustService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaWordAdjustService.getData();\r\n    }\r\n\r\n    @Post('/insert_wordAdjust')\r\n    insertWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.insertWordAdjust(requestBody);\r\n    }\r\n\r\n    @Put('/update_wordAdjust')\r\n    updateWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.updateWordAdjust(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_wordAdjust')\r\n    deleteWordAdjust(@Body() requestBody) {\r\n        return this.scadaWordAdjustService.deleteWordAdjust(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('WordAdjust')\r\nexport class WordAdjustEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    levelUser: number;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    typeDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    enableLogData: number;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ScadaWordAdjustController } from './scada_word-adjust.controller';\r\nimport { ScadaWordAdjustService } from './scada_word-adjust.service';\r\nimport { SocketIoModule } from '../socket_io/socket_io.module'\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { WordAdjustEntity } from './scada_word-adjust.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([WordAdjustEntity]), SocketIoModule],\r\n  controllers: [ScadaWordAdjustController],\r\n  providers: [ScadaWordAdjustService,]\r\n})\r\nexport class ScadaWordAdjustModule { }\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { WordAdjustEntity } from './scada_word-adjust.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordAdjustService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(WordAdjustEntity)\r\n        private readonly wordAdjustRepository: Repository<WordAdjustEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n\r\n    ) { }\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDADJUST');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataWordAdjust) {\r\n                Variable.refreshDataWordAdjust = false;\r\n                // console.log('===============================refresh wordAdjust========================================');\r\n                try {\r\n                    Variable.resultWordAdjust = await this.wordAdjustRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateWordAdjust', Variable.resultWordAdjust);\r\n                    }\r\n                    Variable.OldWordAdjust = []\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultWordAdjust\r\n    }\r\n\r\n    async insertWordAdjust(wordAdjustData: any): Promise<any> {\r\n        try {\r\n            wordAdjustData._id = 'a' + Math.random().toString(36)\r\n            wordAdjustData.text = 0\r\n            const newWordAdjust = this.wordAdjustRepository.create(wordAdjustData);\r\n            await this.wordAdjustRepository.save(newWordAdjust);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Add WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateWordAdjust(updateData: any): Promise<any> {\r\n        try {\r\n            await this.wordAdjustRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Update WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteWordAdjust(wordAdjustId: string): Promise<any> {\r\n        try {\r\n            await this.wordAdjustRepository.delete(wordAdjustId);\r\n            Variable.refreshDataWordAdjust = true\r\n            return { result: 'success', message: 'Delete WordAdjust Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordDisplayRefreshService {\r\n    constructor(\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    refreshData() {\r\n        let haveChange = false\r\n        if (Array.isArray(Variable.haveChangeArrWordDisplay)) {\r\n            for (let i = 0; i < Variable.haveChangeArrWordDisplay.length; i++) {\r\n                if (Variable.haveChangeArrWordDisplay[i]) {\r\n                    haveChange = false\r\n                    Variable.haveChangeArrWordDisplay[i] = false;\r\n                    if (Array.isArray(Variable.resultWordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultWordDisplay.length; j++) {\r\n                            if (Variable.resultWordDisplay[j].idDevice === '0' && i == 0) {\r\n                                if (Array.isArray(Variable.WordDisplay[0]) && Variable.WordDisplay[0]) {\r\n                                    if (Variable.resultWordDisplay[j].tag <= Variable.WordDisplay[0].length) {\r\n                                        if (parseInt(Variable.resultWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.WordDisplay[0][Variable.resultWordDisplay[j].tag]) > 32767) {\r\n                                                Variable.resultWordDisplay[j].text = parseInt(Variable.WordDisplay[0][Variable.resultWordDisplay[j].tag]) - 65536\r\n                                            } else {\r\n                                                Variable.resultWordDisplay[j].text = Variable.WordDisplay[0][Variable.resultWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultWordDisplay[j].text = Variable.WordDisplay[0][Variable.resultWordDisplay[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (parseInt(Variable.resultWordDisplay[j].idDevice) && i > 0 && Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultWordDisplay[j].tag <= Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)].length) {\r\n                                        if (parseInt(Variable.resultWordDisplay[j].negative)) {\r\n                                            if (parseInt(Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]) > 32767) {\r\n                                                Variable.resultWordDisplay[j].text = parseInt(Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]) - 65536\r\n                                            } else {\r\n                                                Variable.resultWordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]\r\n                                            }\r\n                                        } else {\r\n                                            Variable.resultWordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultWordDisplay[j].idDevice)][Variable.resultWordDisplay[j].tag]\r\n                                        }\r\n                                        haveChange = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateWordDisplay', Variable.resultWordDisplay)\r\n                            this.socketGateway.server.emit('UpdateRawWordDisplay', Variable.WordDisplay)\r\n                        }\r\n                    }\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_WordDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_WordDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_WordDisplay[j].idDevice && Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)]) {\r\n                                if (Variable.resultProjectScreen_WordDisplay[j].tag < Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)].length) {\r\n                                    if (parseInt(Variable.resultProjectScreen_WordDisplay[j].negative)) {\r\n                                        if (parseInt(Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]) > 32767) {\r\n                                            Variable.resultProjectScreen_WordDisplay[j].text = parseInt(Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]) - 65536\r\n                                        } else {\r\n                                            Variable.resultProjectScreen_WordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]\r\n                                        }\r\n                                    } else {\r\n                                        Variable.resultProjectScreen_WordDisplay[j].text = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_WordDisplay[j].idDevice)][Variable.resultProjectScreen_WordDisplay[j].tag]\r\n                                    }\r\n                                    haveChange = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_WordDisplay', Variable.resultProjectScreen_WordDisplay)\r\n                        }\r\n                    }\r\n                    //tagRotate BitDisplay\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultBitDisplay)) {\r\n                        for (let j = 0; j < Variable.resultBitDisplay.length; j++) {\r\n                            if (Variable.resultBitDisplay[j].idDevice) {\r\n                                if (Variable.resultBitDisplay[j].tagRotate !== 'undefined' && Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultBitDisplay[j].tagRotate <= Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)].length) {\r\n                                        Variable.resultBitDisplay[j].rotate = Variable.WordDisplay[parseInt(Variable.resultBitDisplay[j].idDevice)][Variable.resultBitDisplay[j].tagRotate]\r\n                                    }\r\n                                }\r\n                                haveChange = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateBitDisplay', Variable.resultBitDisplay)\r\n                        }\r\n                    }\r\n\r\n                    haveChange = false\r\n                    if (Array.isArray(Variable.resultProjectScreen_BitDisplay)) {\r\n                        for (let j = 0; j < Variable.resultProjectScreen_BitDisplay.length; j++) {\r\n                            if (Variable.resultProjectScreen_BitDisplay[j].idDevice) {\r\n                                if (Variable.resultProjectScreen_BitDisplay[j].tagRotate !== 'undefined' && Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)]) {\r\n                                    if (Variable.resultProjectScreen_BitDisplay[j].tagRotate <= Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)].length) {\r\n                                        Variable.resultProjectScreen_BitDisplay[j].rotate = Variable.WordDisplay[parseInt(Variable.resultProjectScreen_BitDisplay[j].idDevice)][Variable.resultProjectScreen_BitDisplay[j].tagRotate]\r\n                                    }\r\n                                }\r\n                                haveChange = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (haveChange) {\r\n                        if (this.socketGateway && this.socketGateway.server) {\r\n                            this.socketGateway.server.emit('UpdateScreen_BitDisplay', Variable.resultProjectScreen_BitDisplay)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Put, Delete, Body } from '@nestjs/common';\r\nimport { ScadaWordDisplayService } from './scada_word-display.service';\r\n\r\n@Controller('wordDisplay')\r\nexport class ScadaWordDisplayController {\r\n    constructor(\r\n        private readonly scadaWordDisplayService: ScadaWordDisplayService,\r\n    ) { }\r\n\r\n    @Get('/getdata')\r\n    getData() {\r\n        return this.scadaWordDisplayService.getData();\r\n    }\r\n    @Get('/getdataraw')\r\n    getDataRaw() {\r\n        return this.scadaWordDisplayService.getDataRaw();\r\n    }\r\n\r\n    @Post('/insert_wordDisplay')\r\n    insertWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.insertWordDisplay(requestBody);\r\n    }\r\n\r\n    @Put('/update_wordDisplay')\r\n    updateWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.updateWordDisplay(requestBody);\r\n    }\r\n\r\n    @Delete('/delete_wordDisplay')\r\n    deleteWordDisplay(@Body() requestBody) {\r\n        return this.scadaWordDisplayService.deleteWordDisplay(requestBody);\r\n    }\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity('WordDisplay')\r\nexport class WordDisplayEntity {\r\n    @PrimaryGeneratedColumn('uuid')\r\n    _id: string;\r\n\r\n    @Column({ nullable: true })\r\n    parent: string;\r\n\r\n    @Column({ nullable: true })\r\n    tag: string;\r\n\r\n    @Column({ nullable: true })\r\n    text: string;\r\n\r\n    @Column({ nullable: true })\r\n    left: number;\r\n\r\n    @Column({ nullable: true })\r\n    top: number;\r\n\r\n    @Column({ nullable: true })\r\n    width: number;\r\n\r\n    @Column({ nullable: true })\r\n    height: number;\r\n\r\n    @Column({ nullable: true })\r\n    fontSize: number;\r\n\r\n    @Column({ nullable: true })\r\n    noBorder: number;\r\n\r\n    @Column({ nullable: true })\r\n    idGroupControl: string;\r\n\r\n    @Column({ nullable: true })\r\n    unit: string;\r\n\r\n    @Column({ nullable: true })\r\n    divide: number;\r\n\r\n    @Column({ nullable: true })\r\n    colorText: string;\r\n\r\n    @Column({ nullable: true })\r\n    colorBackground: string;\r\n\r\n    @Column({ nullable: true })\r\n    negative: number;\r\n\r\n    @Column({ nullable: true })\r\n    idScreen: string;\r\n\r\n    @Column({ nullable: true })\r\n    idDevice: string;\r\n\r\n    @Column({ nullable: true })\r\n    zIndex: number;\r\n\r\n    @Column({ nullable: true })\r\n    borderRadius: number;\r\n\r\n    @Column({ nullable: true })\r\n    cssCode: string;\r\n}\r\n","import { Module } from '@nestjs/common';\nimport { ScadaWordDisplayController } from './scada_word-display.controller';\nimport { ScadaWordDisplayService } from './scada_word-display.service';\nimport { SocketIoModule } from '../socket_io/socket_io.module'\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { WordDisplayEntity } from './scada_word-display.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([WordDisplayEntity]), SocketIoModule],\n  controllers: [ScadaWordDisplayController],\n  providers: [ScadaWordDisplayService,]\n})\nexport class ScadaWordDisplayModule { }\n","import { Injectable, OnModuleInit } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { WordDisplayEntity } from './scada_word-display.entity';\r\nimport { SocketGateway } from '../socket_io/socket_io.gateway'\r\nconst Variable = require('../../Variable');\r\n\r\n@Injectable()\r\nexport class ScadaWordDisplayService implements OnModuleInit {\r\n    private intervalId: NodeJS.Timer;\r\n    constructor(\r\n        @InjectRepository(WordDisplayEntity)\r\n        private readonly wordDisplayRepository: Repository<WordDisplayEntity>,\r\n        private readonly socketGateway: SocketGateway,\r\n    ) { }\r\n\r\n    onModuleInit() {\r\n        // console.log('Module initialized WORDDISPLAY');\r\n        this.setupDataRefreshInterval();\r\n    }\r\n    private setupDataRefreshInterval() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(async () => {\r\n                await this.fetchDataAndUpdate();\r\n            }, 500);\r\n        }\r\n    }\r\n    private async fetchDataAndUpdate() {\r\n        try {\r\n            if (Variable.refreshDataWordDisplay) {\r\n                Variable.refreshDataWordDisplay = false;\r\n                // console.log('===============================refresh wordDisplay========================================');\r\n                try {\r\n                    Variable.resultWordDisplay = await this.wordDisplayRepository.find();\r\n                    if (this.socketGateway && this.socketGateway.server) {\r\n                        this.socketGateway.server.emit('UpdateWordDisplay', Variable.resultWordDisplay);\r\n                        Variable.OldWordDisplay = []\r\n                    }\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getData() {\r\n        return Variable.resultWordDisplay\r\n    }\r\n    getDataRaw() {\r\n        return Variable.WordDisplay\r\n    }\r\n\r\n    async insertWordDisplay(wordDisplayData: any): Promise<any> {\r\n        try {\r\n            wordDisplayData._id = 'a' + Math.random().toString(36)\r\n            wordDisplayData.text = 0\r\n            const newWordDisplay = this.wordDisplayRepository.create(wordDisplayData);\r\n            await this.wordDisplayRepository.save(newWordDisplay);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Add WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            console.log(error)\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async updateWordDisplay(updateData: any): Promise<any> {\r\n        try {\r\n            await this.wordDisplayRepository.update(updateData._id, updateData);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Update WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n\r\n    async deleteWordDisplay(wordDisplayId: string): Promise<any> {\r\n        try {\r\n            await this.wordDisplayRepository.delete(wordDisplayId);\r\n            Variable.refreshDataWordDisplay = true\r\n            return { result: 'success', message: 'Delete WordDisplay Success', data: {} };\r\n        } catch (error) {\r\n            return { result: 'error', data: {}, message: error.message };\r\n        }\r\n    }\r\n}\r\n","// src/socket.gateway.ts\r\nimport { WebSocketGateway, SubscribeMessage, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\r\nimport { Server, Socket } from 'socket.io';\r\nimport { MqttService } from '../mqtt/mqtt.service'\r\n\r\n@WebSocketGateway({ transports: ['websocket'], port: 1234 })\r\nexport class SocketGateway implements OnGatewayConnection, OnGatewayDisconnect {\r\n  constructor(\r\n    private readonly mqttService: MqttService\r\n\r\n  ) {\r\n\r\n  }\r\n\r\n  @WebSocketServer() server: Server;\r\n\r\n  handleConnection(client: Socket, ...args: any[]) {\r\n    const clientId = client.id;\r\n    // client.setMaxListeners(15);\r\n    console.log(`Client connected with ID: ${clientId}`);\r\n    // You can send the ID back to the client if needed\r\n  }\r\n\r\n  handleDisconnect(client: Socket) {\r\n    const clientId = client.id;\r\n    console.log(`Client disconnected with ID: ${clientId}`);\r\n\r\n    // Remove the 'message' event listener\r\n    // client.off('message', this.handleMessage);\r\n\r\n  }\r\n\r\n\r\n  @SubscribeMessage('Client-send-data')\r\n  handleMessage(client: any, payload: any): void {\r\n    this.mqttService.publish('Client-send-data', JSON.stringify(payload))\r\n  }\r\n}\r\n\r\n","import { Module } from '@nestjs/common';\r\nimport { SocketGateway } from './socket_io.gateway';\r\nimport { MqttModule } from '../mqtt/mqtt.module';\r\n@Module({\r\n    imports: [MqttModule],\r\n    providers: [SocketGateway],\r\n    exports: [SocketGateway],\r\n})\r\nexport class SocketIoModule { }\r\n","import { Controller, Get } from '@nestjs/common';\r\n\r\n@Controller('system')\r\nexport class SystemApiController {\r\n    @Get('nodered_port')\r\n    responsesocket() {\r\n        return ({ PORT: 8001 })\r\n        // this.socketGateway.server.emit('message', 'message');\r\n    }\r\n}\r\n\r\n","import { Module } from '@nestjs/common';\r\nimport { SystemApiController } from './system_api.controller';\nimport { SystemApiService } from './system_api.service';\n\r\n@Module({\n  controllers: [SystemApiController],\n  providers: [SystemApiService]\n})\r\nexport class SystemApiModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class SystemApiService {}\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/microservices\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"@nestjs/websockets\");","module.exports = require(\"@node-minify/core\");","module.exports = require(\"@node-minify/uglify-js\");","module.exports = require(\"argon2\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-validator\");","module.exports = require(\"dotenv\");","module.exports = require(\"events\");","module.exports = require(\"mqtt\");","module.exports = require(\"node-red\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"socket.io\");","module.exports = require(\"sqlite3\");","module.exports = require(\"systeminformation\");","module.exports = require(\"typeorm\");","module.exports = require(\"dgram\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nconst RED = require('node-red');\r\n\r\nimport * as path from 'path';\r\nconst FinsClient = require('../PLC/Lib/libFins/index');\r\nconst SubFunction = require('../SubFunction.js');\r\nconst Variable = require('../Variable.js');\r\nconst VariableSystem = require('../VariableSystem.js');\r\nconst LS_Admin = require('../LS_Admin.js');\r\n\r\n\r\nconst si = require('systeminformation');\r\nconst bcrypt = require('bcrypt');\r\nconst fs = require('fs');\r\nvar active = false\r\n// import { MicroserviceClientModule } from './microservice-client/microservice-client.module';\r\n// import { Transport, MicroserviceOptions } from '@nestjs/microservices';\r\nimport { ConfigService } from './config/config.service';\r\n\r\nfunction compareAsync(value1, value2) {\r\n  return new Promise((resolve, reject) => {\r\n    bcrypt.compare(value1, value2, (error, result) => {\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(result);\r\n      }\r\n    });\r\n  });\r\n}\r\nasync function checkActive(license) {\r\n  try {\r\n    const data = await si.system();\r\n    if (data.uuid !== '') {\r\n      const res = await compareAsync(data.uuid + '1101111010', license);\r\n      if (res === true) {\r\n        console.log('Check LICENSE OK');\r\n        return true;\r\n      } else {\r\n        console.log('Check LICENSE NG');\r\n        SubFunction.saveFeedbackFile('./Store/LicenseFeedback.json', data.uuid);\r\n        VariableSystem.uuid = data.uuid;\r\n        return false;\r\n      }\r\n    } else {\r\n      if (data.model === 'Docker Container') {\r\n        const containerId = fs.readFileSync('/proc/self/cgroup', 'utf-8')\r\n          .split('\\n')\r\n          .filter(line => line.includes('docker'))\r\n          .map(line => line.split('/').pop())\r\n          .shift();\r\n\r\n        const res = await compareAsync(containerId + '1101111010', license);\r\n        if (res === true) {\r\n          SubFunction.setLogServer(JSON.stringify('Check LICENSE OK'));\r\n          return true;\r\n        } else {\r\n          SubFunction.setLogServer(JSON.stringify('Check LICENSE NG'));\r\n          SubFunction.saveFeedbackFile('./Store/LicenseFeedback.json', containerId);\r\n          return false;\r\n        }\r\n      } else {\r\n        console.log('Can not get UUID')\r\n        return false\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n    SubFunction.setLogServer(JSON.stringify(error))\r\n    SubFunction.saveJsonFile('./Store/LicenseFeedback.json', error);\r\n    return false\r\n  }\r\n}\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    cors: true,\r\n  });\r\n\r\n  app.useGlobalPipes(new ValidationPipe())\r\n  const configService = app.get(ConfigService);\r\n  const license = configService.get('LICENSE');\r\n  const User_Nodered = configService.get('User_Nodered')\r\n  active = await checkActive(license)\r\n  if (active == true) {\r\n    VariableSystem.active = true\r\n    LS_Admin.active = true\r\n  }\r\n  // Create Node-RED instance\r\n  const settings = {\r\n    uiHost: '0.0.0.0',\r\n    httpAdminRoot: '/',\r\n    httpNodeRoot: '/api',\r\n    userDir: `${path.resolve(__dirname, '..')}/userDir`, // Customize the user directory\r\n    // userDir: 'D:/React/Nestjs/nest-js_server/userDir', // Customize the user directory\r\n    functionGlobalContext: {\r\n      VariableSystem: VariableSystem,\r\n      Variable: Variable,\r\n      FinsClient: FinsClient,\r\n      SubFunction: SubFunction,\r\n      sqlite3: require('sqlite3').verbose(),\r\n      active: active,\r\n      minify: require('@node-minify/core'),\r\n      uglifyJS: require('@node-minify/uglify-js'),\r\n    }, // Optional: Add global context\r\n\r\n    // nodesDir: './nodesDir',\r\n    flowFile: 'flows.json', // Specify the flow file\r\n\r\n    adminAuth: {\r\n      type: \"credentials\",\r\n      users: [{\r\n        username: \"admin\",\r\n        password: \"$2b$08$RsDv7szxDDyA8om0Naga0e3aQ4dicbhf3X7SIbatlP75XRVZo0I2u\",\r\n        permissions: \"*\"\r\n      }],\r\n      sessionExpiryTime: 43200\r\n    },\r\n    functionExternalModules: true,\r\n    credentialSecret: \"LeVanTinh\",\r\n  };\r\n  if (User_Nodered) {\r\n    const matches = JSON.parse(User_Nodered)\r\n    if (Array.isArray(matches)) {\r\n      let tempArr = []\r\n      matches.map(item => {\r\n        tempArr.push({\r\n          username: item.username,\r\n          password: item.password,\r\n          permissions: item.permissions\r\n        })\r\n      })\r\n      settings.adminAuth.users = settings.adminAuth.users.concat(matches);\r\n    }\r\n\r\n  }\r\n\r\n  RED.init(app.getHttpServer(), settings);\r\n  // Serve the Node-RED editor UI\r\n  app.use('/', RED.httpAdmin);\r\n  // Serve the Node-RED HTTP nodes API\r\n  app.use('/api', RED.httpNode);\r\n  // // Start Node-RED\r\n  RED.start();\r\n  console.log('================PORT================ ' + configService.get('PORT'))\r\n  await app.listen(configService.get('PORT'));\r\n\r\n  // Bootstrap the microservice client module\r\n  // const microserviceClientApp = await NestFactory.createMicroservice<MicroserviceOptions>(MicroserviceClientModule, {\r\n  //   transport: Transport.MQTT,\r\n  //   options: {\r\n  //     url: 'mqtt://localhost:1883',\r\n  //   },\r\n  // });\r\n  // await microserviceClientApp.listen()\r\n}\r\nbootstrap();\r\n"],"names":["module","exports","active","DefaultHostValues","host","port","DefaultOptions","timeout","DefaultFinsHeader","ICF","RSV","GCT","DNA","DA1","DA2","SNA","SA1","SA2","SID","Commands","CONTROLLER_STATUS_READ","MEMORY_AREA_READ","MEMORY_AREA_WRITE","MEMORY_AREA_FILL","RUN","STOP","FatalErrorData","SYSTEM_ERROR","IO_SETTING_ERROR","IO_POINT_OVERFLOW","CPU_BUS_ERROR","MEMORY_ERROR","NonFatalErrorData","PC_LINK_ERROR","HOST_LINK_ERROR","BATTERY_ERROR","REMOTE_IO_ERROR","SPECIAL_IO_UNIT_ERROR","IO_COLLATE_ERROR","Status","CPU_STANDBY","Modes","MONITOR","DEBUG","MemoryAreas","Errors","dgram","inherits","EventEmitter","constants","FinsClient","options","this","call","init","_compareArrays","a","b","length","i","_mergeArrays","array","flat","l","type","Object","prototype","toString","split","pop","shift","toLowerCase","concat","test","_keyFromValue","dict","value","keys","filter","key","_padHex","width","number","substr","_wordsToBytes","words","bytes","push","_translateMemoryAddress","memoryAddress","matches","match","decodedMemory","temp","_incrementSID","sid","_buildHeader","header","_buildPacket","raw","_getResponseType","buf","response","_processDefault","rinfo","command","slice","remotehost","address","_processStatusRead","status","mode","fatalErrorData","nonFatalErrorData","readInt16BE","statusCodes","runModes","_processMemoryAreaRead","data","values","_processReply","commands","join","_decodePacket","code","self","defaultHost","defaultOptions","socket","createSocket","responded","on","msg","emit","err","setTimeout","read","regsToRead","callback","packet","buffer","Buffer","send","write","dataToBeWritten","regsToWrite","fill","run","stop","close","fs","Variables","VariableSystem","saveLogData","LocalDB","serialize","tempText","newTempText","substring","json","result","message","Math","random","Date","now","parent","idDevice","typeObject","tag","previousValue","newValue","action","nameObject","user","console","log","refreshLogData","error","saveAlarmData","typeAlarm","alarmText","alarmAtOn","alarmAtOff","typeSnackBar","setLogServer","logServer","ReadWordOfPlcToByte","Start","LengthOfWord","Values","byteArray","index","byte","StringToAscii","str","Array","charCodeAt","arrOut","ReadBitOfPLC","WordStart","Number","j","ReadBitOfPLCSiemens","ReadWordOfPLC","ArrayTemp","isArray","ReadDWordOfPLCSiemens","LengthOfWord1","ReadDWordOfPLC","ConvertArray2Text","CheckChangeValue","Variable","OldVariable","val","undefined","CheckNegativeNumber","nb","getRandomInt","max","floor","saveJsonFile","path","dataStore","existsSync","writeFile","JSON","stringify","getJsonFile","cb","readFile","obj","parse","saveFeedbackFile","convertPosCobot","pos0","pos1","parseInt","from","readFloatBE","getIndexCobotWriteMB","indexBit","ReadStringOfPLC","LengthOfString","TempArr","String","fromCharCode","replace","ReadStringOfPLCModbus","ArrayString","jj","getDateTime","date","year","getFullYear","month","getMonth","day","getUTCDate","hour","getHours","min","getMinutes","sec","getSeconds","saveLog","file","text","appendFile","getDate","ReadReal2OfPLC","ArrayBuffer","ints","Uint16Array","floats","Float32Array","ReadStringOfPLC_NodeRed","ProcessSocketIO_Fins","NameCommand","isNaN","typeDevice","PLC_WriteUnSafe","PLC_LengthOfWordBitAdjust","TimeDelayWriteWordBitAdjust","OldWordBitAdjust","WordBitAdjust","mask","numberWordOfBitAdjust","PLC_WordStartBitAdjust","currentWordOfBitAdjust","COMMUNICATION_PLC_OMRON","enableLogData","SubFunction","currentUser","PLC_LengthOfWordWordAdjust","PLC_WordStartWordAdjust","heightValueDWordAdjust","lowValueDWordAdjust","myBuffer","arrResult","TextFieldInput","ProcessSocketIO_Modbus","indexElement","PLC_LengthOfWordElement","numberWordOfElement","PLC_WordStartElement","currentWordOfElement","Element","clientMB","writeSingleRegister","then","resp","BitAdjust","BitDisplay","COMMUNICATION_PLC_MODBUS","WordAdjust","DataWrite","writeMultipleRegisters","PLC_WordStartDWordAdjust","PLC_NumberWordInString","PLC_WordStartString","ProcessSocketIO_Modbus_Server","StoreModbusServerReg","PLC_WordStartComPC","PLC_Code_BitAdjust","PLC_Code_WordAdjust","PLC_Code_DWordAdjust","ProcessSocketIO_Profinet","COMMUNICATION_PLC_SIEMENS","writeItems","ProcessSocketIO_System","WordDisplay","DWordAdjust","DWordDisplay","turnOff","logs","oldLogServer","Plc_Connect_Status","Timer_Check_Connect_Status","namePallet","ValueCommunicationPLC","ListUserPass","WritePosCobot","resultImage","refreshDataSubScreenImageLibrary","refreshDataBitDisplayImageLibrary","refreshDataBitAdjustImageLibrary","resultBitDisplayImageLibrary","resultBitAdjustImageLibrary","refreshDataMapImageLibrary","resultSubScreenImageLibrary","resultMapImageLibrary","refreshDataElementImageLibrary","resultElementImageLibrary","refreshDataElement","refreshDataElementWord","refreshDataBitAdjust","refreshDataBitDisplay","refreshDataMap","refreshDataWordAdjust","refreshDataWordDisplay","refreshDataDWordAdjust","refreshDataDWordDisplay","refreshDataImage","refreshDataLabel","refreshDataString","refreshDataLine","refreshDataPoint","refreshDataPointPickPlace","refreshDataPanel","refreshDataChart","refreshDataProjectCall","refreshDataPalletizer","refreshDataPalletizerProduct","refreshDataTextField","refreshDataTextFieldInput","refreshDataGroupControl","refreshDataRealDisplay","refreshDataJoystick","haveChangeElement","haveChangeBitAdjust","haveChangeBitDisplay","haveChangeMap","haveChangeWordAdjust","haveChangeWordDisplay","haveChangeDWordAdjust","haveChangeDWordDisplay","haveChangeTextField","haveChangeTextFieldInput","haveChangeRealDisplay","haveChangeJoystick","StoreModbusServerBit","refreshDataPercent","resultPercent","Percent","OldPercent","haveChangePercent","OldElement","Map","OldBitDisplay","OldBitAdjust","OldWordDisplay","OldWordAdjust","OldDWordDisplay","OldDWordAdjust","TextField","OldTextField","OldTextFieldInput","RealDisplay","OldRealDisplay","IndexSocketInputSignal","IndexSocketBitAdjust","IndexSocketBitDisplay","IndexSocketWordDisplay","IndexSocketWordAdjust","IndexSocketDWordDisplay","IndexSocketDWordAdjust","CheckBitDisplay","CheckBitAdjust","CheckWordDisplay","CheckWordAdjust","CheckDWordDisplay","CheckDWordAdjust","resultlabel","resultline","resultElement","resultElementWord","resultBitDisplay","resultBitAdjust","resultWordDisplay","resultWordAdjust","resultDWordDisplay","resultDWordAdjust","resultPanel","resultChart","resultProjectCall","resultPalletizer","resultPalletizerProduct","resultTextField","resultTextFieldInput","resultRealDisplay","resultcustomeroperator","refreshdata","CustomerOperator","resultFlow","resultJoystick","refreshDataPosCobot","resultPosCobot","resultGroupControl","ListString","OldListString","haveChangeString","ResultString","storeListString","refreshData3D","refreshDataProduct","resultProduct","refreshDataUser","resultUser","LoadProductsToPLC","refreshDataGoal","resultGoal","refreshDataSampleRoute","resultSampleRoute","refreshDataFormularProject","resultFormularProject","resultFormularProjectConvertType","xlData","xlData2","refreshDataScaleProject","resultScaleProject","refreshDataSearchBox","resultSearchBox","refreshDataSearchBoxList","resultSearchBoxList","refreshDataReportScaleProject","resultReportScaleProject","refreshDataReportScaleProjectTonKho","resultReportScaleProjectTonKho","refreshDataProjectNanoenvi","resultProjectNanoenvi","resultProjectNanoenvi1","resultProjectNanoenvi2","resultProjectNanoenvi3","resultProjectNanoenvi4","refreshDataProjectStampingMachine","resultStampingMachineStartTime","ValueRotate","OldValueRotate","haveChangeValueRotate","StoreBoxPalletizer","StoragePallet","refreshStoragePallet","StoragePallet2","refreshStoragePallet2","StoragePalletManual","refreshStoragePalletManual","refreshScreen_Label","resultProjectScreen_Label","refreshScreen_Panel","resultProjectScreen_Panel","refreshScreen_Element","resultProjectScreen_Element","refreshScreen_BitDisplay","resultProjectScreen_BitDisplay","refreshScreen_BitAdjust","resultProjectScreen_BitAdjust","refreshScreen_WordDisplay","resultProjectScreen_WordDisplay","refreshScreen_WordAdjust","resultProjectScreen_WordAdjust","refreshScreen_DWordDisplay","resultProjectScreen_DWordDisplay","refreshScreen_DWordAdjust","resultProjectScreen_DWordAdjust","refreshScreen_String","resultProjectScreen_String","refreshScreen_TextFieldInput","resultProjectScreen_TextFieldInput","refreshScreen_Line","resultProjectScreen_Line","refreshSetupElement","resultSetupElement","refreshDataSetupAlarm","resultSetupAlarm","resultSetupAlarmTable","resultSetupAlarmTable_BitDisplay","resultSetupAlarmTable_BitAdjust","haveChangeArrBitAdjust","haveChangeArrBitAdjust_SetupAlarm","haveChangeArrBitDisplay","haveChangeArrBitDisplay_SetupAlarm","haveChangeArrWordAdjust","haveChangeArrWordDisplay","haveChangeArrDWordAdjust","haveChangeArrDWordDisplay","haveChangeArrElement","haveChangeArrString","haveChangeArrTextField","haveChangeArrTextFieldInput","haveChangeArrRealDisplay","clientMB_Writting","ComPC","refreshMemonic","haveChangeMemonic","resultMemonic","resultIconImageLibrary","refreshDataIconImageLibrary","resultImageBackgroundImageLibrary","refreshDataImageBackgroundImageLibrary","result3D","PositionMobileRobot","OldPositionMobileRobot","IO","PathLocalDB","ProjectPalletizer","COMMUNICATION_SERVER_TYPE","COMMUNICATION_MOBILE_ROBOT","COMMUNICATION_MOBILE_ROBOT_TIMER","COMMUNICATION_VNC","COMMUNICATION_VNC_INITIAL_DATA","COMMUNICATION_SOCKET_CLIENT","PLC_WordStartBitDisplay","PLC_LengthOfWordBitDisplay","PLC_BitStartBitDisplay","PLC_LengthOfBitBitDisplay","PLC_BitStartBitAdjust","PLC_LengthOfBitBitAdjust","PLC_WordStartWordDisplay","PLC_LengthOfWordWordDisplay","PLC_WordStartDWordDisplay","PLC_LengthOfWordDWordDisplay","PLC_LengthOfWordDWordAdjust","PLC_Length_ReadWrite","PLC_IntervalWriteData","PLC_WordStartRotate","PLC_LengthOfWordRotate","PLC_LengthOfWordComPC","PLC_Enable_String","PLC_LengthOfWordString","RefreshData","LS_Admin","AppController","constructor","socketGateway","scadaWordDisplayRefreshService","scadaWordAdjustRefreshService","scadaDWordDisplayRefreshService","scadaElementRefreshService","scadaBitAdjustRefreshService","scadaBitDisplayRefreshService","scadaDWordAdjustRefreshService","scadaStringRefreshService","scadaTextFieldRefreshService","scadaSetupAlarmRefreshService","setInterval","refreshData","server","process","exit","Controller","SocketGateway","ScadaWordDisplayRefreshService","ScadaWordAdjustRefreshService","ScadaDWordDisplayRefreshService","ScadaElementRefreshService","ScadaBitAdjustRefreshService","ScadaBitDisplayRefreshService","ScadaDWordAdjustRefreshService","ScadaStringRefreshService","ScadaTextFieldRefreshService","ScadaSetupAlarmRefreshService","AppModule","Module","imports","PostModule","NoteModule","SocketIoModule","SystemApiModule","ConfigModule","TypeOrmModule","forRootAsync","typeOrmConfigAsync","ScadaLabelModule","ScadaUserModule","ScadaPanelModule","Scada3DModule","ScadaBitAdjustModule","ScadaWordAdjustModule","ScadaDWordAdjustModule","ScadaBitDisplayModule","ScadaWordDisplayModule","ScadaDWordDisplayModule","ScadaBitDisplayImageLibraryModule","ScadaBitAdjustImageLibraryModule","ScadaIconImageLibraryModule","ScadaBackgroundImageLibraryModule","ScadaMapImageLibraryModule","ScadaMapModule","ScadaStringModule","ScadaTextFieldModule","ScadaLineModule","ScadaElementImageLibraryModule","ScadaElementModule","ScadaMemonicModule","MicroserviceClientModule","MqttModule","ScadaSetupAlarmModule","controllers","providers","ConfigService","envFilePath","__dirname","envConfig","dotenv","readFileSync","get","Injectable","inject","useFactory","async","configService","database","entities","BackgroundImageLibraryEntity","UserEntity","BitAdjustEntity","BitAdjustImageLibraryEntity","BitDisplayEntity","BitDisplayImageLibraryEntity","DWordAdjustEntity","DWordDisplayEntity","ElementEntity","ElementImageLibraryEntity","IconImageLibraryEntity","LabelEntity","LineEntity","MapEntity","MapImageLibraryEntity","MemonicEntity","PanelEntity","_3DEntity","StringEntity","TextFieldEntity","WordAdjustEntity","WordDisplayEntity","SetupAlarmEntity","synchronize","MicroserviceClientController","microserviceClientService","sendMessage","Get","MicroserviceClientService","client","ClientProxyFactory","create","transport","Transport","MQTT","toPromise","MqttService","onModuleInit","clientId","connectUrl","mqttClient","connect","clean","connectTimeout","reconnectPeriod","publish","topic","payload","Scada3DController","scada3DService","getData","insert3D","requestBody","update3D","delete3D","Post","Body","Put","Delete","Scada3DService","PrimaryGeneratedColumn","Column","nullable","Entity","forFeature","_3DRepository","setupDataRefreshInterval","intervalId","fetchDataAndUpdate","find","_3DData","_id","new3D","save","updateData","update","_3DId","delete","InjectRepository","Repository","ScadaBackgroundImageLibraryController","scadaBackgroundImageLibraryService","getDataQuery","screenName","upload","Query","ScadaBackgroundImageLibraryService","default","BackgroundImageLibraryRepository","query","name","img","enable","height","newBackgroundImageLibrary","id","ScadaBitAdjustImageLibraryController","scadaBitAdjustImageLibraryService","ScadaBitAdjustImageLibraryService","bitDisplayImageLibraryRepository","newBitAdjustImageLibrary","haveChange","tagBit","tagOn","tagOff","notOff","notOn","tagFault","resultLine","typeTag","ScadaBitAdjustController","scadaBitAdjustService","insertBitAdjust","updateBitAdjust","deleteBitAdjust","ScadaBitAdjustService","bitAdjustRepository","bitAdjustData","newBitAdjust","bitAdjustId","ScadaBitDisplayImageLibraryController","scadaBitDisplayImageLibraryService","ScadaBitDisplayImageLibraryService","newBitDisplayImageLibrary","ScadaBitDisplayController","scadaBitDisplayService","insertBitDisplay","updateBitDisplay","deleteBitDisplay","ScadaBitDisplayService","bitDisplayRepository","bitDisplayData","newBitDisplay","bitDisplayId","negative","ScadaDWordAdjustController","scadaDWordAdjustService","insertDWordAdjust","updateDWordAdjust","deleteDWordAdjust","ScadaDWordAdjustService","dwordAdjustRepository","dwordAdjustData","newDWordAdjust","dwordAdjustId","ScadaDWordDisplayController","scadaDWordDisplayService","insertDWordDisplay","updateDWordDisplay","deleteDWordDisplay","ScadaDWordDisplayService","dwordDisplayRepository","dwordDisplayData","newDWordDisplay","dwordDisplayId","ScadaElementImageLibraryController","scadaElementImageLibraryService","ScadaElementImageLibraryService","newElementImageLibrary","ScadaElementController","scadaElementService","insertElement","updateElement","deleteElement","ScadaElementService","ElementRepository","ElementData","newElement","ElementId","ScadaIconImageLibraryController","scadaIconImageLibraryService","ScadaIconImageLibraryService","newIconImageLibrary","ScadaLabelController","scadaLabelService","insertLabel","updateLabel","deleteLabel","ScadaLabelService","labelRepository","labelData","newLabel","labelId","ScadaLineController","scadaLineService","insertLine","updateLine","deleteLine","ScadaLineService","lineRepository","lineData","newLine","lineId","ScadaMapImageLibraryController","scadaMapImageLibraryService","ScadaMapImageLibraryService","newMapImageLibrary","ScadaMapController","scadaMapService","getPosition","insertMap","updateMap","deleteMap","ScadaMapService","mapRepository","resultMap","mapData","newMap","mapId","ScadaMemonicController","scadaMemonicService","insertMemonic","updateMemonic","deleteMemonic","ScadaMemonicService","memonicRepository","refreshDataMemonic","resultmemonic","memonicData","newMemonic","memonicId","ScadaPanelController","scadaPanelService","insertPanel","updatePanel","deletePanel","ScadaPanelService","panelRepository","panelData","newPanel","panelId","typeVariable","oldValue","ScadaSetupAlarmController","scadaSetupAlarmService","getDataSetupAlarmTable","insertSetupAlarm","updateSetupAlarm","deleteSetupAlarm","ScadaSetupAlarmService","setupAlarmRepository","setupAlarmData","newSetupAlarm","setupAlarmId","resultString","ScadaStringController","scadaStringService","insertString","updateString","deleteString","ScadaStringService","stringRepository","stringData","newString","stringId","ScadaTextFieldController","scadaTextFieldService","insertTextField","updateTextField","deleteTextField","ScadaTextFieldService","textFieldRepository","textFieldData","newTextField","textFieldId","AuthDTO","IsNotEmpty","IsString","ScadaUserController","scadaUserService","signup","body","signin","userCheck","verify","token","updateUser","ScadaUserService","JwtModule","register","global","secret","signOptions","expiresIn","JwtStrategy","userRepository","jwtService","userDTO","hashedPassword","argon","hash","password","newUser","levelUser","userInfo","createQueryBuilder","where","getOne","NotFoundException","ForbiddenException","signJwtToken","userId","sub","accessToken","signAsync","info","verifyAsync","JwtService","PassportStrategy","Strategy","super","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","validate","findOneBy","ScadaWordAdjustController","scadaWordAdjustService","insertWordAdjust","updateWordAdjust","deleteWordAdjust","ScadaWordAdjustService","wordAdjustRepository","wordAdjustData","newWordAdjust","wordAdjustId","tagRotate","rotate","ScadaWordDisplayController","scadaWordDisplayService","getDataRaw","insertWordDisplay","updateWordDisplay","deleteWordDisplay","ScadaWordDisplayService","wordDisplayRepository","wordDisplayData","newWordDisplay","wordDisplayId","mqttService","handleConnection","args","handleDisconnect","handleMessage","WebSocketServer","Server","SubscribeMessage","WebSocketGateway","transports","SystemApiController","responsesocket","PORT","SystemApiService","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","RED","si","bcrypt","compareAsync","value1","value2","Promise","resolve","reject","compare","app","NestFactory","cors","useGlobalPipes","ValidationPipe","license","User_Nodered","system","uuid","model","containerId","line","includes","map","checkActive","settings","uiHost","httpAdminRoot","httpNodeRoot","userDir","functionGlobalContext","sqlite3","minify","uglifyJS","flowFile","adminAuth","users","username","permissions","sessionExpiryTime","functionExternalModules","credentialSecret","tempArr","item","getHttpServer","use","httpAdmin","httpNode","start","listen","bootstrap"],"sourceRoot":""}