{"version":3,"sources":["modbus-flex-fc.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","topic","showStatusActivities","showErrors","showWarnings","connection","verboseLogging","fc","settings","verbose","responseCard","node","requestCard","statusText","verboseWarn","logMessage","modbusClient","adr","setNodeStatusWithTimeTo","isReadyForInput","id","client","getNode","isActive","statusValue","statusOptions","setNodeStatusProperties","newStatusText","status","fill","shape","text","onModbusInit","modbusRead","onModbusRegister","onModbusQueue","onModbusClose","failureMsg","sendMessage","warn","errorProtocolMsg","sendEmptyMsgOnFail","resp","msg","readFile","data","resolve","filapath","res","json","JSON","payload","input","sendingNodeId","from","err","logMsgError","unitid","onModbusReadError","getObjectId","message","removeNodeListenerFromModbusClient","removeListener","parseInt","isValidCustomFc","origMsgInput","messageId","onModbusReadDone","invalidPayloadIn","onModbusConnect","onModbusActive","onModbusError","isNotReadyForInput","onModbusBroken","Object","done","resetAllReadingTimer","on","response","isInactive","assign","msgToSend","buildNewMessageObject","emit","setNodeStatusTo","httpAdmin","mapPath","deregisterForModbus","registerForModbus","post","auth","needsPermission","req","fs","path","body","filename","existsSync","error","parse"],"mappings":"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","file":"../modbus-flex-fc.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n **/\n\n/**\n * Modbus Custom Function Code.\n * @module NodeRedModbusFlexFc\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusFlexFc (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.fc = config.fc\n    this.requestCard = config.requestCard\n    this.responseCard = config.responseCard\n\n    const node = this\n    node.statusText = 'waiting'\n    setNodeStatusWithTimeTo(node.statusText)\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Read -> ' + logMessage + ' address: ' + node.adr)\n      }\n    }\n\n    verboseWarn('open node ' + node.id)\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n\n    node.isReadyForInput = function () {\n      return (modbusClient.client && modbusClient.isActive())\n    }\n\n    node.isNotReadyForInput = function () {\n      return !node.isReadyForInput()\n    }\n\n    node.onModbusInit = function () {\n      setNodeStatusWithTimeTo('initialized')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusWithTimeTo('connected')\n      node.modbusRead()\n    }\n\n    node.onModbusRegister = function () {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('registered')\n      }\n\n      if (modbusClient.serialSendingAllowed) {\n        setNodeStatusWithTimeTo('connected')\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusWithTimeTo('active')\n    }\n\n    node.onModbusQueue = function () {\n      setNodeStatusWithTimeTo('queue')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusWithTimeTo('failure')\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusWithTimeTo('closed')\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusWithTimeTo('broken')\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading done')\n      }\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      node.errorProtocolMsg(err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, msg)\n    }\n\n    node.modbusRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusWithTimeTo('waiting')\n        return\n      }\n\n      const msg = {\n        topic: 'customFc',\n        from: node.name,\n        payload: {\n          unitid: parseInt(node.unitid),\n          fc: parseInt(node.fc, 16),\n          requestCard: node.requestCard,\n          responseCard: node.responseCard,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading')\n      }\n\n      modbusClient.emit('customModbusMessage', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.removeNodeListenerFromModbusClient = function () {\n      modbusClient.removeListener('mbinit', node.onModbusInit)\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\n      modbusClient.removeListener('mbactive', node.onModbusActive)\n      modbusClient.removeListener('mberror', node.onModbusError)\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\n    }\n\n    node.isValidCustomFc = function (origMsgInput) {\n      return origMsgInput.payload &&\n        origMsgInput.topic === 'customFc' &&\n        origMsgInput.payload.unitid &&\n        origMsgInput.payload.fc &&\n        origMsgInput.payload.requestCard &&\n        origMsgInput.payload.responseCard\n    }\n\n    node.buildNewMessageObject = function (origMsgInput) {\n      return (node.isValidCustomFc(origMsgInput))\n        ? origMsgInput\n        : {\n            topic: 'customFc',\n            payload: {\n              unitid: parseInt(node.unitid),\n              fc: parseInt(node.fc, 16),\n              requestCard: node.requestCard,\n              responseCard: node.responseCard,\n              from: node.name\n            }\n          }\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        verboseWarn('Invalid message on input.')\n        return\n      }\n\n      if (node.isNotReadyForInput()) {\n        verboseWarn('Inject while node is not ready for input.')\n        return\n      }\n\n      if (modbusClient.isInactive()) {\n        verboseWarn('You sent an input to inactive client. Please use initial delay on start or send data more slowly.')\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg) // keep it origin\n      try {\n        // const newMsg = node.buildNewMessageObject(node, origMsgInput)\n\n        const msgToSend = node.buildNewMessageObject(origMsgInput)\n\n        msgToSend.payload.messageId = mbCore.getObjectId()\n\n        modbusClient.emit('customModbusMessage', msgToSend, node.onModbusReadDone, node.onModbusReadError)\n\n        if (node.showStatusActivities) {\n          mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n    })\n\n    this.on('close', function (done) {\n      node.resetAllReadingTimer()\n      node.removeNodeListenerFromModbusClient()\n      setNodeStatusWithTimeTo('closed')\n      verboseWarn('close node ' + node.id)\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    function sendMessage (values, response, msg) {\n      const topic = msg.topic || node.topic\n\n      node.send({\n        topic,\n        payload: response,\n        input: msg,\n        sendingNodeId: node.id\n      })\n    }\n\n    function setNodeStatusWithTimeTo (statusValue) {\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      const statusText = node.statusText\n\n      const newStatusText = statusOptions.status\n      if (newStatusText !== statusText) {\n        node.status({\n          fill: statusOptions.fill,\n          shape: statusOptions.shape,\n          text: newStatusText\n        })\n      }\n    }\n\n    if (node.showStatusActivities) {\n      modbusClient.on('mbinit', node.onModbusInit)\n      modbusClient.on('mbqueue', node.onModbusQueue)\n    }\n\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbclosed', node.onModbusClose)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbregister', node.onModbusRegister)\n    modbusClient.on('mbderegister', node.onModbusClose)\n\n    modbusClient.registerForModbus(node)\n  }\n\n  RED.nodes.registerType('modbus-flex-fc', ModbusFlexFc)\n\n  RED.httpAdmin.post('/modbus/fc/si/:id', RED.auth.needsPermission('modbus.read'), function (req, res) {\n    const fs = require('fs')\n    const path = require('node:path')\n    const filapath = req.body.mapPath || './extras/argumentMaps/defaults/'\n    const filename = 'codes.json'\n    if (!fs.existsSync(path.resolve(filapath, filename))) {\n      return\n    }\n\n    fs.readFile(path.resolve(filapath, filename), (error, data) => {\n      if (error) res.json([error])\n\n      res.json(JSON.parse(data))\n    })\n  })\n}\n"]}