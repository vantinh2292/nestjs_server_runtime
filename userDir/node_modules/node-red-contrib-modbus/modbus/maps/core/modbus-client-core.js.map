{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","createMachine","states","new","on","INIT","BREAK","STOP","broken","initial","FAILURE","ACTIVATE","RECONNECT","reconnecting","init","OPENSERIAL","CONNECT","SWITCH","opened","CLOSE","connected","QUEUE","activated","READ","WRITE","queueing","EMPTY","empty","sending","reading","writing","failed","switch","stopped","NEW","getActualUnitId","node","msg","payload","Number","isInteger","unitid","parseInt","queueUnitId","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","SEND","getLogFunction","activateSendingOnSuccess","cb","cberr","resp","activateSending","then","err","stateService","send","activateSendingOnFailure","readModbusByFunctionCodeOne","address","quantity","coreClient","Error","message","modbusErrorHandling","readModbusByFunctionCodeTwo","closed","readModbusByFunctionCodeThree","readHoldingRegisters","readModbusByFunctionCodeFour","sendCustomFunctionCode","sendCustomFc","fc","requestCard","responseCard","nodeLog","internalDebugLog","customModbusMessage","delayTime","_port","_client","readable","setTimeout","bufferCommands","info","clientTimeout","readInputRegisters","connectClient","queueLog","JSON","stringify","state","actualServiceState","value","setUnitIdFromPayload","writeModbusByFunctionCodeFive","writeCoil","getID","clienttype","writeModbusByFunctionCodeFifteen","length","writeCoils","writeRegister","writeModbusByFunctionCodeSixteen","readModbusByFunctionCode","writeRegisters","writeModbus","writable","writeModbusByFunctionCodeSix","tcpHost","tcpPort","tcpType","setNewSerialNodeSettings","serialPort","serialBaudrate","serialDatabits","serialParity","serialType","serialAsciiResponseStartDelimiter","serialConnectionDelay","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","setNewTCPNodeSettings","connectorType","serialStopbits","module","exports"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022,2023,2024 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  // failure is a general gate point in states to jump between states\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: {\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\n      },\n      broken: {\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\n      },\n      reconnecting: {\n        on: { INIT: 'init', STOP: 'stopped' }\n      },\n      init: {\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      opened: {\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      connected: {\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      activated: {\n        on: {\n          READ: 'reading',\n          WRITE: 'writing',\n          QUEUE: 'queueing',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      queueing: {\n        on: {\n          ACTIVATE: 'activated',\n          SEND: 'sending',\n          READ: 'reading',\n          WRITE: 'writing',\n          EMPTY: 'empty',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id) || 0\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.sendCustomFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  // const nodeLog = deb.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  node.client.sendCustomFc(msg.payload.unitid, msg.payload.fc, msg.payload.requestCard, msg.payload.responseCard).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.customModbusMessage = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.sendCustomFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.writable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('WRITE')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'write msg',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      switch (parseInt(msg.payload.fc)) {\n        case 15: // FC: 15\n          coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n          break\n        case 5: // FC: 5\n          coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n          break\n        case 16: // FC: 16\n          coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n          break\n        case 6: // FC: 6\n          coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n          break\n        default:\n          coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n          nodeLog('Function Code Unknown %s', msg.payload.fc)\n          break\n      }\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.clienttype = 'tcp'\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.clienttype = 'serial'\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  // Make sure is parsed when string, otherwise just assign.\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\n  } else {\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\n  }\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  try {\n    let unitId = parseInt(msg.payload.unitId)\n    if (!node.checkUnitId(unitId, node.clienttype)) {\n      unitId = node.unit_id\n    }\n    node.unit_id = unitId\n  } catch (err) {\n    nodeLog(err.message)\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messageAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}