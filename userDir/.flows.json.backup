[
    {
        "id": "431c38a5e400a7b9",
        "type": "tab",
        "label": "Configure project",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2ad1d4be24cd3339",
        "type": "tab",
        "label": "FNIS - SANOFI",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a8a33a85dc004d84",
        "type": "tab",
        "label": "FINS - OMRON",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "42a759057180fe6e",
        "type": "tab",
        "label": "STAMPING MACHINE 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e074b9e578a8b694",
        "type": "tab",
        "label": "MODBUS - SCHNEIDER",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "954743b2d5841a73",
        "type": "tab",
        "label": "SIEMENS",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3faa7c0a18845ba4",
        "type": "tab",
        "label": "SOCKET CLIENT",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bd1c82177ed26c7b",
        "type": "tab",
        "label": "MQTT",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5e75956f527d5520",
        "type": "tab",
        "label": "VNC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3a4fb62dbb775101",
        "type": "tab",
        "label": "Temporature",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "23b8e3bff5be828e",
        "type": "tab",
        "label": "Mobile Robot - ATC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "47abba529caab914",
        "type": "tab",
        "label": "KimNamThinh",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "66f751f83d3177e2",
        "type": "tab",
        "label": "ROS",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0977f05f928479b5",
        "type": "tab",
        "label": "Mobile Robot + Vibration",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4af6b84a6d08816d",
        "type": "tab",
        "label": "Backup",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6585409d00105523",
        "type": "tab",
        "label": "Palletizer Design",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d0e9f96fb74481c8",
        "type": "tab",
        "label": "NJR HUNGKHANG P&G",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f510f1f7ca822efb",
        "type": "tab",
        "label": "NJR HUNGKHANG P&G OLD",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "779da15b8c7ae2d1",
        "type": "tab",
        "label": "LORA",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1b7ad694981eabe7",
        "type": "tab",
        "label": "Onsemi",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "eb4fd77fac3c21b7",
        "type": "tab",
        "label": "STAMPING MACHINE 2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "29edf33f7ef9dac1",
        "type": "tab",
        "label": "ATC_NEW_MOBILE ROBOT",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "be379b1fd0218d73",
        "type": "tab",
        "label": "Horizontal Machine",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "dc9cf18bb9eee563",
        "type": "tab",
        "label": "OMRON TRAINING",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec26103748a6d41f",
        "type": "group",
        "z": "2ad1d4be24cd3339",
        "name": "SANOFI LINE 2",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "a4190b99151730ba",
            "af25c7cb2fe10088",
            "577af06c0d7804ca",
            "9e61f2c37a4cff57",
            "690b89e8afc79a98",
            "4444b0791369ae4a",
            "6f0ee2bcfae2e453",
            "58cc434b14a3012d",
            "5b1134a43a1d0c2a",
            "3621f2216c6c3e49",
            "e1675043a508049d",
            "a4840b85bc31c0c1",
            "7d1e196b1bd370b1",
            "2e5485473c2a60d8",
            "e351c77281d1e31a",
            "b628342ab941079b",
            "549126025afeb38c",
            "16fc740fb9f75ee1",
            "7fec6be9eeac8c5b",
            "793ac26119266212",
            "1442c8343ccffb85",
            "81b6ba3a923cf17f",
            "abef3d02c27a6ee0",
            "bdb01e47118d32d3",
            "77e18822d59b9079",
            "21d81e6c66ed1393",
            "480320b35e595a29",
            "6a9342061e924f6f",
            "5b2fa7d7c84d806e",
            "bb8223e0bb3cd5ef",
            "2b6ad52aada01522",
            "40d929cb30687c06",
            "243870f403f3af10",
            "febb3b9bf49d4d69",
            "3f0feb587a6651d0",
            "336d11f5151bf7e8",
            "073d427132b3f033",
            "19bc506b49670f38",
            "81b9f244a2fde608",
            "6fbcdfcf4da2b2c9",
            "86368ca8c6136771",
            "25f82d2fea9db8b8",
            "10cda50cab788ea3",
            "41c5c04705fd88e0",
            "b53084964419a8e3",
            "dee6d0a75aa26b17",
            "0e24e974aded97be",
            "f39bacbb6b20c11e"
        ],
        "x": 54,
        "y": 1119,
        "w": 1372,
        "h": 1142
    },
    {
        "id": "839e4e70ec78e9dd",
        "type": "group",
        "z": "2ad1d4be24cd3339",
        "name": "SANOFI SCADA",
        "style": {
            "label": true,
            "color": "#ff7f7f",
            "fill": "#d1d1d1"
        },
        "nodes": [
            "572fcb536930135f",
            "ed4eef287511b770",
            "48a52dbeda448869",
            "b14e9990e85b95fe",
            "22ac8bfa859b7bd2",
            "50a14b80e4fa9073",
            "1146fc9609326f92",
            "485fa72996c0f66b",
            "e249c93a62fc84f6",
            "4e5b91785ff01bcd",
            "25272edabe2d0cd8",
            "daed6269b0c21208"
        ],
        "x": 94,
        "y": 3039,
        "w": 1192,
        "h": 302
    },
    {
        "id": "26a934531de559cb",
        "type": "group",
        "z": "e074b9e578a8b694",
        "name": "SCHNEIDER",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "6efc8bddcf8bf31e",
            "050863282e48c368",
            "022e9477c877dfd6",
            "a4529a8f8c185971",
            "8f588d0c2db4ecd7",
            "ee5a63c05397dfe4",
            "03beec45436d6e6a",
            "3d9c805824772753",
            "8816085acdb3e4fc",
            "13ea0c6a8eece8c0",
            "e0d956497d4ce948",
            "5711699ff8e9214c",
            "3c5be560c815d3a0",
            "31d85c681bae485d",
            "0fe630a0052ce371",
            "4f97267b54176e1c",
            "965cdb6965e66112",
            "a6bb809286db7973",
            "6924bf40862465e9",
            "d617ca8b960a7644",
            "0e390fc3008137c8",
            "dcabae5df95862af",
            "89cf28a2e1efa711"
        ],
        "x": 74,
        "y": 159
    },
    {
        "id": "9cd9cc101293bcb9",
        "type": "group",
        "z": "a8a33a85dc004d84",
        "name": "OMRON",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "edee7da87f0c052c",
            "43f157b0d49c25a2",
            "fe317fd257f90c7d",
            "808365a8f78d20bd",
            "0d5358bc118d6acf",
            "ea45700ac4d0533b",
            "9afd35da868ca5da",
            "8685d277cab074a8",
            "5c7525700e1f25ee",
            "2d0a3405ec3948ea",
            "897df20495d4617f",
            "327cc5fd38497ae6",
            "a9c42ea1cb5b9972",
            "f88dea74a641f61b"
        ],
        "x": 34,
        "y": 159
    },
    {
        "id": "349e5d319a527a1e",
        "type": "group",
        "z": "42a759057180fe6e",
        "name": "STAMPING MACHINE 1",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "4469193b9f397b59",
            "29edde1f60f2f225",
            "2a419cd75229dbf6",
            "65fffd4480918925",
            "68009e0522165b21",
            "698e87e3e6183ed7",
            "e60a2206e4e3506d",
            "7a776ccea47bfb94",
            "697eef8e2eb6c7d7",
            "37858ca3db69a2c4",
            "ba6c472e386be3c4",
            "cfb58821f7c529d2",
            "18e4c7e3ad8be02a",
            "f2b74b8804aa18c0",
            "f37458827ae8051a",
            "bd78face7fbab31a",
            "212b5663b9fce10f",
            "4e5bf3c94f4efcb6",
            "cd71515eb34a3f79",
            "9363e67b4d11aed7",
            "78f887e48698bbd5",
            "6d4f21347d403dee",
            "9b51cb9b0cc4f0bb",
            "d8750c4a09178286",
            "ba89a99d30b6b06b",
            "7b821c07daeeb784",
            "c014207d2f52b926",
            "a1da7a5dc247e312",
            "febdb106e0813787",
            "5aebed74a0310d4b",
            "0d7b49a79effc98c",
            "c8e232a14ce5f072",
            "41185f55c09cb717",
            "c805953d567b6b70",
            "ec51c826a41deae3",
            "81407bd4e8bd6f3f",
            "5257af19f7d6f127",
            "e817e5c9e1e73332",
            "634e9f2244e55dfa",
            "61ce6e6b1a425ac1",
            "29677101ea221536",
            "4923e350eb9767c0",
            "2147e1110c6b5217",
            "929058ece4e65074",
            "46df3cb8a9d305a9",
            "3907b493a56f3e91",
            "a69eb0a72aae32af",
            "87def5f3d57f3f36",
            "2e57761ba38a57e5",
            "a39eafe38eb787ca"
        ],
        "x": 34,
        "y": 159
    },
    {
        "id": "78cf7fc655ed93e8",
        "type": "group",
        "z": "3faa7c0a18845ba4",
        "name": "SOCKET CLIENT",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "804ff6d0f1d366ea",
            "13c032d5c51fc625",
            "d695e002f9e843b7",
            "48793e130e2c6e99",
            "f3afda3c9a4eda51",
            "4ae9cf1dcbe6fa8f",
            "f964f6c1fb0d09ee",
            "bb52601c56c7f706",
            "72fec31c407f7693",
            "bfa833c20f8df867",
            "845a936a56106e53",
            "24547fe44faf210b",
            "7a74f8417ce60ca6",
            "8ebde42a50e8b7cd",
            "bd2a7c8f4e830832",
            "80785d333e0ac505",
            "7ae2304b50ce3ff7",
            "18242fb27f6f1332",
            "0723b85a928e238e",
            "4a35aeb8a672c068",
            "06c723932f373e3b",
            "67819a568126b8e1",
            "1252fb3c254a8cae",
            "343d31bf73ab06fd"
        ],
        "x": 54,
        "y": 159
    },
    {
        "id": "0e37c16ae7548394",
        "type": "group",
        "z": "bd1c82177ed26c7b",
        "name": "NANOENVI",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "96fa87ba5e890e8b",
            "de8b8e598863fb6a",
            "f335f9a4eaf45efb",
            "b8a8829dd605159f",
            "059957828a8fb0cd",
            "3673c903e9c64124",
            "14e0e056f9767cca",
            "0ff20b1347d8bb49"
        ],
        "x": 54,
        "y": 19
    },
    {
        "id": "99feb79ae706dcc3",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "316c250389507abd",
            "ba5ecb86852daff1"
        ],
        "x": 938,
        "y": 33,
        "w": 704,
        "h": 374
    },
    {
        "id": "142adaa1d434d530",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2ed6ae3cc4114ecc",
            "3d362d4ed9b8216d"
        ],
        "x": 8,
        "y": 33,
        "w": 884,
        "h": 754
    },
    {
        "id": "093e1368e6904ed6",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "name": "Bcrypt Generator",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "e82db02fc80bbd06",
            "8a9dfe3e7072267c"
        ],
        "x": 114,
        "y": 779,
        "w": 652,
        "h": 82
    },
    {
        "id": "236e1697417ca0b5",
        "type": "group",
        "z": "954743b2d5841a73",
        "name": "SIEMENS",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "2bd8bc46a8d44141",
            "337f9b8848b780f9",
            "392c2d42e3fbe93a",
            "f42ce3f5142efbef",
            "8711b802adb0eedd",
            "c0a9359571f06cfb",
            "43694f9cab73a0cb",
            "82ade3db4dda3fcf",
            "45f3bb737f51afa6",
            "3af8d39fab9be663",
            "5ff59bca273fe1ec",
            "71fd1da20f1aa5c4",
            "4d4cac333f9b855f",
            "2593a45dbc1af179",
            "bcd6f6b50a9cb352",
            "c7e958d4f6e5734b",
            "e7aa6ce63c468b20",
            "bd916fdf03ea5304",
            "ac85b8f1afa12356",
            "6adefce197b3f0d8",
            "e03d802f1c222ab1",
            "82ddf873a7fde3a7",
            "ac51f15f7a4d2b67",
            "e9c6b5cac9632abb"
        ],
        "x": 34,
        "y": 159,
        "w": 1142,
        "h": 582
    },
    {
        "id": "b28dcdd5b42ee3dd",
        "type": "group",
        "z": "3a4fb62dbb775101",
        "name": "Chart_FH_X_Y_Distance",
        "style": {
            "label": true
        },
        "nodes": [
            "5b8f1fdddf945aa4",
            "76016330a6b4bf52",
            "5085894a038b08e0",
            "2a86f1e969a06e63",
            "6ef122f3d8775b1b",
            "6adf4d564285fc3b",
            "30a0ad3730d3872e",
            "49c73ee3dba3a9da",
            "0b9a1a90676e1d03",
            "5827d50f3574fc14"
        ],
        "x": 114,
        "y": 459,
        "w": 552,
        "h": 302
    },
    {
        "id": "ec0174097ba91509",
        "type": "group",
        "z": "3a4fb62dbb775101",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2ba55636f687aed8",
            "031d209dcd447906",
            "6bc8c3a142c865b2",
            "8cf60b694cc81ea3",
            "a720b9b87a321b16",
            "22c41aaa7b36b1ee",
            "2d7f9e62e9982287",
            "9dd0d86b6c4daadd",
            "6bb400d901a572d2",
            "e98030f710cfcf7e"
        ],
        "x": 34,
        "y": 199,
        "w": 852,
        "h": 242
    },
    {
        "id": "713a775c3896f049",
        "type": "group",
        "z": "2ad1d4be24cd3339",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "28d886eb910b03c7",
            "e4fd1263c3a838a8",
            "c42f66a816724b4f",
            "95db8527e89d8ccc",
            "5e2b4095b64e5727"
        ],
        "x": 334,
        "y": 19,
        "w": 712,
        "h": 122
    },
    {
        "id": "6f45e3bef14aebc9",
        "type": "group",
        "z": "a8a33a85dc004d84",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "4ad871f82e70b865",
            "5f1f2cd962a00c67",
            "51f13f878f4a74ba",
            "a480d8ce1881f94d",
            "43cf537471215e67"
        ],
        "x": 334,
        "y": 19
    },
    {
        "id": "d8b71a2917dadd69",
        "type": "group",
        "z": "42a759057180fe6e",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "0af1c06d15344620",
            "9d0c0853e34755a1",
            "56d692c23f948d8c",
            "d929cea69714e7df",
            "cecae109bd8195b8"
        ],
        "x": 434,
        "y": 19
    },
    {
        "id": "f1b28c33f2679f8c",
        "type": "group",
        "z": "e074b9e578a8b694",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "c596bfec2bf88b32",
            "ee7158825cd882ca",
            "063fa88250552ff8",
            "0c4126c4dcc3be21",
            "6b92e0d7a86a7abc"
        ],
        "x": 194,
        "y": 19
    },
    {
        "id": "b1c4bdfa88d3a751",
        "type": "group",
        "z": "954743b2d5841a73",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "681789a85326d81e",
            "2be6e29eadfbe455",
            "32f8930b180e3e06",
            "4118364c35ad8f8b",
            "235e6ca3775daf4b"
        ],
        "x": 254,
        "y": 19,
        "w": 712,
        "h": 122
    },
    {
        "id": "2177ec3a3443a10f",
        "type": "group",
        "z": "3faa7c0a18845ba4",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "73315489850bf2ac",
            "6f7e22642047c0e7",
            "7fe9e5cfb256deb7",
            "d498465a2b7ad4cc",
            "3d7257e64468b67c"
        ],
        "x": 234,
        "y": 19
    },
    {
        "id": "c6543ebf14069787",
        "type": "group",
        "z": "5e75956f527d5520",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "912c447eb476bf6b",
            "76ccabdc2ae2dba9",
            "72688111f63f5644",
            "caa8b2f5688c5ca8",
            "e3df02a54f7a23ee"
        ],
        "x": 114,
        "y": 19
    },
    {
        "id": "afc44b117d393bc5",
        "type": "group",
        "z": "3a4fb62dbb775101",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "3b2f10a3773b0251",
            "e31f2812ab8ff2f7",
            "fc2dd2156936ce86",
            "533de5d77941bc25",
            "52e2ba0508ef9a89"
        ],
        "x": 754,
        "y": 39,
        "w": 712,
        "h": 122
    },
    {
        "id": "df014b52f111839a",
        "type": "group",
        "z": "47abba529caab914",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "afd31322ace0399d",
            "3e833cc9a558a911",
            "ba55d9e7e5330f1f",
            "549b28dfb773b9c4",
            "2bcedc01e0fddbdd"
        ],
        "x": 184,
        "y": 19
    },
    {
        "id": "a450a02c836c3635",
        "type": "group",
        "z": "47abba529caab914",
        "name": "KNT",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "ea6cc81fb7cbede1",
            "6d9ae91acc83d195",
            "7f303d9dc2a2d3dc",
            "8224ef6b03b50c1e",
            "9631c1af9175002a",
            "110aeadb6a69ac8c",
            "6697041fae8f824a",
            "dc908b8bff0bade8",
            "7859e039859b0f58",
            "fa7068b6bff907ae",
            "f89ff9f30f48d7e4",
            "22dd6eb61db143ed",
            "af0e9b7fc1b539c0",
            "9b42654ef6790b29",
            "dceaaae3282065e4",
            "68118de93bf70bba"
        ],
        "x": 54,
        "y": 159
    },
    {
        "id": "218663b2a5d19084",
        "type": "group",
        "z": "0977f05f928479b5",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "0b16d6c56afbb98e",
            "200d74971c076e4a",
            "66ca7e52bfde0e22"
        ],
        "x": 194,
        "y": 79
    },
    {
        "id": "08e8020462ea38cf",
        "type": "group",
        "z": "0977f05f928479b5",
        "name": "MOBILE ROBOT - ATC",
        "style": {
            "stroke": "#777777",
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1"
        },
        "nodes": [
            "168b4005123c2d3d",
            "45c69032a6583479",
            "7091ba9bda1b4a4b",
            "eee6cce7114fce40",
            "1c51d0a6891dd532",
            "866471ca136692ef",
            "276d9e72023f5f7f",
            "087fa0c404449fa9",
            "ebdc351e778e18be",
            "a4a16a6237095976",
            "b6bac4958a2a1b76",
            "f7d6b9f3778dd26f",
            "d8392a02a0e8b494",
            "6d889ea24a77c21a",
            "c71df90ab3ee16d5",
            "a6f50ec5710fb86a",
            "4a1281615e3383d5",
            "0d73d215095e5e9f",
            "f1a599854fd75702"
        ],
        "x": 34,
        "y": 199
    },
    {
        "id": "5478c0916880e91b",
        "type": "group",
        "z": "66f751f83d3177e2",
        "name": "Get Topics",
        "style": {
            "label": true
        },
        "nodes": [
            "8f72b5cea0564397"
        ],
        "x": 454,
        "y": 539,
        "w": 172,
        "h": 82
    },
    {
        "id": "ca45f46128d7d755",
        "type": "group",
        "z": "66f751f83d3177e2",
        "name": "Service Client",
        "style": {
            "label": true
        },
        "nodes": [
            "fb9a24bc265ee7c1",
            "3fd8f204cbdff060",
            "4139a6f795a6307e",
            "7e931fa7a9a538b6"
        ],
        "x": 44,
        "y": 1179,
        "w": 872,
        "h": 122
    },
    {
        "id": "1d2c2333252922aa",
        "type": "group",
        "z": "66f751f83d3177e2",
        "name": "Service Server",
        "style": {
            "label": true
        },
        "nodes": [
            "c1b80b24fc3cc949",
            "7d95f294c481dae9"
        ],
        "x": 44,
        "y": 1039,
        "w": 452,
        "h": 122
    },
    {
        "id": "7aaed6807de5b587",
        "type": "group",
        "z": "66f751f83d3177e2",
        "name": "Publish",
        "style": {
            "label": true
        },
        "nodes": [
            "17a928293b14e8af",
            "06cd18ba89f1d401",
            "75f26f902c72f790"
        ],
        "x": 54,
        "y": 799,
        "w": 442,
        "h": 162
    },
    {
        "id": "12dc62c874dfc812",
        "type": "group",
        "z": "66f751f83d3177e2",
        "name": "Subscribe",
        "style": {
            "label": true
        },
        "nodes": [
            "c5e4ec5222fda778",
            "2e44736b294dc65b"
        ],
        "x": 44,
        "y": 659,
        "w": 392,
        "h": 122
    },
    {
        "id": "fb26cc953abc68a0",
        "type": "group",
        "z": "66f751f83d3177e2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "50fa822c5b2f79a1",
            "d37655926d069fe5"
        ],
        "x": 48,
        "y": 13,
        "w": 964,
        "h": 434
    },
    {
        "id": "3c7f51c94250a160",
        "type": "group",
        "z": "4af6b84a6d08816d",
        "name": "WebPage",
        "style": {
            "label": true
        },
        "nodes": [
            "d67e0fd9.7b50c8",
            "c3b5e5a5.8b846",
            "d8aaba9864fa627a",
            "54521c26a6521d4e",
            "b47e2309ec86f359",
            "31c3eaaaf0f8afdb",
            "b3a947ba6d40ea27",
            "5bb71f574750f411",
            "371430ef417f3297",
            "4910a18205483eab",
            "f0645ab4d8eb770a",
            "baf1ce3facda4e1b"
        ],
        "x": 54,
        "y": 79
    },
    {
        "id": "2a96d360fec28a0d",
        "type": "group",
        "z": "6585409d00105523",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f087f74ea8113b1e",
            "785daea97e6a78be",
            "d1023c457bb49408",
            "15a2771c691c4cf2",
            "a5f09c78fc170262",
            "2905b528b17c4341",
            "3a184488f1993074",
            "8bee56e6e288c48f",
            "7e2429cc8657202a",
            "5c538180fb669551",
            "c12e303cba35ded2",
            "6764c64d252fa77c",
            "5b0b0abdb3fae841",
            "9b1f44e76ab5699d",
            "e588074e5fdec97a",
            "04d6f17176df09ae",
            "7b14152e0be266c2",
            "b3d7c1ae8dc1eeab",
            "4710db08cf145d23",
            "79976f9f80e8b242",
            "9656c064bce7d7f7",
            "5017c1ede6ee76da",
            "179eb98a6ffd2e7f",
            "bd7e56dcc9b950dd",
            "6936879ffa70f5f5",
            "e7b319658c5a9ba8",
            "95dc48788ac09ff6"
        ],
        "x": 34,
        "y": 119
    },
    {
        "id": "cd22916470cf55ce",
        "type": "group",
        "z": "6585409d00105523",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "f16871e16c9ee91c",
            "c8c79e3e5fc5a012",
            "3d3b54c2e8972963"
        ],
        "x": 234,
        "y": 19
    },
    {
        "id": "a755a7804c5d6e44",
        "type": "group",
        "z": "f510f1f7ca822efb",
        "name": "NJR HUNGKHANG P&G - OLD",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "bf4b7a484f402017",
            "7f43d1fa24a7caa8",
            "63b3cc0f0e3ca403",
            "bef969a0aae1da6c",
            "1ca473ce5e8994fd",
            "13c6a29e60d14dfb",
            "639cae4fbd30488c",
            "7b92fcd21d04b459",
            "f9812a85106088da",
            "02617e83bdbc9ea0",
            "482871725db15514",
            "9c8604d636fb82ae",
            "4708383adcb810dc",
            "f94a0b8f8eeb6a42",
            "f4a16c8cb6b8d9b7",
            "8502bff12ee58673",
            "228d50a78efb1c8a",
            "55e854e05eb56bee",
            "aa9133c1d1ea84ba",
            "7984628c0ed3c7cd",
            "61693a014d238a63",
            "cd4637fe56eef535",
            "14e70cf2de976ad9",
            "589e71e83603d281",
            "1691638b7b3f806a",
            "63db9c1f2c9c99f3",
            "a5460e4cf1eeee2c",
            "3f86bc027e16654d",
            "438d8044a7e44953",
            "0f421d7a1fc58086",
            "ee6b580c8b9b7750",
            "bb8676fb287b45d5",
            "39a73c51715cda66",
            "290df3a26771a8f5",
            "844f5c25d614024e",
            "2165e67518be9262",
            "957e8603b1bd8061"
        ],
        "x": 74,
        "y": 139
    },
    {
        "id": "9dcf8f3eb6385c27",
        "type": "group",
        "z": "f510f1f7ca822efb",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "22b01f967e75e448",
            "b63e87db2d7a88dd",
            "e5abb99b3dc31fd6"
        ],
        "x": 289,
        "y": 19
    },
    {
        "id": "64591c1d722c40d8",
        "type": "group",
        "z": "f510f1f7ca822efb",
        "name": "Chart_FH_X_Y_Distance",
        "style": {
            "label": true
        },
        "nodes": [
            "dbe9ecb07340e2a0",
            "bcf6f414f25d06da",
            "bff1b13e0a9d0f27",
            "37ac10d42f70225c",
            "d005365093b23373",
            "319587df28071a3a",
            "40716a3e342c0cc9",
            "e183138f7df267e0",
            "5c5bd555db56c9ff",
            "f88d8f62786b711b"
        ],
        "x": 1354,
        "y": 139
    },
    {
        "id": "75888af0ef86d8f0",
        "type": "group",
        "z": "f510f1f7ca822efb",
        "name": "Chart_Speed_Pick_Y_Delay",
        "style": {
            "label": true
        },
        "nodes": [
            "f44b519026660ccf",
            "8838508c9bbb53b0",
            "64cf8ba4f98b649e",
            "f833b22ef3b3fa09",
            "e0ca2f620b3731a9",
            "698833e6af6f61ae",
            "6ae99af1a075e31d",
            "1104d1c4f0c773ad",
            "3f6d45ccc2b134bd"
        ],
        "x": 1354,
        "y": 579
    },
    {
        "id": "570fcd84b209c251",
        "type": "group",
        "z": "f510f1f7ca822efb",
        "name": "Chart_Speed_Place_Y_Delay",
        "style": {
            "label": true
        },
        "nodes": [
            "fa035a5ef6f2e7be",
            "785d75ba3b5ff41e",
            "6832581c1d99a83f",
            "edd01e19a8aec9b6",
            "2f0550697f6e1848",
            "1cd3bf560df1994f",
            "84ac291da52ada9e",
            "35ae3048494c893a",
            "81067c8fe3506263",
            "acd48cc77e341e14"
        ],
        "x": 1354,
        "y": 899
    },
    {
        "id": "f416411d832df525",
        "type": "group",
        "z": "779da15b8c7ae2d1",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "c36be3a9f84b5f06",
            "f207c801cda55263",
            "e24c5f092fc7a1b6"
        ],
        "x": 54,
        "y": 19,
        "w": 712,
        "h": 82
    },
    {
        "id": "01d106b766472626",
        "type": "group",
        "z": "779da15b8c7ae2d1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "822a854143aa8325",
            "36d4abc3cee943ae",
            "d961bfea2af6ce98",
            "e36a2d2ea24edb94",
            "164d5fe388fe14e4",
            "272d7a86cdde4419",
            "eb65671ae6ef78ca",
            "f9c6a45c45904237",
            "59538971be8d8b9b",
            "511c027dd56aed12",
            "6471d086a0682f75",
            "542f4e7c6658c269",
            "6f0f72d7253430d3",
            "e3d0c950a8f4df62",
            "7b279a7add5fa35f",
            "a41c074a1e410004",
            "aecc59ef79626635",
            "2978138f2405a274",
            "2ae7e397abe7595f"
        ],
        "x": 34,
        "y": 319,
        "w": 972,
        "h": 482
    },
    {
        "id": "709ecdfb8f6371a6",
        "type": "group",
        "z": "779da15b8c7ae2d1",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9f962b23e78316b4",
            "d8104d5b6cbf5a63",
            "0ad9a1f2dad5a639",
            "10572c1026e5300c"
        ],
        "x": 294,
        "y": 159,
        "w": 472,
        "h": 122
    },
    {
        "id": "a3fd25c506986fc3",
        "type": "group",
        "z": "d0e9f96fb74481c8",
        "name": "HUNG KHANG - P&G",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "0e4790e407e97a23",
            "3cf3a9f435b758ce",
            "a211d3e187f21bdb",
            "14762cf8aff0c1d0",
            "ccd453da1d616fc6",
            "f109a5f22704f527",
            "8ca2635ba246cbf7",
            "4ffe4a59cbdc03be",
            "03b3bed5c201745c",
            "e602812e741bbf2c",
            "eac05351215b2606",
            "ac650ad9b88f8f7a",
            "8c30bc6704553758",
            "7c2e30e931591f9a",
            "5d02ac71e75d294d",
            "962afab19a7329b6",
            "dc6276328cba9bec",
            "f91882196a763cda",
            "b4bedb3591d83f42",
            "200e9f7347678bc9",
            "35d61efb44c4f025",
            "dc2f9e04421e14e0",
            "1d973259e3cf3e21",
            "e9a2fe497a2350a2",
            "58f6b009566aada4",
            "8f8c834f5564da33",
            "e41b5bf1b715e631",
            "f4c29e5f11ba2f69",
            "448396e11bdd1194",
            "a94bf4746b41aa1a",
            "8b7bbce3617b6f7a",
            "1482af6a4a0f7760",
            "a4e6c17b6176f318",
            "d9322098ac175f68",
            "b4f9f3c6554dad2b",
            "9c64ebb53ee08f73",
            "88ad2a4a5a73957d",
            "786e43c013a3d5b6",
            "e4d7dea5ca506a80",
            "88c517e24e470974",
            "d3390266b239ecd4",
            "ee71915b87509cd1"
        ],
        "x": 54,
        "y": 159
    },
    {
        "id": "794b9132d61db2a9",
        "type": "group",
        "z": "d0e9f96fb74481c8",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "8af113a0b64f8c62",
            "1bc7c69831d072a7",
            "f1b2b553ba6c8688"
        ],
        "x": 269,
        "y": 19
    },
    {
        "id": "8a2a8c0c54d5b290",
        "type": "group",
        "z": "d0e9f96fb74481c8",
        "name": "Chart_FH_X_Y_Distance",
        "style": {
            "label": true
        },
        "nodes": [
            "b42404b94bb46800",
            "a851658eef1395b6",
            "6b9f7e163f8f5661",
            "56f61e799b994c95",
            "e41abedb1167caf9",
            "da5ce3add6d8d3bb",
            "8c4789cc6c60db85",
            "a965194ab4f903b1",
            "9a879fa9871f6049",
            "99d9d2036841d7d8"
        ],
        "x": 1334,
        "y": 139
    },
    {
        "id": "3c69f9fa4c371e5a",
        "type": "group",
        "z": "d0e9f96fb74481c8",
        "name": "Chart_Speed_Pick_Y_Delay",
        "style": {
            "label": true
        },
        "nodes": [
            "1f8cb1e945d0d7a3",
            "39a81fe5297c6804",
            "59866dad0eb0ddd2",
            "3573eba30adf7cf0",
            "077cad6da5bc6a68",
            "333ace1f828c4740",
            "26da11d4de13e640",
            "ff94e7f64733f201",
            "ab3d7b8368871aef"
        ],
        "x": 1334,
        "y": 579
    },
    {
        "id": "028939c6ca6b3391",
        "type": "group",
        "z": "d0e9f96fb74481c8",
        "name": "Chart_Speed_Place_Y_Delay",
        "style": {
            "label": true
        },
        "nodes": [
            "93b4405a6f3596c6",
            "e7a1eb8f7e6b3048",
            "b0199decd5707d91",
            "677571ef50f4e4f8",
            "f3100f2c2d7bdcad",
            "06170f95dff9300e",
            "0d3b6c4f6685481b",
            "53e082478178c3c3",
            "672d413b96767abb",
            "86ee65a0e3a9459e"
        ],
        "x": 1334,
        "y": 899
    },
    {
        "id": "8ba581d1f5cc3587",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "4c6114d72eb42c57",
            "e77d63c3f95572be",
            "bbae8bbe4c20fa54",
            "0426d01d2c56646b",
            "999a572daa0af581"
        ],
        "x": 214,
        "y": -1
    },
    {
        "id": "e4a43d414cf5097e",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "WEB SCADA",
        "style": {
            "label": true
        },
        "nodes": [
            "7f0278bd80cf96af",
            "fa8a1d9198f43e65",
            "3fbf872d38fbde7d",
            "2d8ea667c2f1670b",
            "c841317756936609",
            "a00f9e7f04565e6c",
            "fc0db50c136a8b8e",
            "1be241831e56d9f6",
            "e2d93d181b15d559",
            "b430b6a8f3637013",
            "5feea87067702117",
            "06d163de7318ad77",
            "4ee20260664e7ea9",
            "f255aae464aff54e",
            "bf661f757f45f0df",
            "154d0fd7d0f030c6",
            "a2171060a0139adc",
            "890b11abed38340f",
            "e26c4ca0845677fa",
            "6a6db89724329972",
            "2a1ee6d3eb2a8ecd",
            "7f2d68b4895d115b",
            "601719ecbcc94b31",
            "8c9726027d11d166",
            "34c41670ae601ee0",
            "112bbe05c35cad45",
            "f850357e24d88b5d",
            "2d4602dec1e1475f",
            "967c0138f04e50f7",
            "cfb0ef9521eaad03",
            "8d10e50e1359a8ea",
            "d373ae1e27ac4218",
            "3c2dd97e0413fd41",
            "809582dc70f1d859",
            "a78d7ebe4aca8f9f",
            "7b9b99e359f4421a",
            "88dbbeae4a04b11a",
            "321817ac5eee12c8",
            "ec42fb12c40655a5"
        ],
        "x": 34,
        "y": 959
    },
    {
        "id": "7651265a321625fc",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "name": "ADMIN CONFIG SERVER",
        "style": {
            "label": true
        },
        "nodes": [
            "930481ce917d41a0",
            "c5a09a1bef7630b7",
            "584e13ad301a0178",
            "deb180cdeb25358b"
        ],
        "x": 174,
        "y": 879,
        "w": 512,
        "h": 122
    },
    {
        "id": "cc8513dc89331754",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "785f1656f370845b",
            "c2414429f4310a0f",
            "d05844df926a4a22"
        ],
        "x": 114,
        "y": 19
    },
    {
        "id": "1fa6028c4a3f161f",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "MOBILE ROBOT - ATC",
        "style": {
            "stroke": "#777777",
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1"
        },
        "nodes": [
            "97fa50c5ad09e681",
            "d23b0e7b3cf75dc0",
            "46205ebb911caf78",
            "940543cbfaebf661",
            "f6c5519a79fa78b1",
            "56b80b9803fa622c",
            "4bbfa1a3810ba03b",
            "6cbf718f847ef3a2",
            "63c4ea18e56e4940",
            "c2798da9c47791bb",
            "389b0a27c2819156",
            "d8226213f97f584d",
            "8fceb7c5de8f5b00",
            "d12d5d5c94de3dc3",
            "ee2d2de592154a6a"
        ],
        "x": 34,
        "y": 1299
    },
    {
        "id": "46688d17445956e0",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "5d50c0d8461992d1",
            "46585e10676f6bfe",
            "74e55d48bab6967a",
            "9fa5852447d6efd5",
            "2df228c84a82bb56",
            "e65d60e7e075b791",
            "d9a82521d9648b0f",
            "02237247e5ac9c2a",
            "66e6d2f5bff7dc17",
            "a8650f5f39367e18",
            "c79fcb12161c52b8",
            "5fd02bf4fa95b41f",
            "ea8448baf509ab1e",
            "e61a4eb1033cf61c",
            "82886f2120984a6f",
            "a91de1923d6c6165",
            "eaf9b53fdcbc5861",
            "a4a4ab9c72f71825"
        ],
        "x": 34,
        "y": 119
    },
    {
        "id": "749622da01263839",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "Select Product In LINE",
        "style": {
            "label": true
        },
        "nodes": [
            "f7bd10b6af238bfb",
            "f953568f7474e104",
            "1ccce117771c9577"
        ],
        "x": 34,
        "y": 379
    },
    {
        "id": "48b8b4f0ce578c6e",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "Select Product In Warehouse",
        "style": {
            "label": true
        },
        "nodes": [
            "4998fdc309a01bf6",
            "0dbbd49d8b980d22",
            "c3c1672020859e9d",
            "d892f52b1c3265d4",
            "0d031bfcf2006181",
            "6a063207e2759c85",
            "a3ebe50a60b351c7",
            "551bfe7691d9436d",
            "91d609cf113eddf2",
            "9ba95ccded4c2d69"
        ],
        "x": 34,
        "y": 659
    },
    {
        "id": "ec79efe71fa89d6b",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "Product Select Prepare To Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "afe82b308afbb908",
            "da22b64db09b9cae",
            "eda4597ec3f9e859",
            "756496b4080ab274",
            "bd898fa67a842f21",
            "d67d1dcf7702f7b2",
            "2dd662f8a7818429",
            "59cd2aa513d28f82"
        ],
        "x": 34,
        "y": 839
    },
    {
        "id": "eb31bb409bdd7df8",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "Product Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "f46d13cb8fef7659",
            "100f8033bf74019e",
            "77471e7c443acca7",
            "7306f8e6182d113d",
            "831fa4c7394588ba",
            "7130352bb3e34383",
            "1bb52bb6b314ded8",
            "df422be2b56ae267",
            "7652590b4b30338f",
            "ba775289b7087b2b",
            "e0f95d5dccb03a02"
        ],
        "x": 34,
        "y": 1019
    },
    {
        "id": "edabee745831be2f",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "Product was Selected",
        "style": {
            "label": true
        },
        "nodes": [
            "b80b1fee37623c3b",
            "385214d912816e0e",
            "dccdf2ef32e1ec07",
            "cd28ac460fa4f904",
            "301959c0f3027c3d",
            "fdd86932e410c591",
            "a8c399039c985455",
            "1dc7a496337df51d"
        ],
        "x": 34,
        "y": 479
    },
    {
        "id": "2fd3886a6e1bdee1",
        "type": "group",
        "z": "23b8e3bff5be828e",
        "name": "REPORT STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "d63db6bb9a47c493",
            "2f416446fcfe811a",
            "da779c957c481ac2",
            "b1a93306622cef34",
            "50de66d014ae9970",
            "3acea174a416d611",
            "a49ea45e42bf9274",
            "8cc5153d0a2e67df",
            "7efaf0e61a96f923"
        ],
        "x": 34,
        "y": 2559
    },
    {
        "id": "44d6f1b348a7f04b",
        "type": "group",
        "z": "eb4fd77fac3c21b7",
        "name": "STAMPING MACHINE 2",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "c6c07197631e8ed2",
            "f7735460ca393cc3",
            "7cc57b57c48845cf",
            "a64da1f771b5f642",
            "d3bdcee805b91d1a",
            "323f28cb826e25cb",
            "efc35d5397e3efe2",
            "d6556be13806c23e",
            "40f0ed8d8aa3f036",
            "b064a73cf83e2e6b",
            "cf4dc1f210557a3d",
            "29de8f94f638a266",
            "f312704fdb8ad79b",
            "3935746ea35c43f4",
            "626b401876c0ee1b",
            "7c90e909d22e018f",
            "fe82d5fef606538f",
            "bb5a8555ba8fdacd",
            "ced9f94b4edef287",
            "e832181e23bc2800",
            "c12d0a1bf9d5e1d1",
            "d0b4d02a477ac580",
            "b49249984a5e6c9b",
            "4c5bde7bf3effa34",
            "258a37498aea1d59",
            "8bfc95318abba4a0",
            "f7f513ea969bef84",
            "2ca20810ce0f2aad",
            "86695bb03c41d2c4",
            "4b97f0b28806538e",
            "c999e0475c280f27",
            "7ed719cdef8111f6",
            "4654f2221bbe6404",
            "7ec09ca0561b94e2",
            "6bc27efb868076f4",
            "843b278561040fe2",
            "440633dbfe2f39be",
            "3c30b0f854afe839",
            "48fb6ecda0e9cdcf",
            "65e9258a3c0fa3ed"
        ],
        "x": 14,
        "y": 159
    },
    {
        "id": "ac63ef352477bb51",
        "type": "group",
        "z": "eb4fd77fac3c21b7",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "d6aaa1a845185c48",
            "210e1f6a610fcb59",
            "36450c246d0a7bea",
            "124568de071c9548",
            "a5836e5c12b5913b"
        ],
        "x": 414,
        "y": 19
    },
    {
        "id": "fad87c2db3f4f946",
        "type": "group",
        "z": "2ad1d4be24cd3339",
        "name": "Sanofi 1",
        "style": {
            "label": true
        },
        "nodes": [
            "c9f30c368a0beda3",
            "b16377e88b6fa88c",
            "8a3f3926c87151fc",
            "368a90782f17a4fe",
            "921dfdc76d9580e2",
            "e5e7b9327227c4d3",
            "fbc136fa3d1b1250",
            "15f2a2dec47cc457",
            "7330cce831b7fccf",
            "e5b690ae6083d5d9",
            "42c1b53ad91f4d8d",
            "6ecb74e5f8a613f4",
            "4fd3f449fc4e28e2",
            "866ad2c0ff88437a",
            "a8d47bfc4f45612e",
            "5e666dbb1756a1d0",
            "9a7d485d7cddc8c8",
            "55e328d82b8b386a",
            "642d09eba38c5959",
            "f689cff9dac5cde3",
            "50bb11af9c75d530",
            "3e2393cfde80368e",
            "23bfdbb9767fb7df",
            "8a99039e8d31f970",
            "a67a5c73b6f2ef6a",
            "ce0cefaa69d27415",
            "54a7ad67d4362648",
            "0409e16f9ef6fe53",
            "4ca93265645e4f32",
            "6edf323003328b87",
            "8c2d3190b4317cb2",
            "897b246ef26bb7e1",
            "cce10d8f7525b5f3",
            "92cd9b5e2b3f68d6",
            "81c51def3202bacc",
            "590d58d812161eea",
            "310dd7b286ed5192"
        ],
        "x": 54,
        "y": 199,
        "w": 1292,
        "h": 882
    },
    {
        "id": "1d3c3684a3d5afc4",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "9a41774ce7565c7e",
            "3ffe9238e3c4e744",
            "99648eba8bb4ee0f",
            "8f671c540b704de2",
            "c5fdb1fef9342516",
            "4fbe626ee77432aa",
            "fa6605db0a3ab9c1",
            "eacfa62fea2b14fd",
            "8cabe6bee9a3e899",
            "b0fd3ec07532025a",
            "d93bf42dc67dafe2",
            "6c3d1be22b773f37",
            "2bb95a4348f139f6",
            "dcbcbbaaf3e3eb53",
            "ebb5dc0e437ee002",
            "e0955777c6666f02",
            "f0943326675db96d",
            "6027c85f55d2d316"
        ],
        "x": 1574,
        "y": 199
    },
    {
        "id": "226c29311092da19",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "REPORT STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "26efaf67fb0f6e2e",
            "236d6abe6ace36a6",
            "eeebb12735b958cb",
            "114fc6e542f1da98",
            "d7bc3a0b483a7cae",
            "6e1950b541063494",
            "93931c6d73fe2ac7",
            "c7c7b213e2755e61",
            "45df16e37c18fe8d"
        ],
        "x": 74,
        "y": 2199
    },
    {
        "id": "2852a10f602f4efb",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "LINE",
        "style": {
            "label": true
        },
        "nodes": [
            "e2102b90014159fb",
            "d175505ceee4d7f3",
            "44c1c35336206a95",
            "99ea6b7990777126",
            "512f48bf5bda8a0f",
            "ef73c41a3e7459a6"
        ],
        "x": 28,
        "y": 153
    },
    {
        "id": "3fefec37553d17cc",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "Warehouse Prepare",
        "style": {
            "label": true
        },
        "nodes": [
            "9200a3ee62030db7",
            "f49ed4e59db9890a",
            "1ff2bb5e506ba5fa",
            "6c529453d89dd9d2"
        ],
        "x": 28,
        "y": 439
    },
    {
        "id": "47a7f0bc2181bb0c",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "name": "Warehouse Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "15aa5def3b3c81c0",
            "27fad634b9fb2a8e",
            "cf206efa74978fc6",
            "8e6256a8baa50e3d",
            "c5e0330a3b2d3261"
        ],
        "x": 28,
        "y": 673
    },
    {
        "id": "d1c9e5485baaea1f",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "147280e57a5418dd",
            "c9cb3b80e7e5525f",
            "d371d7e6bf025ed9",
            "c1f993d7aed5bec2",
            "3ee0491334e5f834"
        ],
        "x": 194,
        "y": 19
    },
    {
        "id": "0701920227a2a010",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "WEB SCADA",
        "style": {
            "label": true
        },
        "nodes": [
            "bb6957b22e2a94a7",
            "f6f8cb4430a237da",
            "e27fa5bc30c85e5e",
            "3a6128ad576f3d2d",
            "6f2a67694464ebf4",
            "b7134d9cc532d6f7",
            "e1a1ddf23cdc99c7",
            "ae1980447d5fc580",
            "f83e87a975349a8a",
            "e870ce443b09a927",
            "5289b68116b8b3f2",
            "b75afc4d440becdd",
            "1180af2a659ef115",
            "ea5119662f10a82e",
            "84b7f26e089e77a0",
            "abb35537729b9a5f",
            "5d6ae17588b0a863",
            "fb90a6dd12255682",
            "dce469c0b1f3c1ad",
            "faf73ea841b3841b",
            "f607309fd8e783f8",
            "ae5e42197c7aaa6e",
            "91422f8ab0b926c2",
            "3498fe6eeed2648f",
            "1fba7794f2ca3107",
            "6c8fa6f089aabd67",
            "e1e69ef389f36cef",
            "b38f5a8e2f8249dd",
            "d39549cfe282b938",
            "fa4e5e907340e595",
            "22f80be43047219d",
            "38e7f47dd2718755",
            "9526191d69be5bac",
            "ae3f3f3b1b742969",
            "fb7693bc2e58e146",
            "f6c96055302ae46e",
            "42f4f9edc409d7b4",
            "21c4bcda39360c32",
            "f17e3341c1a74291",
            "be60e7172e723608",
            "13855825f1be951b",
            "c61ba1de490ee524"
        ],
        "x": 34,
        "y": 979
    },
    {
        "id": "b72343ba88a7866a",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "d3e37cf31d06ad49",
            "d4917ca6e4293e36",
            "f82214ad9e0bce35",
            "1976017552023020",
            "141c3a2c194918ff",
            "2d90266c778154a1",
            "7e91aa8e9de1b182",
            "ac88e180247c0f93",
            "f5ccfde39f9e29f0",
            "381eb58bc3ad2a84",
            "bd5f81dd59194826",
            "d625418e8e89d5e4",
            "be3cdffc243c02c6",
            "820701375fd01b50",
            "d561e8a1ca6296db",
            "9f73db932a6a9d3a",
            "53f67c6bc33f5cdb",
            "48211b5b254fde4d"
        ],
        "x": 1554,
        "y": 219
    },
    {
        "id": "e472ca43490ab384",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "REPORT STORE",
        "style": {
            "label": true
        },
        "nodes": [
            "1643c2ef0ed9ba07",
            "66d9bebc9f6603c2",
            "76bfcdbe1eeaf780",
            "63f940812064b0be",
            "27d9b4926f3ee758",
            "3b933a192530fb40",
            "a6c3f2ec4f238b2b",
            "5992cfac3c813d62",
            "2251c0d3ba177727"
        ],
        "x": 54,
        "y": 2219
    },
    {
        "id": "636a955403559330",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "LINE",
        "style": {
            "label": true
        },
        "nodes": [
            "929986aa304a623d",
            "6d1c4fc40e355d23",
            "e522c6a5db1d4a41",
            "503e713a1cc17497",
            "0ae961d5e0851921",
            "9a86a7c8a393028e"
        ],
        "x": 8,
        "y": 173
    },
    {
        "id": "0c53561c896c5a45",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "Warehouse Prepare",
        "style": {
            "label": true
        },
        "nodes": [
            "bd41262ff7e1b09a",
            "8bd49842fb7495f4",
            "9ddc234892167110",
            "6dc263d56b9951be"
        ],
        "x": 8,
        "y": 459
    },
    {
        "id": "7ce82893c2287b5a",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "name": "Warehouse Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "10bca16ca2a742e0",
            "90743a804a0bfb9d",
            "a3b4398076bf26e6",
            "036af4e858331199",
            "be6356135edbb457"
        ],
        "x": 8,
        "y": 733
    },
    {
        "id": "9770913c45c00cc4",
        "type": "group",
        "z": "be379b1fd0218d73",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "6b97064f7f39a0ec",
            "09bb1d915411dbe9",
            "dbb92c238194206b",
            "36f325d438f1a29f",
            "1b2769c93659f9b4"
        ],
        "x": 214,
        "y": 19,
        "w": 712,
        "h": 122
    },
    {
        "id": "20e222a9da1c8e38",
        "type": "group",
        "z": "be379b1fd0218d73",
        "name": "WEB SCADA",
        "style": {
            "label": true
        },
        "nodes": [
            "5f598560a0ec8884",
            "89825ba07d8647a0",
            "4739c462039b14a0",
            "24bf40a5a95c3625",
            "03921dea6c56d8af",
            "b3187791683db206",
            "3a1e46be2607ab76",
            "6ac55fa85a7bcd17",
            "f0285228168a1ae0",
            "16e4a86999d9f82a",
            "af4107680aa9cfe9",
            "36a7f07c80351c1f",
            "4070c8996996fd09",
            "04aad713c8b3f202",
            "aec977e3cda21ecb",
            "465acacf517b6a24",
            "5d83c9eda0bcfb1b",
            "0c983ae58f488bda",
            "883488f3e0f9bc50",
            "7773a27f099fd10a",
            "320d8016baa540c7",
            "e814b582bfb4a119",
            "aa5d2768851214f1",
            "d7b754465fa89f45",
            "5d5b9fadb855fca1"
        ],
        "x": 14,
        "y": 159,
        "w": 1212,
        "h": 562
    },
    {
        "id": "885fafb2509378d2",
        "type": "group",
        "z": "dc9cf18bb9eee563",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "f79366ec3fbad9e2",
            "04328bba2406a5aa",
            "3e4279eee0e9ab6c",
            "0d55e9c2c5fb6bc5",
            "d347390626620809"
        ],
        "x": 74,
        "y": 19,
        "w": 712,
        "h": 122
    },
    {
        "id": "7d66dde138ce9662",
        "type": "group",
        "z": "dc9cf18bb9eee563",
        "name": "WEB SCADA",
        "style": {
            "label": true
        },
        "nodes": [
            "7d83c61ce99a5e56",
            "1a5919b185482646",
            "28c19cb31c2ce0ca",
            "ba79835f165af39f",
            "6f2947f55dbe82ab",
            "57cb8b154b594e5a",
            "4329ad05d76adabe",
            "5be0a3dc751b1f66",
            "aa4c7b314af1c6a0",
            "a7a7ba75b3b3c70f",
            "037526c6a8a2e2c5",
            "f9d0ac47f1caa116",
            "164af52a80c318ee",
            "8b188171645d6e50",
            "2daf16f707a2c111",
            "5e2c96f2f0a5e7ac",
            "15c459080127cb65",
            "30f9ecc03c033b18",
            "016b2c6eecb919f1",
            "7f512ba8e6c36ac0",
            "e3af69123c46daca",
            "d02aabbbee0364bc",
            "a1ba240e31b7e419",
            "87335bfeb0f6e49f",
            "50b6cd690c732a24",
            "6b4d70a2d4f48f54",
            "b24f2841bb3c7811",
            "c99fde83c01dd48b",
            "e6ff22fa83d9522a",
            "cbd5e55d8dd25db6",
            "96f3b67463449880",
            "ced1b50a48001690",
            "901e1b866a4b5a22"
        ],
        "x": 4,
        "y": 159,
        "w": 1002,
        "h": 702
    },
    {
        "id": "c4010d7ec8520bed",
        "type": "group",
        "z": "eb4fd77fac3c21b7",
        "name": "bk 02/01/2024",
        "style": {
            "label": true
        },
        "nodes": [
            "47cb4f58cfa1de89",
            "3e5742ae25585da5",
            "bfb8bbe428507573",
            "335edeeb551c66d5",
            "e0e2da728d67d292",
            "8478f788193c03ca",
            "a8159c0a445f9175",
            "eb039691675f9329",
            "14067cbc18d51a81",
            "09f9d336d12ce721",
            "591ab93028b7338c",
            "dfe6b837d729ac09"
        ],
        "x": 48,
        "y": 1433
    },
    {
        "id": "aa367b78b9d27788",
        "type": "group",
        "z": "dc9cf18bb9eee563",
        "name": "Debug",
        "style": {
            "label": true
        },
        "nodes": [
            "c90e2bfdff612558",
            "41ec08af12443e92",
            "b9ade0b955d0e967",
            "38f74cb5b889df58",
            "70d074262fa985dd",
            "83b4978e5fae15f8",
            "14e7cf4b6e13d14d",
            "d452ecf024b97db4",
            "a50a38bf237553d1"
        ],
        "x": 14,
        "y": 1079,
        "w": 552,
        "h": 162
    },
    {
        "id": "1056a6713e893663",
        "type": "group",
        "z": "dc9cf18bb9eee563",
        "name": "Socket Communication",
        "style": {
            "label": true
        },
        "nodes": [
            "0f7f09d7383af7a1",
            "bae1b5a5c43184d4",
            "0ff0bd740ca9b961",
            "19192884c792fb1f"
        ],
        "x": 14,
        "y": 919,
        "w": 492,
        "h": 142
    },
    {
        "id": "50fa822c5b2f79a1",
        "type": "group",
        "z": "66f751f83d3177e2",
        "g": "fb26cc953abc68a0",
        "name": "ROS 1",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "67f7a338d82bc089",
            "f7690a19b554fbbe",
            "0d25c3e5ed96f52b",
            "b1c90685a37c1727",
            "618181a769f8692e",
            "99df56687aa8d43a",
            "2840967bb76950a0",
            "d79e247f7350c63f",
            "f5e664e70e4f268d"
        ],
        "x": 74,
        "y": 179,
        "w": 912,
        "h": 242
    },
    {
        "id": "d37655926d069fe5",
        "type": "group",
        "z": "66f751f83d3177e2",
        "g": "fb26cc953abc68a0",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "6eb33e01f4113560",
            "d99a57302e06a1e2",
            "856aefc157b41b14",
            "d1455fc922ab3cef",
            "80b42482218ec95d"
        ],
        "x": 174,
        "y": 39,
        "w": 712,
        "h": 122
    },
    {
        "id": "316c250389507abd",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "g": "99feb79ae706dcc3",
        "name": "READ CONFIG DEFAULT",
        "style": {
            "label": true,
            "fill": "#d1d1d1",
            "color": "#ff0000"
        },
        "nodes": [
            "2396bfe8a4f22a28",
            "41c5abc2b8333248",
            "931ff724bfdb20fb",
            "e06c1381ecd84ac7",
            "4a1375a5a4d6151c"
        ],
        "x": 974,
        "y": 59,
        "w": 632,
        "h": 142
    },
    {
        "id": "ba5ecb86852daff1",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "g": "99feb79ae706dcc3",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "3470ba82c55069fb",
            "13aa4bf8c91d02e6",
            "956e5cfef4213989",
            "7152650d2a36016d",
            "91e81f64e63afe6c",
            "f87685720d63e90f"
        ],
        "x": 964,
        "y": 239,
        "w": 652,
        "h": 142
    },
    {
        "id": "2ed6ae3cc4114ecc",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "g": "142adaa1d434d530",
        "name": "BUILD PACKAGE",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#777777",
            "color": "#ff0000"
        },
        "nodes": [
            "a0b17f03550b6633",
            "3be69e4d8b589fd6",
            "768af44e2f7e7373",
            "35cb07e15c06824e",
            "e2c1221a2a43881d",
            "b2db2df9529760b6",
            "12653a2e090de8a6",
            "9ebfeb983f3db4e0",
            "88177d0566a1dfae",
            "b8da301865f81557",
            "83ac8183f2bc4611",
            "443c66ab578a0246",
            "d8b6654e384574c2",
            "c04cca05c88d16e4",
            "8e223345247de1c0",
            "e0b53f528d5df464",
            "8620906a5b9e291a",
            "b3532fb94cf1c7ba",
            "8195b2ee27da762a",
            "b31ed4c3c5e75c9a",
            "710145116fe78bf2",
            "1290f6ac7d2cee39",
            "7c44b33d0672d8ed",
            "ae4f8c25719e5f7e",
            "6504a3405711fbbc",
            "9ce18074193261dc",
            "3b6ee9f66e6222c0",
            "2616a4e1f14c25b3"
        ],
        "x": 34,
        "y": 199,
        "w": 832,
        "h": 562
    },
    {
        "id": "3d362d4ed9b8216d",
        "type": "group",
        "z": "431c38a5e400a7b9",
        "g": "142adaa1d434d530",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "340570e9eeb5f86a",
            "3fd90690cfefdfbf",
            "cf445d332e4661ba",
            "6217196afa7e6264",
            "24f98e97277e0aef"
        ],
        "x": 94,
        "y": 59,
        "w": 722,
        "h": 122
    },
    {
        "id": "512f48bf5bda8a0f",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "Select Product In LINE - Update Text Box was selected",
        "style": {
            "label": true
        },
        "nodes": [
            "e2094d16e4f1c763",
            "262d78baf232bc3a",
            "2924396c0f82d933"
        ],
        "x": 54,
        "y": 179
    },
    {
        "id": "1ff2bb5e506ba5fa",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "g": "3fefec37553d17cc",
        "name": "Select Product In Warehouse",
        "style": {
            "label": true
        },
        "nodes": [
            "eaf5b60edfbe717e",
            "a10259f97b6267f5",
            "f4d44ec01558e29c",
            "a83d0ba50dc1a7e2",
            "349b05ca4a8871a0",
            "b93b04becbb85e23"
        ],
        "x": 54,
        "y": 479
    },
    {
        "id": "8e6256a8baa50e3d",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "g": "47a7f0bc2181bb0c",
        "name": "Product Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "5ad66b277afaa5fc",
            "7a57b417ffc24473",
            "533ef46d1ddf0800",
            "fe7c432e57d2b2d7",
            "91f44cf7934509eb",
            "9054f0015c5958e6",
            "ff1b516a473fc8ca",
            "9a95d95fd8ea0f38",
            "c7e72a791afe7321",
            "23317b8c54fb9679"
        ],
        "x": 54,
        "y": 699
    },
    {
        "id": "ef73c41a3e7459a6",
        "type": "group",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "Product was Line Selected - TABLE",
        "style": {
            "label": true
        },
        "nodes": [
            "6f65430355b07e80",
            "edc6ebe9ee04d43b",
            "0eff924b2a6fc059",
            "a3212c07cc3c4483",
            "b374504ada8d1c19"
        ],
        "x": 54,
        "y": 279
    },
    {
        "id": "0ae961d5e0851921",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "Select Product In LINE - Update Text Box was selected",
        "style": {
            "label": true
        },
        "nodes": [
            "16b9e6204d183bed",
            "f8c65b08ba4b18e6",
            "942dd997c38bbf97"
        ],
        "x": 34,
        "y": 199
    },
    {
        "id": "9a86a7c8a393028e",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "Product was Line Selected - TABLE",
        "style": {
            "label": true
        },
        "nodes": [
            "2ef4b647ff05d4a3",
            "1b58a09ec636db65",
            "b92cc57c8c9674b2",
            "a828a5216e78e3bf",
            "1ac410b6b4c9dd18"
        ],
        "x": 34,
        "y": 299
    },
    {
        "id": "9ddc234892167110",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "g": "0c53561c896c5a45",
        "name": "Select Product In Warehouse",
        "style": {
            "label": true
        },
        "nodes": [
            "ee5aab9c5f969aed",
            "d69fe650233fde85",
            "daa2384c847b36cf",
            "6aca80eb8c01b98f",
            "766cea9ff7e83bc1",
            "13ba6fc34378dace"
        ],
        "x": 34,
        "y": 499
    },
    {
        "id": "036af4e858331199",
        "type": "group",
        "z": "29edf33f7ef9dac1",
        "g": "7ce82893c2287b5a",
        "name": "Product Delivery",
        "style": {
            "label": true
        },
        "nodes": [
            "264dfd626fafebc9",
            "f1d891052cdaa829",
            "406997e5a1f2d014",
            "e3a4030b3121db2d",
            "5c10f51374406a23",
            "d09a91a9a421304b",
            "9b09a7235be4c1da",
            "8ff95e4cbfef965a",
            "e05a179a034f2dd1",
            "b099febec79c2aad"
        ],
        "x": 34,
        "y": 759
    },
    {
        "id": "591ab93028b7338c",
        "type": "group",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name": "STAMPING MACHINE 2",
        "style": {
            "label": true,
            "color": "#ff0000",
            "fill": "#d1d1d1",
            "stroke": "#777777"
        },
        "nodes": [
            "329e1208d13c5f54",
            "079325187703e652",
            "50709afac12bdcec",
            "93bbe82072798cdd",
            "b2afaaea1a591c67",
            "481b5110cd712f4c",
            "b4b55e5bd38c9eef",
            "c69acb22ceb7e5fd",
            "a2be93b2e164bec4",
            "2e560e8e9930cb4f",
            "2b7e0f02add1986d",
            "148dd472cfe19aa8",
            "8d8c7bcc11fd922a",
            "e7447117dcfe9551",
            "7f3065c91f8a1248",
            "a32252b607e19adf",
            "18b42906e6bfb8d2",
            "300e2d5a690f7157",
            "71e1950c920277a5",
            "c656b8bb3f0a23d3",
            "8885bc604eb61deb",
            "3fee2622469fce23",
            "6613e6dce65768a2",
            "4e372c1bc563f3ba",
            "f4fd3e5b2863cad9",
            "6839d6d8290633ff",
            "b0a20bcb28d34811",
            "54e7b165a6b77472",
            "c3d6e681500d393a",
            "43427761cf6bcbe9",
            "2eaba68b90d32f84",
            "bcaef75fbee5e73b",
            "fcad91a479f61afe",
            "149b1e79eb9c6232",
            "33eb70d11ef7150a",
            "b65c4b8ad782a8ba",
            "b8d17de22c6c2f70",
            "9b7c9a0da4894439",
            "2f61cc2975a1c767",
            "34d6d8d0bf3050f9",
            "4bf8806fbec9bd4d",
            "40c8dda31c176ee1",
            "e0eb6bcf85ad4f3b",
            "7599a2e9e342a501",
            "1b9f4bf5f41bae40"
        ],
        "x": 74,
        "y": 1599
    },
    {
        "id": "dfe6b837d729ac09",
        "type": "group",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name": "TURN OFF SCADA  SERVER",
        "style": {
            "fill": "#d1d1d1",
            "label": true,
            "stroke": "#ff0000",
            "color": "#001f60"
        },
        "nodes": [
            "784f980b6fbea451",
            "edfd373b67a659bc",
            "1ad5dcbc4a190e01",
            "1a12f6410d722dcc",
            "2b55f7e434e163d1"
        ],
        "x": 474,
        "y": 1459
    },
    {
        "id": "25272edabe2d0cd8",
        "type": "junction",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "x": 700,
        "y": 3220,
        "wires": [
            [
                "572fcb536930135f"
            ]
        ]
    },
    {
        "id": "690b89e8afc79a98",
        "type": "junction",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "x": 660,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "8816085acdb3e4fc",
        "type": "junction",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "x": 680,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "13ea0c6a8eece8c0",
        "type": "junction",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "x": 600,
        "y": 420,
        "wires": [
            [
                "8816085acdb3e4fc"
            ]
        ]
    },
    {
        "id": "e0d956497d4ce948",
        "type": "junction",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "x": 340,
        "y": 260,
        "wires": [
            [
                "8f588d0c2db4ecd7",
                "3c5be560c815d3a0"
            ]
        ]
    },
    {
        "id": "5711699ff8e9214c",
        "type": "junction",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "a4529a8f8c185971",
                "022e9477c877dfd6"
            ]
        ]
    },
    {
        "id": "4ae9cf1dcbe6fa8f",
        "type": "junction",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "845a936a56106e53",
                "18242fb27f6f1332"
            ]
        ]
    },
    {
        "id": "f964f6c1fb0d09ee",
        "type": "junction",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "x": 500,
        "y": 380,
        "wires": [
            [
                "4ae9cf1dcbe6fa8f"
            ]
        ]
    },
    {
        "id": "bb52601c56c7f706",
        "type": "junction",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "13c032d5c51fc625",
                "24547fe44faf210b"
            ]
        ]
    },
    {
        "id": "845a936a56106e53",
        "type": "junction",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "x": 660,
        "y": 300,
        "wires": [
            [
                "72fec31c407f7693"
            ]
        ]
    },
    {
        "id": "9ebfeb983f3db4e0",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "88177d0566a1dfae",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "b8da301865f81557",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 360,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "83ac8183f2bc4611",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 400,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "897df20495d4617f",
        "type": "junction",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "x": 600,
        "y": 220,
        "wires": [
            [
                "fe317fd257f90c7d",
                "808365a8f78d20bd"
            ]
        ]
    },
    {
        "id": "327cc5fd38497ae6",
        "type": "junction",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "x": 780,
        "y": 360,
        "wires": [
            [
                "edee7da87f0c052c"
            ]
        ]
    },
    {
        "id": "ba6c472e386be3c4",
        "type": "junction",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "4469193b9f397b59"
            ]
        ]
    },
    {
        "id": "cfb58821f7c529d2",
        "type": "junction",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "f2b74b8804aa18c0"
            ]
        ]
    },
    {
        "id": "8195b2ee27da762a",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 480,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "43694f9cab73a0cb",
        "type": "junction",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "e9c6b5cac9632abb"
            ]
        ]
    },
    {
        "id": "c04cca05c88d16e4",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "e0b53f528d5df464",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 560,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "b31ed4c3c5e75c9a",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 600,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "8224ef6b03b50c1e",
        "type": "junction",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "ea6cc81fb7cbede1"
            ]
        ]
    },
    {
        "id": "9631c1af9175002a",
        "type": "junction",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "x": 540,
        "y": 280,
        "wires": [
            [
                "110aeadb6a69ac8c"
            ]
        ]
    },
    {
        "id": "7091ba9bda1b4a4b",
        "type": "junction",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "x": 600,
        "y": 240,
        "wires": [
            [
                "a4a16a6237095976"
            ]
        ]
    },
    {
        "id": "482871725db15514",
        "type": "junction",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "x": 540,
        "y": 300,
        "wires": [
            [
                "13c6a29e60d14dfb"
            ]
        ]
    },
    {
        "id": "eac05351215b2606",
        "type": "junction",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "x": 520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "710145116fe78bf2",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 640,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "ea8448baf509ab1e",
        "type": "junction",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "x": 440,
        "y": 320,
        "wires": [
            [
                "5fd02bf4fa95b41f"
            ]
        ]
    },
    {
        "id": "e61a4eb1033cf61c",
        "type": "junction",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "x": 440,
        "y": 200,
        "wires": [
            [
                "5fd02bf4fa95b41f"
            ]
        ]
    },
    {
        "id": "eaf9b53fdcbc5861",
        "type": "junction",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "5fd02bf4fa95b41f"
            ]
        ]
    },
    {
        "id": "a4a4ab9c72f71825",
        "type": "junction",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "5fd02bf4fa95b41f"
            ]
        ]
    },
    {
        "id": "7652590b4b30338f",
        "type": "junction",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "x": 480,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "efc35d5397e3efe2",
        "type": "junction",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "x": 620,
        "y": 240,
        "wires": [
            [
                "c6c07197631e8ed2",
                "4654f2221bbe6404"
            ]
        ]
    },
    {
        "id": "d6556be13806c23e",
        "type": "junction",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "x": 600,
        "y": 320,
        "wires": [
            [
                "40f0ed8d8aa3f036"
            ]
        ]
    },
    {
        "id": "7c44b33d0672d8ed",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "6504a3405711fbbc",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 240,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "2bb95a4348f139f6",
        "type": "junction",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "x": 1980,
        "y": 400,
        "wires": [
            [
                "6c3d1be22b773f37"
            ]
        ]
    },
    {
        "id": "dcbcbbaaf3e3eb53",
        "type": "junction",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "x": 1980,
        "y": 280,
        "wires": [
            [
                "6c3d1be22b773f37"
            ]
        ]
    },
    {
        "id": "f0943326675db96d",
        "type": "junction",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "x": 1980,
        "y": 360,
        "wires": [
            [
                "6c3d1be22b773f37"
            ]
        ]
    },
    {
        "id": "6027c85f55d2d316",
        "type": "junction",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "x": 1980,
        "y": 320,
        "wires": [
            [
                "6c3d1be22b773f37"
            ]
        ]
    },
    {
        "id": "ff1b516a473fc8ca",
        "type": "junction",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "x": 500,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "be3cdffc243c02c6",
        "type": "junction",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "x": 1960,
        "y": 420,
        "wires": [
            [
                "d625418e8e89d5e4"
            ]
        ]
    },
    {
        "id": "820701375fd01b50",
        "type": "junction",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "x": 1960,
        "y": 300,
        "wires": [
            [
                "d625418e8e89d5e4"
            ]
        ]
    },
    {
        "id": "53f67c6bc33f5cdb",
        "type": "junction",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "x": 1960,
        "y": 380,
        "wires": [
            [
                "d625418e8e89d5e4"
            ]
        ]
    },
    {
        "id": "48211b5b254fde4d",
        "type": "junction",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "x": 1960,
        "y": 340,
        "wires": [
            [
                "d625418e8e89d5e4"
            ]
        ]
    },
    {
        "id": "9b09a7235be4c1da",
        "type": "junction",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "x": 480,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2e560e8e9930cb4f",
        "type": "junction",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "x": 680,
        "y": 1780,
        "wires": [
            [
                "329e1208d13c5f54",
                "34d6d8d0bf3050f9"
            ]
        ]
    },
    {
        "id": "2b7e0f02add1986d",
        "type": "junction",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "x": 660,
        "y": 1860,
        "wires": [
            [
                "8d8c7bcc11fd922a"
            ]
        ]
    },
    {
        "id": "2616a4e1f14c25b3",
        "type": "junction",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "x": 320,
        "y": 720,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "cf0ae1d58e6000b5",
        "type": "mqtt-broker",
        "name": "Brocker Local",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "89d1985a326c08dc",
        "type": "sqlitedb",
        "db": "/database",
        "mode": "RWC"
    },
    {
        "id": "2396bfe8a4f22a28",
        "type": "file in",
        "z": "431c38a5e400a7b9",
        "g": "316c250389507abd",
        "name": "Read Config default",
        "filename": "config/default.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1260,
        "y": 100,
        "wires": [
            [
                "931ff724bfdb20fb"
            ]
        ]
    },
    {
        "id": "41c5abc2b8333248",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "316c250389507abd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "2396bfe8a4f22a28"
            ]
        ]
    },
    {
        "id": "931ff724bfdb20fb",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "316c250389507abd",
        "name": "View read file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 100,
        "wires": []
    },
    {
        "id": "3470ba82c55069fb",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "13aa4bf8c91d02e6"
            ]
        ]
    },
    {
        "id": "13aa4bf8c91d02e6",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "Check Variable",
        "func": "var Variable = global.get(\"Variable\");\n\n// Object.keys(VariableSystem.IO.sockets).forEach(function (s) {\n//     VariableSystem.IO.sockets[s].disconnect(true);\n// });\nmsg.payload = Variable.BitAdjust[1][1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "956e5cfef4213989"
            ]
        ]
    },
    {
        "id": "956e5cfef4213989",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 280,
        "wires": []
    },
    {
        "id": "a0b17f03550b6633",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "NPM-PACK-ALL",
        "func": "node.warn(msg.payload);\n// const child = childProcess.exec(\"npm pack --output ../\", {\nconst child = childProcess.exec(\"npm pack\", {\n    cwd: msg.payload\n}, function (error, stdout, stderr) {\n    if (error) {\n        node.warn(error);\n        node.warn(stderr); // Log stderr\n    } else {\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 5000);\n    }\n});",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "childProcess",
                "module": "child_process"
            }
        ],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "35cb07e15c06824e"
            ]
        ]
    },
    {
        "id": "7152650d2a36016d",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "91e81f64e63afe6c"
            ]
        ]
    },
    {
        "id": "91e81f64e63afe6c",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "Check Variable System",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\n// Object.keys(VariableSystem.IO.sockets).forEach(function (s) {\n//     VariableSystem.IO.sockets[s].disconnect(true);\n// });\nVariableSystem.BitDisplay[1][0]=1\nmsg.payload = VariableSystem.BitDisplay[1]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 340,
        "wires": [
            [
                "f87685720d63e90f"
            ]
        ]
    },
    {
        "id": "f87685720d63e90f",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "ba5ecb86852daff1",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 340,
        "wires": []
    },
    {
        "id": "3be69e4d8b589fd6",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "Ugly File",
        "func": "const minify = global.get(\"minify\");\nconst uglifyJS = global.get(\"uglifyJS\");\n\nasync function compress(input, output) {\n    return await new Promise((res, rej) => {\n        minify({\n            compressor: uglifyJS,\n            input: input,\n            output: output,\n            callback: function (err, min) {\n                if (!err) {\n                    res(true)\n                } else {\n                    rej(false)\n                }\n            }\n        });\n    });\n}\nif (msg.payload == 'CONFIG_SERVER') {\n    let res = await compress('myPackage/config_server/config_server_original.js', 'myPackage/config_server/package/config_server.js');\n    if (res) {\n        msg.payload = 'myPackage/config_server/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'CONFIG_PROJECT') {\n    let res = await compress('myPackage/config_project/config_project_original.js', 'myPackage/config_project/package/config_project.js');\n    if (res) {\n        msg.payload = 'myPackage/config_project/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'PLC_OMRON') {\n    let res = await compress('myPackage/plc_omron/plc_omron_original.js', 'myPackage/plc_omron/package/plc_omron.js');\n    if (res) {\n        msg.payload = 'myPackage/plc_omron/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'PLC_MODBUS') {\n    let res = await compress('myPackage/plc_modbus/plc_modbus_original.js', 'myPackage/plc_modbus/package/plc_modbus.js');\n    if (res) {\n        msg.payload = 'myPackage/plc_modbus/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'PLC_MODBUS_SERVER') {\n    let res = await compress('myPackage/plc_modbus_server/plc_modbus_server_original.js', 'myPackage/plc_modbus_server/package/plc_modbus_server.js');\n    if (res) {\n        msg.payload = 'myPackage/plc_modbus_server/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'SOCKET_CLIENT') {\n    let res = await compress('myPackage/socket_client/socket_client_original.js', 'myPackage/socket_client/package/socket_client.js');\n    if (res) {\n        msg.payload = 'myPackage/socket_client/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'CONFIG_WEB') {\n    let res = await compress('myPackage/config_web/config_web_original.js', 'myPackage/config_web/package/config_web.js');\n    if (res) {\n        msg.payload = 'myPackage/config_web/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'BCRYPT') {\n    let res = await compress('myPackage/bcrypt_generator/bcrypt_generator_original.js', 'myPackage/bcrypt_generator/package/bcrypt_generator.js');\n    if (res) {\n        msg.payload = 'myPackage/bcrypt_generator/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'SIEMENS') {\n    let res = await compress('myPackage/plc_siemens/plc_siemens_original.js', 'myPackage/plc_siemens/package/plc_siemens.js');\n    if (res) {\n        msg.payload = 'myPackage/plc_siemens/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'VNC') {\n    let res = await compress('myPackage/vnc_setup/vnc_setup_original.js', 'myPackage/vnc_setup/package/vnc_setup.js');\n    if (res) {\n        msg.payload = 'myPackage/vnc_setup/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\n\nif (msg.payload == 'MobileRobot') {\n\n    let res = await compress('myPackage/omron_mobile_robot/omron_mobile_robot_original.js', 'myPackage/omron_mobile_robot/package/omron_mobile_robot.js');\n    if (res) {\n        msg.payload = 'myPackage/omron_mobile_robot/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'CONFIG_WEB_NODERED') {\n    let res = await compress('myPackage/config_web_nextjs/config_web_nextjs_original.js', 'myPackage/config_web_nextjs/package/config_web_nextjs.js');\n    if (res) {\n        msg.payload = 'myPackage/config_web_nextjs/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}\nif (msg.payload == 'SCADA') {\n    let res = await compress('myPackage/scada/scada_original.js', 'myPackage/scada/package/scada.js');\n    if (res) {\n        msg.payload = 'myPackage/scada/package'\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Success\" });\n        const myTimeout = setTimeout(() => {\n            node.status({});\n        }, 3000);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nsetTimeout(()=>{\n    node.status({ });\n},2000)",
        "libs": [],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "a0b17f03550b6633"
            ]
        ]
    },
    {
        "id": "768af44e2f7e7373",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "PLC_OMRON",
        "payloadType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "88177d0566a1dfae"
            ]
        ]
    },
    {
        "id": "35cb07e15c06824e",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 460,
        "wires": []
    },
    {
        "id": "e2c1221a2a43881d",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "PLC_MODBUS",
        "payloadType": "str",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "b8da301865f81557"
            ]
        ]
    },
    {
        "id": "b2db2df9529760b6",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SOCKET_CLIENT",
        "payloadType": "str",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "83ac8183f2bc4611"
            ]
        ]
    },
    {
        "id": "12653a2e090de8a6",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CONFIG_WEB",
        "payloadType": "str",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "9ebfeb983f3db4e0"
            ]
        ]
    },
    {
        "id": "340570e9eeb5f86a",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "3d362d4ed9b8216d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "3fd90690cfefdfbf"
            ]
        ]
    },
    {
        "id": "3fd90690cfefdfbf",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "3d362d4ed9b8216d",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "cf445d332e4661ba"
            ]
        ]
    },
    {
        "id": "cf445d332e4661ba",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "3d362d4ed9b8216d",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "e06c1381ecd84ac7",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "316c250389507abd",
        "name": "Show all error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 160,
        "wires": []
    },
    {
        "id": "4a1375a5a4d6151c",
        "type": "catch",
        "z": "431c38a5e400a7b9",
        "g": "316c250389507abd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1140,
        "y": 160,
        "wires": [
            [
                "e06c1381ecd84ac7"
            ]
        ]
    },
    {
        "id": "e82db02fc80bbd06",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "093e1368e6904ed6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "8a9dfe3e7072267c",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "093e1368e6904ed6",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 820,
        "wires": []
    },
    {
        "id": "443c66ab578a0246",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BCRYPT",
        "payloadType": "str",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "8195b2ee27da762a"
            ]
        ]
    },
    {
        "id": "d8b6654e384574c2",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SIEMENS",
        "payloadType": "str",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "c04cca05c88d16e4"
            ]
        ]
    },
    {
        "id": "8e223345247de1c0",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "VNC",
        "payloadType": "str",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "e0b53f528d5df464"
            ]
        ]
    },
    {
        "id": "8620906a5b9e291a",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MobileRobot",
        "payloadType": "str",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "b31ed4c3c5e75c9a"
            ]
        ]
    },
    {
        "id": "930481ce917d41a0",
        "type": "file in",
        "z": "431c38a5e400a7b9",
        "g": "7651265a321625fc",
        "name": "Read Config",
        "filename": "config/default_Admin.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 940,
        "wires": [
            [
                "c5a09a1bef7630b7",
                "584e13ad301a0178"
            ]
        ]
    },
    {
        "id": "c5a09a1bef7630b7",
        "type": "file",
        "z": "431c38a5e400a7b9",
        "g": "7651265a321625fc",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 590,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "584e13ad301a0178",
        "type": "debug",
        "z": "431c38a5e400a7b9",
        "g": "7651265a321625fc",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 960,
        "wires": []
    },
    {
        "id": "deb180cdeb25358b",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "7651265a321625fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 940,
        "wires": [
            [
                "930481ce917d41a0"
            ]
        ]
    },
    {
        "id": "b3532fb94cf1c7ba",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "PLC_MODBUS_SERVER",
        "payloadType": "str",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "710145116fe78bf2"
            ]
        ]
    },
    {
        "id": "6217196afa7e6264",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "3d362d4ed9b8216d",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$Srt5ujgVop11RctZNxq0p.qBcTzh71rLXz.B1YFs0fIsf3FamtFKO",
        "payloadType": "str",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "24f98e97277e0aef"
            ]
        ]
    },
    {
        "id": "24f98e97277e0aef",
        "type": "function",
        "z": "431c38a5e400a7b9",
        "g": "3d362d4ed9b8216d",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n        node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        // if (!VariableSystem.active) {\n        //         node.warn(VariableSystem.uuid)\n        // }\n}, 3000)",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1290f6ac7d2cee39",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CONFIG_PROJECT",
        "payloadType": "str",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "7c44b33d0672d8ed"
            ]
        ]
    },
    {
        "id": "ae4f8c25719e5f7e",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CONFIG_SERVER",
        "payloadType": "str",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "6504a3405711fbbc"
            ]
        ]
    },
    {
        "id": "9ce18074193261dc",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "CONFIG_WEB_NODERED",
        "payloadType": "str",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "3be69e4d8b589fd6"
            ]
        ]
    },
    {
        "id": "3b6ee9f66e6222c0",
        "type": "inject",
        "z": "431c38a5e400a7b9",
        "g": "2ed6ae3cc4114ecc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SCADA",
        "payloadType": "str",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "2616a4e1f14c25b3"
            ]
        ]
    },
    {
        "id": "a4190b99151730ba",
        "type": "plc_omron",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "PLC OMRON - PALLETIZER",
        "host": "192.168.251.110",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1100",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 930,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "af25c7cb2fe10088",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "Write Sanofi Line 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "6f0ee2bcfae2e453",
                "f39bacbb6b20c11e"
            ]
        ]
    },
    {
        "id": "577af06c0d7804ca",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Sanofi_Line2.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "9e61f2c37a4cff57",
        "type": "plc_omron",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "PLC OMRON - NX102",
        "host": "192.168.251.10",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1100",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "320",
        "PLC_LengthOfWordBitAdjust": "20",
        "PLC_WordStartWordDisplay": "340",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "540",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "740",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "790",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 910,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "572fcb536930135f",
        "type": "plc_omron",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "PLC OMRON - SCADA",
        "host": "192.168.251.1",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 920,
        "y": 3220,
        "wires": [
            [
                "e249c93a62fc84f6"
            ]
        ]
    },
    {
        "id": "ed4eef287511b770",
        "type": "file in",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Read Config",
        "filename": "config/default_Scada_Sanofi.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 490,
        "y": 3100,
        "wires": [
            [
                "48a52dbeda448869",
                "b14e9990e85b95fe"
            ]
        ]
    },
    {
        "id": "48a52dbeda448869",
        "type": "debug",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 3080,
        "wires": []
    },
    {
        "id": "b14e9990e85b95fe",
        "type": "file",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 770,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "22ac8bfa859b7bd2",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Write Sanofi Scada",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 3300,
        "wires": [
            [
                "ed4eef287511b770",
                "50a14b80e4fa9073"
            ]
        ]
    },
    {
        "id": "50a14b80e4fa9073",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Scada_Sanofi.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3300,
        "wires": [
            [
                "25272edabe2d0cd8",
                "daed6269b0c21208"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "1146fc9609326f92",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 510,
        "y": 3220,
        "wires": [
            [
                "25272edabe2d0cd8"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "485fa72996c0f66b",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 520,
        "y": 3180,
        "wires": [
            [
                "25272edabe2d0cd8"
            ]
        ]
    },
    {
        "id": "e249c93a62fc84f6",
        "type": "debug",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 3220,
        "wires": []
    },
    {
        "id": "4e5b91785ff01bcd",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 490,
        "y": 3260,
        "wires": [
            [
                "25272edabe2d0cd8"
            ]
        ]
    },
    {
        "id": "6f0ee2bcfae2e453",
        "type": "Config_Web Begin",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "x": 420,
        "y": 1440,
        "wires": [
            [
                "58cc434b14a3012d"
            ]
        ]
    },
    {
        "id": "58cc434b14a3012d",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "SCADA PAGE",
        "x": 620,
        "y": 1440,
        "wires": [
            [
                "5b1134a43a1d0c2a"
            ]
        ]
    },
    {
        "id": "5b1134a43a1d0c2a",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 840,
        "y": 1440,
        "wires": [
            [
                "4444b0791369ae4a"
            ]
        ]
    },
    {
        "id": "4444b0791369ae4a",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "NX102_Page1",
        "scale": "100",
        "x": 1060,
        "y": 1440,
        "wires": [
            [
                "febb3b9bf49d4d69"
            ]
        ]
    },
    {
        "id": "3621f2216c6c3e49",
        "type": "Config_Web End",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "port": "8000",
        "x": 710,
        "y": 2200,
        "wires": [
            [
                "e1675043a508049d",
                "dee6d0a75aa26b17"
            ]
        ]
    },
    {
        "id": "e1675043a508049d",
        "type": "file",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1110,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "abef3d02c27a6ee0",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "ALARM",
        "x": 640,
        "y": 1620,
        "wires": [
            [
                "bdb01e47118d32d3"
            ]
        ]
    },
    {
        "id": "bdb01e47118d32d3",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 850,
        "y": 1620,
        "wires": [
            [
                "77e18822d59b9079"
            ]
        ]
    },
    {
        "id": "77e18822d59b9079",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1090,
        "y": 1620,
        "wires": [
            [
                "21d81e6c66ed1393"
            ]
        ]
    },
    {
        "id": "21d81e6c66ed1393",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "LOG REPORT",
        "x": 620,
        "y": 1660,
        "wires": [
            [
                "480320b35e595a29"
            ]
        ]
    },
    {
        "id": "480320b35e595a29",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 860,
        "y": 1660,
        "wires": [
            [
                "6a9342061e924f6f"
            ]
        ]
    },
    {
        "id": "6a9342061e924f6f",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1100,
        "y": 1660,
        "wires": [
            [
                "5b2fa7d7c84d806e"
            ]
        ]
    },
    {
        "id": "5b2fa7d7c84d806e",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "USER MANAGER",
        "x": 610,
        "y": 1700,
        "wires": [
            [
                "bb8223e0bb3cd5ef"
            ]
        ]
    },
    {
        "id": "bb8223e0bb3cd5ef",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 880,
        "y": 1700,
        "wires": [
            [
                "b628342ab941079b"
            ]
        ]
    },
    {
        "id": "a4840b85bc31c0c1",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n        \n        if (data.NameCommand === 'VNC_Connect') {\n            VariableSystem.COMMUNICATION_VNC[data.value].connect = true\n            node.warn(VariableSystem.COMMUNICATION_VNC[data.value]);\n        }\n        if (data.NameCommand === 'VNC_Disconnect') {\n            VariableSystem.COMMUNICATION_VNC[data.value].disconnect = true\n        }\n    });\n\n    //VNC\n    for (let i = 0; i < 10; i++) {\n        socket.on('mouse_vnc_' + i, function (evnt) {\n            if (VariableSystem.COMMUNICATION_VNC[i]) {\n                VariableSystem.COMMUNICATION_VNC[i].vnc.sendPointerEvent(evnt.x, evnt.y, evnt.button);\n            }\n        });\n        // socket.on('keyboard_vnc_'+i, function (evnt) {\n        //     if (VariableSystem.COMMUNICATION_VNC[i]) {\n        //         VariableSystem.COMMUNICATION_VNC[i].sendKeyEvent(0, 1);\n        //     }\n        // });\n        socket.on('disconnect_vnc_' + i, function () {\n            // disconnectClient(socket);\n            node.warn('Client disconnected');\n        });\n    }\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "daed6269b0c21208",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "839e4e70ec78e9dd",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "7d1e196b1bd370b1",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "VNC NA",
        "url": "/VNC_Page",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "VNC1",
        "scale": "100",
        "x": 1020,
        "y": 1480,
        "wires": [
            [
                "6fbcdfcf4da2b2c9"
            ]
        ]
    },
    {
        "id": "e351c77281d1e31a",
        "type": "vnc_setup",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "NA",
        "host": "192.168.250.40",
        "port": 5900,
        "password": "08041991",
        "indexVNC": "1",
        "fps": "20",
        "checkbox_copyRect": true,
        "checkbox_zrle": true,
        "checkbox_hextile": true,
        "checkbox_raw": true,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 450,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "2e5485473c2a60d8",
        "type": "vnc_setup",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "PALLETIZER VNC",
        "host": "192.168.251.120",
        "port": 5900,
        "password": "111111",
        "indexVNC": "2",
        "fps": 1,
        "checkbox_copyRect": true,
        "checkbox_zrle": true,
        "checkbox_hextile": true,
        "checkbox_raw": true,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 430,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "b628342ab941079b",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "MEMONIC PALLETIZER",
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "549126025afeb38c"
            ]
        ]
    },
    {
        "id": "549126025afeb38c",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 900,
        "y": 1780,
        "wires": [
            [
                "16fc740fb9f75ee1"
            ]
        ]
    },
    {
        "id": "16fc740fb9f75ee1",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - BitAdjust",
        "indexPLC": "1",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1220,
        "y": 1780,
        "wires": [
            [
                "7fec6be9eeac8c5b"
            ]
        ]
    },
    {
        "id": "7fec6be9eeac8c5b",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - WordDisplay",
        "indexPLC": "1",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 910,
        "y": 1820,
        "wires": [
            [
                "793ac26119266212"
            ]
        ]
    },
    {
        "id": "793ac26119266212",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - WordAdjust",
        "indexPLC": "1",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1250,
        "y": 1820,
        "wires": [
            [
                "41c5c04705fd88e0"
            ]
        ]
    },
    {
        "id": "1442c8343ccffb85",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - DWordDisplay",
        "indexPLC": "1",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 920,
        "y": 1900,
        "wires": [
            [
                "81b6ba3a923cf17f"
            ]
        ]
    },
    {
        "id": "81b6ba3a923cf17f",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - DWordAdjust",
        "indexPLC": "1",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1250,
        "y": 1900,
        "wires": [
            [
                "3f0feb587a6651d0"
            ]
        ]
    },
    {
        "id": "3f0feb587a6651d0",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "title": "MEMONIC 102",
        "x": 620,
        "y": 2000,
        "wires": [
            [
                "336d11f5151bf7e8"
            ]
        ]
    },
    {
        "id": "336d11f5151bf7e8",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - BitDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "20",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 880,
        "y": 2000,
        "wires": [
            [
                "2b6ad52aada01522"
            ]
        ]
    },
    {
        "id": "2b6ad52aada01522",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - BitAdjust",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "20",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1160,
        "y": 2000,
        "wires": [
            [
                "10cda50cab788ea3"
            ]
        ]
    },
    {
        "id": "40d929cb30687c06",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - WordAdjust",
        "indexPLC": "2",
        "word_start": "540",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1190,
        "y": 2080,
        "wires": [
            [
                "19bc506b49670f38"
            ]
        ]
    },
    {
        "id": "243870f403f3af10",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - DWordAdjust",
        "indexPLC": "2",
        "word_start": "790",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1210,
        "y": 2120,
        "wires": [
            [
                "3621f2216c6c3e49"
            ]
        ]
    },
    {
        "id": "19bc506b49670f38",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - DWordDisplay",
        "indexPLC": "2",
        "word_start": "740",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 900,
        "y": 2120,
        "wires": [
            [
                "243870f403f3af10"
            ]
        ]
    },
    {
        "id": "073d427132b3f033",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - WordDisplay",
        "indexPLC": "2",
        "word_start": "340",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 890,
        "y": 2080,
        "wires": [
            [
                "40d929cb30687c06"
            ]
        ]
    },
    {
        "id": "febb3b9bf49d4d69",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "CHART",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Chart",
        "scale": "100",
        "x": 820,
        "y": 1480,
        "wires": [
            [
                "7d1e196b1bd370b1"
            ]
        ]
    },
    {
        "id": "81b9f244a2fde608",
        "type": "vnc_setup",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "Wentek",
        "host": "192.168.1.100",
        "port": 5900,
        "password": "111111",
        "indexVNC": "1",
        "fps": "20",
        "checkbox_copyRect": true,
        "checkbox_zrle": true,
        "checkbox_hextile": true,
        "checkbox_raw": true,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 200,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "6fbcdfcf4da2b2c9",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "VNC PALLETIZER",
        "url": "/VNC_Page2",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "VNC2",
        "scale": "100",
        "x": 1230,
        "y": 1480,
        "wires": [
            [
                "86368ca8c6136771"
            ]
        ]
    },
    {
        "id": "86368ca8c6136771",
        "type": "Config_Web VNC",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NA",
        "indexPLC": "1",
        "url": "/VNC_Page",
        "icon": "cui-dashboard",
        "x": 860,
        "y": 1540,
        "wires": [
            [
                "25f82d2fea9db8b8"
            ]
        ]
    },
    {
        "id": "25f82d2fea9db8b8",
        "type": "Config_Web VNC",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NB",
        "indexPLC": "2",
        "url": "/VNC_Page",
        "icon": "cui-dashboard",
        "x": 1100,
        "y": 1540,
        "wires": [
            [
                "abef3d02c27a6ee0"
            ]
        ]
    },
    {
        "id": "10cda50cab788ea3",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "NX102 - Timer",
        "indexPLC": "2",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 870,
        "y": 2040,
        "wires": [
            [
                "073d427132b3f033"
            ]
        ]
    },
    {
        "id": "41c5c04705fd88e0",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name_page": "PALLETIZER - Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 890,
        "y": 1860,
        "wires": [
            [
                "1442c8343ccffb85"
            ]
        ]
    },
    {
        "id": "b53084964419a8e3",
        "type": "vnc_setup",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "NA",
        "host": "192.168.2.14",
        "port": 5900,
        "password": "123123",
        "indexVNC": "2",
        "fps": "60",
        "checkbox_copyRect": true,
        "checkbox_zrle": true,
        "checkbox_hextile": true,
        "checkbox_raw": true,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 850,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "28d886eb910b03c7",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "713a775c3896f049",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "e4fd1263c3a838a8"
            ]
        ]
    },
    {
        "id": "e4fd1263c3a838a8",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "713a775c3896f049",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            [
                "c42f66a816724b4f"
            ]
        ]
    },
    {
        "id": "c42f66a816724b4f",
        "type": "debug",
        "z": "2ad1d4be24cd3339",
        "g": "713a775c3896f049",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "95db8527e89d8ccc",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "713a775c3896f049",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n},3000)",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5e2b4095b64e5727",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "713a775c3896f049",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "95db8527e89d8ccc"
            ]
        ]
    },
    {
        "id": "dee6d0a75aa26b17",
        "type": "file",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "0e24e974aded97be",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1440,
        "wires": [
            [
                "6f0ee2bcfae2e453"
            ]
        ]
    },
    {
        "id": "c9f30c368a0beda3",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Sanofi.db\"\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "e5e7b9327227c4d3",
                "8a3f3926c87151fc",
                "921dfdc76d9580e2"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "b16377e88b6fa88c",
        "type": "inject",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "Write Sanofi Line 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "368a90782f17a4fe",
                "c9f30c368a0beda3"
            ]
        ]
    },
    {
        "id": "8a3f3926c87151fc",
        "type": "function",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "368a90782f17a4fe",
        "type": "Config_Web Begin",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "x": 420,
        "y": 420,
        "wires": [
            [
                "fbc136fa3d1b1250"
            ]
        ]
    },
    {
        "id": "921dfdc76d9580e2",
        "type": "plc_omron",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "PLC OMRON - PALLETIZER",
        "host": "192.168.251.5",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 880,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e5e7b9327227c4d3",
        "type": "plc_omron",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "PLC OMRON - NX102 ",
        "host": "192.168.251.10",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "320",
        "PLC_LengthOfWordBitAdjust": "20",
        "PLC_WordStartWordDisplay": "340",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "540",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "740",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "790",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fbc136fa3d1b1250",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "SCADA PAGE",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "15f2a2dec47cc457"
            ]
        ]
    },
    {
        "id": "15f2a2dec47cc457",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "457b9d",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "100",
        "x": 860,
        "y": 420,
        "wires": [
            [
                "7330cce831b7fccf"
            ]
        ]
    },
    {
        "id": "7330cce831b7fccf",
        "type": "Config_Web Page",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "457b9d",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "NX102_Page1",
        "scale": "100",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "e5b690ae6083d5d9"
            ]
        ]
    },
    {
        "id": "e5b690ae6083d5d9",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "ALARM",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "42c1b53ad91f4d8d"
            ]
        ]
    },
    {
        "id": "42c1b53ad91f4d8d",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 830,
        "y": 460,
        "wires": [
            [
                "6ecb74e5f8a613f4"
            ]
        ]
    },
    {
        "id": "6ecb74e5f8a613f4",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1070,
        "y": 460,
        "wires": [
            [
                "4fd3f449fc4e28e2"
            ]
        ]
    },
    {
        "id": "4fd3f449fc4e28e2",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "LOG REPORT",
        "x": 620,
        "y": 500,
        "wires": [
            [
                "866ad2c0ff88437a"
            ]
        ]
    },
    {
        "id": "866ad2c0ff88437a",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "a8d47bfc4f45612e"
            ]
        ]
    },
    {
        "id": "a8d47bfc4f45612e",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1060,
        "y": 500,
        "wires": [
            [
                "5e666dbb1756a1d0"
            ]
        ]
    },
    {
        "id": "5e666dbb1756a1d0",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "USER MANAGER",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "9a7d485d7cddc8c8"
            ]
        ]
    },
    {
        "id": "9a7d485d7cddc8c8",
        "type": "Config_Web Page_Call",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "55e328d82b8b386a"
            ]
        ]
    },
    {
        "id": "55e328d82b8b386a",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "MEMONIC PALLETIZER",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "642d09eba38c5959"
            ]
        ]
    },
    {
        "id": "642d09eba38c5959",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 740,
        "y": 620,
        "wires": [
            [
                "f689cff9dac5cde3"
            ]
        ]
    },
    {
        "id": "f689cff9dac5cde3",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - BitAdjust",
        "indexPLC": "1",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1040,
        "y": 620,
        "wires": [
            [
                "50bb11af9c75d530"
            ]
        ]
    },
    {
        "id": "50bb11af9c75d530",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - WordDisplay",
        "indexPLC": "1",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 750,
        "y": 660,
        "wires": [
            [
                "3e2393cfde80368e"
            ]
        ]
    },
    {
        "id": "3e2393cfde80368e",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - WordAdjust",
        "indexPLC": "1",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "23bfdbb9767fb7df"
            ]
        ]
    },
    {
        "id": "23bfdbb9767fb7df",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "8a99039e8d31f970"
            ]
        ]
    },
    {
        "id": "8a99039e8d31f970",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - DWordDisplay",
        "indexPLC": "1",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 760,
        "y": 740,
        "wires": [
            [
                "a67a5c73b6f2ef6a"
            ]
        ]
    },
    {
        "id": "a67a5c73b6f2ef6a",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "PALLETIZER - DWordAdjust",
        "indexPLC": "1",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1090,
        "y": 740,
        "wires": [
            [
                "ce0cefaa69d27415"
            ]
        ]
    },
    {
        "id": "ce0cefaa69d27415",
        "type": "Config_Web Title",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "title": "MEMONIC 102",
        "x": 420,
        "y": 820,
        "wires": [
            [
                "54a7ad67d4362648"
            ]
        ]
    },
    {
        "id": "54a7ad67d4362648",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - BitDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "20",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 720,
        "y": 820,
        "wires": [
            [
                "0409e16f9ef6fe53"
            ]
        ]
    },
    {
        "id": "0409e16f9ef6fe53",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - BitAdjust",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "20",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1000,
        "y": 820,
        "wires": [
            [
                "4ca93265645e4f32"
            ]
        ]
    },
    {
        "id": "4ca93265645e4f32",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - WordDisplay",
        "indexPLC": "2",
        "word_start": "340",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 730,
        "y": 860,
        "wires": [
            [
                "6edf323003328b87"
            ]
        ]
    },
    {
        "id": "6edf323003328b87",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - WordAdjust",
        "indexPLC": "2",
        "word_start": "540",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1030,
        "y": 860,
        "wires": [
            [
                "8c2d3190b4317cb2"
            ]
        ]
    },
    {
        "id": "8c2d3190b4317cb2",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - Timer",
        "indexPLC": "2",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 710,
        "y": 900,
        "wires": [
            [
                "897b246ef26bb7e1"
            ]
        ]
    },
    {
        "id": "897b246ef26bb7e1",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - DWordDisplay",
        "indexPLC": "2",
        "word_start": "740",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 740,
        "y": 940,
        "wires": [
            [
                "cce10d8f7525b5f3"
            ]
        ]
    },
    {
        "id": "cce10d8f7525b5f3",
        "type": "Config_Web Memonic",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name_page": "NX102 - DWordAdjust",
        "indexPLC": "2",
        "word_start": "790",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1050,
        "y": 940,
        "wires": [
            [
                "92cd9b5e2b3f68d6"
            ]
        ]
    },
    {
        "id": "92cd9b5e2b3f68d6",
        "type": "Config_Web End",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "port": "8000",
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "81c51def3202bacc",
                "590d58d812161eea"
            ]
        ]
    },
    {
        "id": "81c51def3202bacc",
        "type": "file",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 950,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "590d58d812161eea",
        "type": "file",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "name": "",
        "filename": "../RUN_TIME/Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 990,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "310dd7b286ed5192",
        "type": "Config Project",
        "z": "2ad1d4be24cd3339",
        "g": "fad87c2db3f4f946",
        "sqlite_db": "db/Sanofi.db",
        "Choose_Device": "FinsClient",
        "x": 1160,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f39bacbb6b20c11e",
        "type": "Config Project",
        "z": "2ad1d4be24cd3339",
        "g": "ec26103748a6d41f",
        "sqlite_db": "db/Sanofi_Line2.db",
        "Choose_Device": "FinsClient",
        "x": 500,
        "y": 1260,
        "wires": [
            [
                "9e61f2c37a4cff57",
                "a4840b85bc31c0c1",
                "a4190b99151730ba",
                "b53084964419a8e3"
            ]
        ]
    },
    {
        "id": "edee7da87f0c052c",
        "type": "plc_omron",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "PLC OMRON - SCADA",
        "host": "192.168.250.1",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "3000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "30",
        "PLC_WordStartBitAdjust": "1600",
        "PLC_LengthOfWordBitAdjust": "30",
        "PLC_WordStartWordDisplay": "2500",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "560",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "760",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "810",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "2d0a3405ec3948ea"
            ]
        ]
    },
    {
        "id": "43f157b0d49c25a2",
        "type": "file in",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Read Config",
        "filename": "config/default_Omron.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "897df20495d4617f"
            ]
        ]
    },
    {
        "id": "fe317fd257f90c7d",
        "type": "debug",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "808365a8f78d20bd",
        "type": "file",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 710,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "0d5358bc118d6acf",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Write OMRON Scada",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "43f157b0d49c25a2",
                "ea45700ac4d0533b"
            ]
        ]
    },
    {
        "id": "ea45700ac4d0533b",
        "type": "function",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Omron.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "327cc5fd38497ae6",
                "f88dea74a641f61b"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "9afd35da868ca5da",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 540,
        "y": 320,
        "wires": [
            [
                "327cc5fd38497ae6"
            ]
        ]
    },
    {
        "id": "8685d277cab074a8",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "Show Debug_Length_Rec PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"length_recei_fins\":\"Toogle\"}",
        "payloadType": "json",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "327cc5fd38497ae6"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "5c7525700e1f25ee",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "327cc5fd38497ae6"
            ]
        ]
    },
    {
        "id": "2d0a3405ec3948ea",
        "type": "debug",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 360,
        "wires": []
    },
    {
        "id": "a9c42ea1cb5b9972",
        "type": "plc_omron",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "PLC OMRON - SCADA",
        "host": "192.168.250.1",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "3000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "30",
        "PLC_WordStartBitAdjust": "1600",
        "PLC_LengthOfWordBitAdjust": "30",
        "PLC_WordStartWordDisplay": "2500",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "560",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "760",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "810",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 1000,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f88dea74a641f61b",
        "type": "function",
        "z": "a8a33a85dc004d84",
        "g": "9cd9cc101293bcb9",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "4ad871f82e70b865",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "6f45e3bef14aebc9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "5f1f2cd962a00c67"
            ]
        ]
    },
    {
        "id": "5f1f2cd962a00c67",
        "type": "function",
        "z": "a8a33a85dc004d84",
        "g": "6f45e3bef14aebc9",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 60,
        "wires": [
            [
                "51f13f878f4a74ba"
            ]
        ]
    },
    {
        "id": "51f13f878f4a74ba",
        "type": "debug",
        "z": "a8a33a85dc004d84",
        "g": "6f45e3bef14aebc9",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "a480d8ce1881f94d",
        "type": "function",
        "z": "a8a33a85dc004d84",
        "g": "6f45e3bef14aebc9",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "43cf537471215e67",
        "type": "inject",
        "z": "a8a33a85dc004d84",
        "g": "6f45e3bef14aebc9",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "a480d8ce1881f94d"
            ]
        ]
    },
    {
        "id": "4469193b9f397b59",
        "type": "plc_omron",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "PLC OMRON STAMPING MACHINE 1",
        "host": "192.168.2.190",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "80",
        "PLC_WordStartBitDisplay": "80",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "900",
        "PLC_WordStartWordAdjust": "1000",
        "PLC_LengthOfWordWordAdjust": "2",
        "PLC_WordStartDWordDisplay": "1000",
        "PLC_LengthOfWordDWordDisplay": "0",
        "PLC_WordStartDWordAdjust": "1000",
        "PLC_LengthOfWordDWordAdjust": "0",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 870,
        "y": 340,
        "wires": [
            [
                "697eef8e2eb6c7d7"
            ]
        ]
    },
    {
        "id": "29edde1f60f2f225",
        "type": "file in",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Read Config",
        "filename": "config/default_StampingMachine.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 470,
        "y": 220,
        "wires": [
            [
                "65fffd4480918925",
                "2a419cd75229dbf6"
            ]
        ]
    },
    {
        "id": "2a419cd75229dbf6",
        "type": "debug",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 200,
        "wires": []
    },
    {
        "id": "65fffd4480918925",
        "type": "file",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 690,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "68009e0522165b21",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Write Stamping Machine 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "29edde1f60f2f225",
                "698e87e3e6183ed7",
                "f37458827ae8051a"
            ]
        ]
    },
    {
        "id": "698e87e3e6183ed7",
        "type": "function",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/StampingMachine_Err_Factory.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "ba6c472e386be3c4",
                "cfb58821f7c529d2"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "e60a2206e4e3506d",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 490,
        "y": 340,
        "wires": [
            [
                "ba6c472e386be3c4"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "7a776ccea47bfb94",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 500,
        "y": 300,
        "wires": [
            [
                "ba6c472e386be3c4"
            ]
        ]
    },
    {
        "id": "697eef8e2eb6c7d7",
        "type": "debug",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 340,
        "wires": []
    },
    {
        "id": "37858ca3db69a2c4",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "ba6c472e386be3c4"
            ]
        ]
    },
    {
        "id": "18e4c7e3ad8be02a",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "29edde1f60f2f225"
            ]
        ]
    },
    {
        "id": "f2b74b8804aa18c0",
        "type": "function",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "Stamping Machine PROCESS",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\n\nvar SubFunction = global.get(\"SubFunction\");\nvar ProjectVariables = global.get(\"ProjectVariable\");\nvar ProjectFunction = global.get(\"ProjectFunction\");\nvar count = 0\nVariables.ListString[1] = new Array(170).fill('---');\nvar myInitial = setInterval(fnTimer1s, 1000);\n\nfunction fnTimer1s() {\n    let a = new Date()\n    Variables.ListString[1][19] = ((a.getHours() < 10 ? \"0\" : '') + a.getHours() + ':' + (a.getMinutes() < 10 ? \"0\" : '') + a.getMinutes() + ':' + (a.getSeconds() < 10 ? \"0\" : '') + a.getSeconds())\n    Variables.ListString[1][39] = ((a.getDate() < 10 ? \"0\" : '') + a.getDate() + '/' + ((a.getMonth() + 1) < 10 ? \"0\" : '') + (a.getMonth() + 1) + '/' + (a.getFullYear() < 10 ? \"0\" : '') + a.getFullYear())\n}\ntry {\n    setInterval(function () {\n        if (parseInt(ProjectVariables.waitStart) > 0) {\n            ProjectVariables.waitStart = parseInt(ProjectVariables.waitStart) - 1\n        }\n\n        //Check Operator Machine 1\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][204], ProjectVariables.Old_Machine1_NV1, Variables.ListString[1][1],\n                    Variables.WordDisplay[1][205], ProjectVariables.Old_Machine1_NV2, Variables.ListString[1][2],\n                    Variables.WordDisplay[1][206], ProjectVariables.Old_Machine1_NV3, Variables.ListString[1][3],\n                    Variables.WordDisplay[1][207], ProjectVariables.Old_Machine1_NV4, Variables.ListString[1][4],\n                    Variables.WordDisplay[1][208], ProjectVariables.Old_Machine1_NV5, Variables.ListString[1][5],\n                    Variables.WordDisplay[1][209], ProjectVariables.Old_Machine1_NV6, Variables.ListString[1][6],\n                    Variables.WordDisplay[1][210], ProjectVariables.Old_Machine1_NV7, Variables.ListString[1][7],\n                    Variables.WordDisplay[1][211], ProjectVariables.Old_Machine1_NV8, Variables.ListString[1][8],\n                    Variables.WordDisplay[1][212], ProjectVariables.Old_Machine1_NV9, Variables.ListString[1][9],\n                    Variables.WordDisplay[1][213], ProjectVariables.Old_Machine1_NV10, Variables.ListString[1][10],\n                    Variables.WordDisplay[1][214], ProjectVariables.Old_Machine1_NV11, Variables.ListString[1][11]\n                )\n            ProjectVariables.Old_Machine1_NV1 = old_id1\n            ProjectVariables.Old_Machine1_NV2 = old_id2\n            ProjectVariables.Old_Machine1_NV3 = old_id3\n            ProjectVariables.Old_Machine1_NV4 = old_id4\n            ProjectVariables.Old_Machine1_NV5 = old_id5\n            ProjectVariables.Old_Machine1_NV6 = old_id6\n            ProjectVariables.Old_Machine1_NV7 = old_id7\n            ProjectVariables.Old_Machine1_NV8 = old_id8\n            ProjectVariables.Old_Machine1_NV9 = old_id9\n            ProjectVariables.Old_Machine1_NV10 = old_id10\n            ProjectVariables.Old_Machine1_NV11 = old_id11\n            Variables.ListString[1][1] = list1\n            Variables.ListString[1][2] = list2\n            Variables.ListString[1][3] = list3\n            Variables.ListString[1][4] = list4\n            Variables.ListString[1][5] = list5\n            Variables.ListString[1][6] = list6\n            Variables.ListString[1][7] = list7\n            Variables.ListString[1][8] = list8\n            Variables.ListString[1][9] = list9\n            Variables.ListString[1][10] = list10\n            Variables.ListString[1][11] = list11\n        }\n        //Check Operator Machine 2\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][224], ProjectVariables.Old_Machine2_NV1, Variables.ListString[1][21],\n                    Variables.WordDisplay[1][225], ProjectVariables.Old_Machine2_NV2, Variables.ListString[1][22],\n                    Variables.WordDisplay[1][226], ProjectVariables.Old_Machine2_NV3, Variables.ListString[1][23],\n                    Variables.WordDisplay[1][227], ProjectVariables.Old_Machine2_NV4, Variables.ListString[1][24],\n                    Variables.WordDisplay[1][228], ProjectVariables.Old_Machine2_NV5, Variables.ListString[1][25],\n                    Variables.WordDisplay[1][229], ProjectVariables.Old_Machine2_NV6, Variables.ListString[1][26],\n                    Variables.WordDisplay[1][230], ProjectVariables.Old_Machine2_NV7, Variables.ListString[1][27],\n                    Variables.WordDisplay[1][231], ProjectVariables.Old_Machine2_NV8, Variables.ListString[1][28],\n                    Variables.WordDisplay[1][232], ProjectVariables.Old_Machine2_NV9, Variables.ListString[1][29],\n                    Variables.WordDisplay[1][233], ProjectVariables.Old_Machine2_NV10, Variables.ListString[1][30],\n                    Variables.WordDisplay[1][234], ProjectVariables.Old_Machine2_NV11, Variables.ListString[1][31]\n                )\n            ProjectVariables.Old_Machine2_NV1 = old_id1\n            ProjectVariables.Old_Machine2_NV2 = old_id2\n            ProjectVariables.Old_Machine2_NV3 = old_id3\n            ProjectVariables.Old_Machine2_NV4 = old_id4\n            ProjectVariables.Old_Machine2_NV5 = old_id5\n            ProjectVariables.Old_Machine2_NV6 = old_id6\n            ProjectVariables.Old_Machine2_NV7 = old_id7\n            ProjectVariables.Old_Machine2_NV8 = old_id8\n            ProjectVariables.Old_Machine2_NV9 = old_id9\n            ProjectVariables.Old_Machine2_NV10 = old_id10\n            ProjectVariables.Old_Machine2_NV11 = old_id11\n            Variables.ListString[1][21] = list1\n            Variables.ListString[1][22] = list2\n            Variables.ListString[1][23] = list3\n            Variables.ListString[1][24] = list4\n            Variables.ListString[1][25] = list5\n            Variables.ListString[1][26] = list6\n            Variables.ListString[1][27] = list7\n            Variables.ListString[1][28] = list8\n            Variables.ListString[1][29] = list9\n            Variables.ListString[1][30] = list10\n            Variables.ListString[1][31] = list11\n        }\n        //Check Operator Machine 3\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][244], ProjectVariables.Old_Machine3_NV1, Variables.ListString[1][41],\n                    Variables.WordDisplay[1][245], ProjectVariables.Old_Machine3_NV2, Variables.ListString[1][42],\n                    Variables.WordDisplay[1][246], ProjectVariables.Old_Machine3_NV3, Variables.ListString[1][43],\n                    Variables.WordDisplay[1][247], ProjectVariables.Old_Machine3_NV4, Variables.ListString[1][44],\n                    Variables.WordDisplay[1][248], ProjectVariables.Old_Machine3_NV5, Variables.ListString[1][45],\n                    Variables.WordDisplay[1][249], ProjectVariables.Old_Machine3_NV6, Variables.ListString[1][46],\n                    Variables.WordDisplay[1][250], ProjectVariables.Old_Machine3_NV7, Variables.ListString[1][47],\n                    Variables.WordDisplay[1][251], ProjectVariables.Old_Machine3_NV8, Variables.ListString[1][48],\n                    Variables.WordDisplay[1][252], ProjectVariables.Old_Machine3_NV9, Variables.ListString[1][49],\n                    Variables.WordDisplay[1][253], ProjectVariables.Old_Machine3_NV10, Variables.ListString[1][50],\n                    Variables.WordDisplay[1][254], ProjectVariables.Old_Machine3_NV11, Variables.ListString[1][51]\n                )\n            ProjectVariables.Old_Machine3_NV1 = old_id1\n            ProjectVariables.Old_Machine3_NV2 = old_id2\n            ProjectVariables.Old_Machine3_NV3 = old_id3\n            ProjectVariables.Old_Machine3_NV4 = old_id4\n            ProjectVariables.Old_Machine3_NV5 = old_id5\n            ProjectVariables.Old_Machine3_NV6 = old_id6\n            ProjectVariables.Old_Machine3_NV7 = old_id7\n            ProjectVariables.Old_Machine3_NV8 = old_id8\n            ProjectVariables.Old_Machine3_NV9 = old_id9\n            ProjectVariables.Old_Machine3_NV10 = old_id10\n            ProjectVariables.Old_Machine3_NV11 = old_id11\n            Variables.ListString[1][41] = list1\n            Variables.ListString[1][42] = list2\n            Variables.ListString[1][43] = list3\n            Variables.ListString[1][44] = list4\n            Variables.ListString[1][45] = list5\n            Variables.ListString[1][46] = list6\n            Variables.ListString[1][47] = list7\n            Variables.ListString[1][48] = list8\n            Variables.ListString[1][49] = list9\n            Variables.ListString[1][50] = list10\n            Variables.ListString[1][51] = list11\n        }\n        //Check Operator Machine 4\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][264], ProjectVariables.Old_Machine4_NV1, Variables.ListString[1][61],\n                    Variables.WordDisplay[1][265], ProjectVariables.Old_Machine4_NV2, Variables.ListString[1][62],\n                    Variables.WordDisplay[1][266], ProjectVariables.Old_Machine4_NV3, Variables.ListString[1][63],\n                    Variables.WordDisplay[1][267], ProjectVariables.Old_Machine4_NV4, Variables.ListString[1][64],\n                    Variables.WordDisplay[1][268], ProjectVariables.Old_Machine4_NV5, Variables.ListString[1][65],\n                    Variables.WordDisplay[1][269], ProjectVariables.Old_Machine4_NV6, Variables.ListString[1][66],\n                    Variables.WordDisplay[1][270], ProjectVariables.Old_Machine4_NV7, Variables.ListString[1][67],\n                    Variables.WordDisplay[1][271], ProjectVariables.Old_Machine4_NV8, Variables.ListString[1][68],\n                    Variables.WordDisplay[1][272], ProjectVariables.Old_Machine4_NV9, Variables.ListString[1][69],\n                    Variables.WordDisplay[1][273], ProjectVariables.Old_Machine4_NV10, Variables.ListString[1][70],\n                    Variables.WordDisplay[1][274], ProjectVariables.Old_Machine4_NV11, Variables.ListString[1][71]\n                )\n            ProjectVariables.Old_Machine4_NV1 = old_id1\n            ProjectVariables.Old_Machine4_NV2 = old_id2\n            ProjectVariables.Old_Machine4_NV3 = old_id3\n            ProjectVariables.Old_Machine4_NV4 = old_id4\n            ProjectVariables.Old_Machine4_NV5 = old_id5\n            ProjectVariables.Old_Machine4_NV6 = old_id6\n            ProjectVariables.Old_Machine4_NV7 = old_id7\n            ProjectVariables.Old_Machine4_NV8 = old_id8\n            ProjectVariables.Old_Machine4_NV9 = old_id9\n            ProjectVariables.Old_Machine4_NV10 = old_id10\n            ProjectVariables.Old_Machine4_NV11 = old_id11\n            Variables.ListString[1][61] = list1\n            Variables.ListString[1][62] = list2\n            Variables.ListString[1][63] = list3\n            Variables.ListString[1][64] = list4\n            Variables.ListString[1][65] = list5\n            Variables.ListString[1][66] = list6\n            Variables.ListString[1][67] = list7\n            Variables.ListString[1][68] = list8\n            Variables.ListString[1][69] = list9\n            Variables.ListString[1][70] = list10\n            Variables.ListString[1][71] = list11\n        }\n        //Check Operator Machine 5\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][284], ProjectVariables.Old_Machine5_NV1, Variables.ListString[1][81],\n                    Variables.WordDisplay[1][285], ProjectVariables.Old_Machine5_NV2, Variables.ListString[1][82],\n                    Variables.WordDisplay[1][286], ProjectVariables.Old_Machine5_NV3, Variables.ListString[1][83],\n                    Variables.WordDisplay[1][287], ProjectVariables.Old_Machine5_NV4, Variables.ListString[1][84],\n                    Variables.WordDisplay[1][288], ProjectVariables.Old_Machine5_NV5, Variables.ListString[1][85],\n                    Variables.WordDisplay[1][289], ProjectVariables.Old_Machine5_NV6, Variables.ListString[1][86],\n                    Variables.WordDisplay[1][290], ProjectVariables.Old_Machine5_NV7, Variables.ListString[1][87],\n                    Variables.WordDisplay[1][291], ProjectVariables.Old_Machine5_NV8, Variables.ListString[1][88],\n                    Variables.WordDisplay[1][292], ProjectVariables.Old_Machine5_NV9, Variables.ListString[1][89],\n                    Variables.WordDisplay[1][293], ProjectVariables.Old_Machine5_NV10, Variables.ListString[1][90],\n                    Variables.WordDisplay[1][294], ProjectVariables.Old_Machine5_NV11, Variables.ListString[1][91]\n                )\n            ProjectVariables.Old_Machine5_NV1 = old_id1\n            ProjectVariables.Old_Machine5_NV2 = old_id2\n            ProjectVariables.Old_Machine5_NV3 = old_id3\n            ProjectVariables.Old_Machine5_NV4 = old_id4\n            ProjectVariables.Old_Machine5_NV5 = old_id5\n            ProjectVariables.Old_Machine5_NV6 = old_id6\n            ProjectVariables.Old_Machine5_NV7 = old_id7\n            ProjectVariables.Old_Machine5_NV8 = old_id8\n            ProjectVariables.Old_Machine5_NV9 = old_id9\n            ProjectVariables.Old_Machine5_NV10 = old_id10\n            ProjectVariables.Old_Machine5_NV11 = old_id11\n            Variables.ListString[1][81] = list1\n            Variables.ListString[1][82] = list2\n            Variables.ListString[1][83] = list3\n            Variables.ListString[1][84] = list4\n            Variables.ListString[1][85] = list5\n            Variables.ListString[1][86] = list6\n            Variables.ListString[1][87] = list7\n            Variables.ListString[1][88] = list8\n            Variables.ListString[1][89] = list9\n            Variables.ListString[1][90] = list10\n            Variables.ListString[1][91] = list11\n        }\n        //Check Operator Machine 6\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][304], ProjectVariables.Old_Machine6_NV1, Variables.ListString[1][101],\n                    Variables.WordDisplay[1][305], ProjectVariables.Old_Machine6_NV2, Variables.ListString[1][102],\n                    Variables.WordDisplay[1][306], ProjectVariables.Old_Machine6_NV3, Variables.ListString[1][103],\n                    Variables.WordDisplay[1][307], ProjectVariables.Old_Machine6_NV4, Variables.ListString[1][104],\n                    Variables.WordDisplay[1][308], ProjectVariables.Old_Machine6_NV5, Variables.ListString[1][105],\n                    Variables.WordDisplay[1][309], ProjectVariables.Old_Machine6_NV6, Variables.ListString[1][106],\n                    Variables.WordDisplay[1][310], ProjectVariables.Old_Machine6_NV7, Variables.ListString[1][107],\n                    Variables.WordDisplay[1][311], ProjectVariables.Old_Machine6_NV8, Variables.ListString[1][108],\n                    Variables.WordDisplay[1][312], ProjectVariables.Old_Machine6_NV9, Variables.ListString[1][109],\n                    Variables.WordDisplay[1][313], ProjectVariables.Old_Machine6_NV10, Variables.ListString[1][110],\n                    Variables.WordDisplay[1][314], ProjectVariables.Old_Machine6_NV11, Variables.ListString[1][111]\n                )\n            ProjectVariables.Old_Machine6_NV1 = old_id1\n            ProjectVariables.Old_Machine6_NV2 = old_id2\n            ProjectVariables.Old_Machine6_NV3 = old_id3\n            ProjectVariables.Old_Machine6_NV4 = old_id4\n            ProjectVariables.Old_Machine6_NV5 = old_id5\n            ProjectVariables.Old_Machine6_NV6 = old_id6\n            ProjectVariables.Old_Machine6_NV7 = old_id7\n            ProjectVariables.Old_Machine6_NV8 = old_id8\n            ProjectVariables.Old_Machine6_NV9 = old_id9\n            ProjectVariables.Old_Machine6_NV10 = old_id10\n            ProjectVariables.Old_Machine6_NV11 = old_id11\n            Variables.ListString[1][101] = list1\n            Variables.ListString[1][102] = list2\n            Variables.ListString[1][103] = list3\n            Variables.ListString[1][104] = list4\n            Variables.ListString[1][105] = list5\n            Variables.ListString[1][106] = list6\n            Variables.ListString[1][107] = list7\n            Variables.ListString[1][108] = list8\n            Variables.ListString[1][109] = list9\n            Variables.ListString[1][110] = list10\n            Variables.ListString[1][111] = list11\n        }\n        //Check Operator Machine 7\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][324], ProjectVariables.Old_Machine7_NV1, Variables.ListString[1][121],\n                    Variables.WordDisplay[1][325], ProjectVariables.Old_Machine7_NV2, Variables.ListString[1][122],\n                    Variables.WordDisplay[1][326], ProjectVariables.Old_Machine7_NV3, Variables.ListString[1][123],\n                    Variables.WordDisplay[1][327], ProjectVariables.Old_Machine7_NV4, Variables.ListString[1][124],\n                    Variables.WordDisplay[1][328], ProjectVariables.Old_Machine7_NV5, Variables.ListString[1][125],\n                    Variables.WordDisplay[1][329], ProjectVariables.Old_Machine7_NV6, Variables.ListString[1][126],\n                    Variables.WordDisplay[1][330], ProjectVariables.Old_Machine7_NV7, Variables.ListString[1][127],\n                    Variables.WordDisplay[1][331], ProjectVariables.Old_Machine7_NV8, Variables.ListString[1][128],\n                    Variables.WordDisplay[1][332], ProjectVariables.Old_Machine7_NV9, Variables.ListString[1][129],\n                    Variables.WordDisplay[1][333], ProjectVariables.Old_Machine7_NV10, Variables.ListString[1][130],\n                    Variables.WordDisplay[1][334], ProjectVariables.Old_Machine7_NV11, Variables.ListString[1][131]\n                )\n            ProjectVariables.Old_Machine7_NV1 = old_id1\n            ProjectVariables.Old_Machine7_NV2 = old_id2\n            ProjectVariables.Old_Machine7_NV3 = old_id3\n            ProjectVariables.Old_Machine7_NV4 = old_id4\n            ProjectVariables.Old_Machine7_NV5 = old_id5\n            ProjectVariables.Old_Machine7_NV6 = old_id6\n            ProjectVariables.Old_Machine7_NV7 = old_id7\n            ProjectVariables.Old_Machine7_NV8 = old_id8\n            ProjectVariables.Old_Machine7_NV9 = old_id9\n            ProjectVariables.Old_Machine7_NV10 = old_id10\n            ProjectVariables.Old_Machine7_NV11 = old_id11\n            Variables.ListString[1][121] = list1\n            Variables.ListString[1][122] = list2\n            Variables.ListString[1][123] = list3\n            Variables.ListString[1][124] = list4\n            Variables.ListString[1][125] = list5\n            Variables.ListString[1][126] = list6\n            Variables.ListString[1][127] = list7\n            Variables.ListString[1][128] = list8\n            Variables.ListString[1][129] = list9\n            Variables.ListString[1][130] = list10\n            Variables.ListString[1][131] = list11\n        }\n        //Check Operator Machine 8\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][822], ProjectVariables.Old_Machine8_NV1, Variables.ListString[1][141],\n                    Variables.WordDisplay[1][823], ProjectVariables.Old_Machine8_NV2, Variables.ListString[1][142],\n                    Variables.WordDisplay[1][824], ProjectVariables.Old_Machine8_NV3, Variables.ListString[1][143],\n                    Variables.WordDisplay[1][825], ProjectVariables.Old_Machine8_NV4, Variables.ListString[1][144],\n                    Variables.WordDisplay[1][826], ProjectVariables.Old_Machine8_NV5, Variables.ListString[1][145],\n                    Variables.WordDisplay[1][827], ProjectVariables.Old_Machine8_NV6, Variables.ListString[1][146],\n                    Variables.WordDisplay[1][828], ProjectVariables.Old_Machine8_NV7, Variables.ListString[1][147],\n                    Variables.WordDisplay[1][829], ProjectVariables.Old_Machine8_NV8, Variables.ListString[1][148],\n                    Variables.WordDisplay[1][830], ProjectVariables.Old_Machine8_NV9, Variables.ListString[1][149],\n                    Variables.WordDisplay[1][831], ProjectVariables.Old_Machine8_NV10, Variables.ListString[1][150],\n                    Variables.WordDisplay[1][832], ProjectVariables.Old_Machine8_NV11, Variables.ListString[1][151]\n                )\n            ProjectVariables.Old_Machine8_NV1 = old_id1\n            ProjectVariables.Old_Machine8_NV2 = old_id2\n            ProjectVariables.Old_Machine8_NV3 = old_id3\n            ProjectVariables.Old_Machine8_NV4 = old_id4\n            ProjectVariables.Old_Machine8_NV5 = old_id5\n            ProjectVariables.Old_Machine8_NV6 = old_id6\n            ProjectVariables.Old_Machine8_NV7 = old_id7\n            ProjectVariables.Old_Machine8_NV8 = old_id8\n            ProjectVariables.Old_Machine8_NV9 = old_id9\n            ProjectVariables.Old_Machine8_NV10 = old_id10\n            ProjectVariables.Old_Machine8_NV11 = old_id11\n            Variables.ListString[1][141] = list1\n            Variables.ListString[1][142] = list2\n            Variables.ListString[1][143] = list3\n            Variables.ListString[1][144] = list4\n            Variables.ListString[1][145] = list5\n            Variables.ListString[1][146] = list6\n            Variables.ListString[1][147] = list7\n            Variables.ListString[1][148] = list8\n            Variables.ListString[1][149] = list9\n            Variables.ListString[1][150] = list10\n            Variables.ListString[1][151] = list11\n        }\n        //Check Operator Machine 9\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][839], ProjectVariables.Old_Machine9_NV1, Variables.ListString[1][161],\n                    Variables.WordDisplay[1][840], ProjectVariables.Old_Machine9_NV2, Variables.ListString[1][162],\n                    Variables.WordDisplay[1][841], ProjectVariables.Old_Machine9_NV3, Variables.ListString[1][163],\n                    Variables.WordDisplay[1][842], ProjectVariables.Old_Machine9_NV4, Variables.ListString[1][164],\n                    Variables.WordDisplay[1][843], ProjectVariables.Old_Machine9_NV5, Variables.ListString[1][165],\n                    Variables.WordDisplay[1][844], ProjectVariables.Old_Machine9_NV6, Variables.ListString[1][166],\n                    Variables.WordDisplay[1][845], ProjectVariables.Old_Machine9_NV7, Variables.ListString[1][167],\n                    Variables.WordDisplay[1][846], ProjectVariables.Old_Machine9_NV8, Variables.ListString[1][168],\n                    Variables.WordDisplay[1][847], ProjectVariables.Old_Machine9_NV9, Variables.ListString[1][169],\n                    Variables.WordDisplay[1][848], ProjectVariables.Old_Machine9_NV10, Variables.ListString[1][170],\n                    Variables.WordDisplay[1][849], ProjectVariables.Old_Machine9_NV11, Variables.ListString[1][171]\n                )\n            ProjectVariables.Old_Machine9_NV1 = old_id1\n            ProjectVariables.Old_Machine9_NV2 = old_id2\n            ProjectVariables.Old_Machine9_NV3 = old_id3\n            ProjectVariables.Old_Machine9_NV4 = old_id4\n            ProjectVariables.Old_Machine9_NV5 = old_id5\n            ProjectVariables.Old_Machine9_NV6 = old_id6\n            ProjectVariables.Old_Machine9_NV7 = old_id7\n            ProjectVariables.Old_Machine9_NV8 = old_id8\n            ProjectVariables.Old_Machine9_NV9 = old_id9\n            ProjectVariables.Old_Machine9_NV10 = old_id10\n            ProjectVariables.Old_Machine9_NV11 = old_id11\n            Variables.ListString[1][161] = list1\n            Variables.ListString[1][162] = list2\n            Variables.ListString[1][163] = list3\n            Variables.ListString[1][164] = list4\n            Variables.ListString[1][165] = list5\n            Variables.ListString[1][166] = list6\n            Variables.ListString[1][167] = list7\n            Variables.ListString[1][168] = list8\n            Variables.ListString[1][169] = list9\n            Variables.ListString[1][170] = list10\n            Variables.ListString[1][171] = list11\n        }\n        //Check Operator Machine 10\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][856], ProjectVariables.Old_Machine10_NV1, Variables.ListString[1][181],\n                    Variables.WordDisplay[1][857], ProjectVariables.Old_Machine10_NV2, Variables.ListString[1][182],\n                    Variables.WordDisplay[1][858], ProjectVariables.Old_Machine10_NV3, Variables.ListString[1][183],\n                    Variables.WordDisplay[1][859], ProjectVariables.Old_Machine10_NV4, Variables.ListString[1][184],\n                    Variables.WordDisplay[1][860], ProjectVariables.Old_Machine10_NV5, Variables.ListString[1][185],\n                    Variables.WordDisplay[1][861], ProjectVariables.Old_Machine10_NV6, Variables.ListString[1][186],\n                    Variables.WordDisplay[1][862], ProjectVariables.Old_Machine10_NV7, Variables.ListString[1][187],\n                    Variables.WordDisplay[1][863], ProjectVariables.Old_Machine10_NV8, Variables.ListString[1][188],\n                    Variables.WordDisplay[1][864], ProjectVariables.Old_Machine10_NV9, Variables.ListString[1][189],\n                    Variables.WordDisplay[1][865], ProjectVariables.Old_Machine10_NV10, Variables.ListString[1][190],\n                    Variables.WordDisplay[1][866], ProjectVariables.Old_Machine10_NV11, Variables.ListString[1][191]\n                )\n            ProjectVariables.Old_Machine10_NV1 = old_id1\n            ProjectVariables.Old_Machine10_NV2 = old_id2\n            ProjectVariables.Old_Machine10_NV3 = old_id3\n            ProjectVariables.Old_Machine10_NV4 = old_id4\n            ProjectVariables.Old_Machine10_NV5 = old_id5\n            ProjectVariables.Old_Machine10_NV6 = old_id6\n            ProjectVariables.Old_Machine10_NV7 = old_id7\n            ProjectVariables.Old_Machine10_NV8 = old_id8\n            ProjectVariables.Old_Machine10_NV9 = old_id9\n            ProjectVariables.Old_Machine10_NV10 = old_id10\n            ProjectVariables.Old_Machine10_NV11 = old_id11\n            Variables.ListString[1][181] = list1\n            Variables.ListString[1][182] = list2\n            Variables.ListString[1][183] = list3\n            Variables.ListString[1][184] = list4\n            Variables.ListString[1][185] = list5\n            Variables.ListString[1][186] = list6\n            Variables.ListString[1][187] = list7\n            Variables.ListString[1][188] = list8\n            Variables.ListString[1][189] = list9\n            Variables.ListString[1][190] = list10\n            Variables.ListString[1][191] = list11\n        }\n        //Check Operator Machine 11\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][873], ProjectVariables.Old_Machine11_NV1, Variables.ListString[1][201],\n                    Variables.WordDisplay[1][874], ProjectVariables.Old_Machine11_NV2, Variables.ListString[1][202],\n                    Variables.WordDisplay[1][875], ProjectVariables.Old_Machine11_NV3, Variables.ListString[1][203],\n                    Variables.WordDisplay[1][876], ProjectVariables.Old_Machine11_NV4, Variables.ListString[1][204],\n                    Variables.WordDisplay[1][877], ProjectVariables.Old_Machine11_NV5, Variables.ListString[1][205],\n                    Variables.WordDisplay[1][878], ProjectVariables.Old_Machine11_NV6, Variables.ListString[1][206],\n                    Variables.WordDisplay[1][879], ProjectVariables.Old_Machine11_NV7, Variables.ListString[1][207],\n                    Variables.WordDisplay[1][880], ProjectVariables.Old_Machine11_NV8, Variables.ListString[1][208],\n                    Variables.WordDisplay[1][881], ProjectVariables.Old_Machine11_NV9, Variables.ListString[1][209],\n                    Variables.WordDisplay[1][882], ProjectVariables.Old_Machine11_NV10, Variables.ListString[1][210],\n                    Variables.WordDisplay[1][883], ProjectVariables.Old_Machine11_NV11, Variables.ListString[1][211]\n                )\n            ProjectVariables.Old_Machine11_NV1 = old_id1\n            ProjectVariables.Old_Machine11_NV2 = old_id2\n            ProjectVariables.Old_Machine11_NV3 = old_id3\n            ProjectVariables.Old_Machine11_NV4 = old_id4\n            ProjectVariables.Old_Machine11_NV5 = old_id5\n            ProjectVariables.Old_Machine11_NV6 = old_id6\n            ProjectVariables.Old_Machine11_NV7 = old_id7\n            ProjectVariables.Old_Machine11_NV8 = old_id8\n            ProjectVariables.Old_Machine11_NV9 = old_id9\n            ProjectVariables.Old_Machine11_NV10 = old_id10\n            ProjectVariables.Old_Machine11_NV11 = old_id11\n            Variables.ListString[1][201] = list1\n            Variables.ListString[1][202] = list2\n            Variables.ListString[1][203] = list3\n            Variables.ListString[1][204] = list4\n            Variables.ListString[1][205] = list5\n            Variables.ListString[1][206] = list6\n            Variables.ListString[1][207] = list7\n            Variables.ListString[1][208] = list8\n            Variables.ListString[1][209] = list9\n            Variables.ListString[1][210] = list10\n            Variables.ListString[1][211] = list11\n        }\n        //Check Operator Machine 12\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5, old_id6, list6,\n                old_id7, list7, old_id8, list8, old_id9, list9,\n                old_id10, list10, old_id11, list11, } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][890], ProjectVariables.Old_Machine12_NV1, Variables.ListString[1][221],\n                    Variables.WordDisplay[1][891], ProjectVariables.Old_Machine12_NV2, Variables.ListString[1][222],\n                    Variables.WordDisplay[1][892], ProjectVariables.Old_Machine12_NV3, Variables.ListString[1][223],\n                    Variables.WordDisplay[1][893], ProjectVariables.Old_Machine12_NV4, Variables.ListString[1][224],\n                    Variables.WordDisplay[1][894], ProjectVariables.Old_Machine12_NV5, Variables.ListString[1][225],\n                    Variables.WordDisplay[1][895], ProjectVariables.Old_Machine12_NV6, Variables.ListString[1][226],\n                    Variables.WordDisplay[1][896], ProjectVariables.Old_Machine12_NV7, Variables.ListString[1][227],\n                    Variables.WordDisplay[1][897], ProjectVariables.Old_Machine12_NV8, Variables.ListString[1][228],\n                    Variables.WordDisplay[1][898], ProjectVariables.Old_Machine12_NV9, Variables.ListString[1][229],\n                    Variables.WordDisplay[1][899], ProjectVariables.Old_Machine12_NV10, Variables.ListString[1][230],\n                    Variables.WordDisplay[1][900], ProjectVariables.Old_Machine12_NV11, Variables.ListString[1][231]\n                )\n            ProjectVariables.Old_Machine12_NV1 = old_id1\n            ProjectVariables.Old_Machine12_NV2 = old_id2\n            ProjectVariables.Old_Machine12_NV3 = old_id3\n            ProjectVariables.Old_Machine12_NV4 = old_id4\n            ProjectVariables.Old_Machine12_NV5 = old_id5\n            ProjectVariables.Old_Machine12_NV6 = old_id6\n            ProjectVariables.Old_Machine12_NV7 = old_id7\n            ProjectVariables.Old_Machine12_NV8 = old_id8\n            ProjectVariables.Old_Machine12_NV9 = old_id9\n            ProjectVariables.Old_Machine12_NV10 = old_id10\n            ProjectVariables.Old_Machine12_NV11 = old_id11\n            Variables.ListString[1][221] = list1\n            Variables.ListString[1][222] = list2\n            Variables.ListString[1][223] = list3\n            Variables.ListString[1][224] = list4\n            Variables.ListString[1][225] = list5\n            Variables.ListString[1][226] = list6\n            Variables.ListString[1][227] = list7\n            Variables.ListString[1][228] = list8\n            Variables.ListString[1][229] = list9\n            Variables.ListString[1][230] = list10\n            Variables.ListString[1][231] = list11\n        }\n\n\n        //Check SP Machine 1\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][126],\n                ProjectVariables.Old_Machine1_SP,\n                Variables.ListString[1][0],\n                Variables.ListString[1][13],\n                Variables.ListString[1][14],\n                Variables.ListString[1][15],\n            )\n            if (ProjectVariables.Old_Machine1_SP !== old_sp) {\n                ProjectVariables.Old_Machine1_SP = old_sp\n                Variables.ListString[1][0] = list_sp\n                Variables.ListString[1][13] = list_tieuchuan_nhietdo\n                Variables.ListString[1][14] = list_tieuchuan_thoigian\n                Variables.ListString[1][15] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong1 = heso_sanluong\n            }\n        }\n        //Check SP Machine 2\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][136],\n                ProjectVariables.Old_Machine2_SP,\n                Variables.ListString[1][20],\n                Variables.ListString[1][33],\n                Variables.ListString[1][34],\n                Variables.ListString[1][35]\n            )\n            if (ProjectVariables.Old_Machine2_SP !== old_sp) {\n                ProjectVariables.Old_Machine2_SP = old_sp\n                Variables.ListString[1][20] = list_sp\n                Variables.ListString[1][33] = list_tieuchuan_nhietdo\n                Variables.ListString[1][34] = list_tieuchuan_thoigian\n                Variables.ListString[1][35] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong2 = heso_sanluong\n            }\n        }\n        //Check SP Machine 3\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][146],\n                ProjectVariables.Old_Machine3_SP,\n                Variables.ListString[1][40],\n                Variables.ListString[1][53],\n                Variables.ListString[1][54],\n                Variables.ListString[1][55]\n            )\n            if (ProjectVariables.Old_Machine3_SP !== old_sp) {\n                ProjectVariables.Old_Machine3_SP = old_sp\n                Variables.ListString[1][40] = list_sp\n                Variables.ListString[1][53] = list_tieuchuan_nhietdo\n                Variables.ListString[1][54] = list_tieuchuan_thoigian\n                Variables.ListString[1][55] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong3 = heso_sanluong\n            }\n        }\n        //Check SP Machine 4\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][156],\n                ProjectVariables.Old_Machine4_SP,\n                Variables.ListString[1][60],\n                Variables.ListString[1][73],\n                Variables.ListString[1][74],\n                Variables.ListString[1][75]\n            )\n            if (ProjectVariables.Old_Machine4_SP !== old_sp) {\n                ProjectVariables.Old_Machine4_SP = old_sp\n                Variables.ListString[1][60] = list_sp\n                Variables.ListString[1][73] = list_tieuchuan_nhietdo\n                Variables.ListString[1][74] = list_tieuchuan_thoigian\n                Variables.ListString[1][75] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong4 = heso_sanluong\n            }\n        }\n        //Check SP Machine 5\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][166],\n                ProjectVariables.Old_Machine5_SP,\n                Variables.ListString[1][80],\n                Variables.ListString[1][93],\n                Variables.ListString[1][94],\n                Variables.ListString[1][95]\n            )\n            if (ProjectVariables.Old_Machine5_SP !== old_sp) {\n                ProjectVariables.Old_Machine5_SP = old_sp\n                Variables.ListString[1][80] = list_sp\n                Variables.ListString[1][93] = list_tieuchuan_nhietdo\n                Variables.ListString[1][94] = list_tieuchuan_thoigian\n                Variables.ListString[1][95] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong5 = heso_sanluong\n            }\n        }\n        //Check SP Machine 6\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][176],\n                ProjectVariables.Old_Machine6_SP,\n                Variables.ListString[1][100],\n                Variables.ListString[1][113],\n                Variables.ListString[1][114],\n                Variables.ListString[1][115]\n            )\n            if (ProjectVariables.Old_Machine6_SP !== old_sp) {\n                ProjectVariables.Old_Machine6_SP = old_sp\n                Variables.ListString[1][100] = list_sp\n                Variables.ListString[1][113] = list_tieuchuan_nhietdo\n                Variables.ListString[1][114] = list_tieuchuan_thoigian\n                Variables.ListString[1][115] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong6 = heso_sanluong\n            }\n        }\n        //Check SP Machine 7\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][186],\n                ProjectVariables.Old_Machine7_SP,\n                Variables.ListString[1][120],\n                Variables.ListString[1][133],\n                Variables.ListString[1][134],\n                Variables.ListString[1][135]\n            )\n            if (ProjectVariables.Old_Machine7_SP !== old_sp) {\n                ProjectVariables.Old_Machine7_SP = old_sp\n                Variables.ListString[1][120] = list_sp\n                Variables.ListString[1][133] = list_tieuchuan_nhietdo\n                Variables.ListString[1][134] = list_tieuchuan_thoigian\n                Variables.ListString[1][135] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong7 = heso_sanluong\n            }\n        }\n        //Check SP Machine 8\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][627],//!\n                ProjectVariables.Old_Machine8_SP,//!\n                Variables.ListString[1][140],//!\n                Variables.ListString[1][153],//!\n                Variables.ListString[1][154],//!\n                Variables.ListString[1][155]//!\n            )\n            if (ProjectVariables.Old_Machine8_SP !== old_sp) {\n                ProjectVariables.Old_Machine8_SP = old_sp\n                Variables.ListString[1][140] = list_sp\n                Variables.ListString[1][153] = list_tieuchuan_nhietdo\n                Variables.ListString[1][154] = list_tieuchuan_thoigian\n                Variables.ListString[1][155] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong8 = heso_sanluong\n            }\n        }\n        //Check SP Machine 9\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][670],//!\n                ProjectVariables.Old_Machine9_SP,//!\n                Variables.ListString[1][160],//!\n                Variables.ListString[1][173],\n                Variables.ListString[1][174],\n                Variables.ListString[1][175]\n            )\n            if (ProjectVariables.Old_Machine9_SP !== old_sp) {\n                ProjectVariables.Old_Machine9_SP = old_sp\n                Variables.ListString[1][160] = list_sp\n                Variables.ListString[1][173] = list_tieuchuan_nhietdo\n                Variables.ListString[1][174] = list_tieuchuan_thoigian\n                Variables.ListString[1][175] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong9 = heso_sanluong\n            }\n        }\n        //Check SP Machine 10\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][713],//!ok\n                ProjectVariables.Old_Machine10_SP,//!ok\n                Variables.ListString[1][180],//!ok\n                Variables.ListString[1][193],//!ok\n                Variables.ListString[1][194],//!ok\n                Variables.ListString[1][195]//!ok\n            )\n            if (ProjectVariables.Old_Machine10_SP !== old_sp) {\n                ProjectVariables.Old_Machine10_SP = old_sp\n                Variables.ListString[1][180] = list_sp//ok\n                Variables.ListString[1][193] = list_tieuchuan_nhietdo\n                Variables.ListString[1][194] = list_tieuchuan_thoigian\n                Variables.ListString[1][195] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong10 = heso_sanluong\n            }\n        }\n        //Check SP Machine 11\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][756],//!ok\n                ProjectVariables.Old_Machine11_SP,//!\n                Variables.ListString[1][200],//!ok\n                Variables.ListString[1][213],\n                Variables.ListString[1][214],\n                Variables.ListString[1][215]\n            )\n            if (ProjectVariables.Old_Machine11_SP !== old_sp) {\n                ProjectVariables.Old_Machine11_SP = old_sp\n                Variables.ListString[1][200] = list_sp//ok\n                Variables.ListString[1][213] = list_tieuchuan_nhietdo\n                Variables.ListString[1][214] = list_tieuchuan_thoigian\n                Variables.ListString[1][215] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong11 = heso_sanluong\n            }\n        }\n        //Check SP Machine 12\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, list_tieuchuan_thoigian12, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][799],//!ok\n                ProjectVariables.Old_Machine12_SP,//!\n                Variables.ListString[1][220],//!ok\n                Variables.ListString[1][233],\n                Variables.ListString[1][234],\n                Variables.ListString[1][235]\n            )\n            if (ProjectVariables.Old_Machine12_SP !== old_sp) {\n                ProjectVariables.Old_Machine12_SP = old_sp\n                Variables.ListString[1][220] = list_sp//ok\n                Variables.ListString[1][233] = list_tieuchuan_nhietdo\n                Variables.ListString[1][234] = list_tieuchuan_thoigian\n                Variables.ListString[1][235] = list_tieuchuan_thoigian12\n                ProjectVariables.heso_sanluong12 = heso_sanluong\n            }\n        }\n\n        //Report ChiTiet 1\n        {\n            if (parseInt(Variables.BitDisplay[1][81]) == 0) {\n                ProjectVariables.Old_CheckReport1 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][81]) == 1 && ProjectVariables.Old_CheckReport1 == 0)) {\n                ProjectVariables.Old_CheckReport1 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine1();\n                }\n            }\n        }\n        //Report ChiTiet 2\n        {\n            if (parseInt(Variables.BitDisplay[1][82]) == 0) {\n                ProjectVariables.Old_CheckReport2 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][82]) == 1 && ProjectVariables.Old_CheckReport2 == 0)) {\n                ProjectVariables.Old_CheckReport2 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine2();\n                }\n            }\n        }\n        //Report ChiTiet 3\n        {\n            if (parseInt(Variables.BitDisplay[1][83]) == 0) {\n                ProjectVariables.Old_CheckReport3 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][83]) == 1 && ProjectVariables.Old_CheckReport3 == 0)) {\n                ProjectVariables.Old_CheckReport3 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine3();\n                }\n            }\n        }\n        //Report ChiTiet 4\n        {\n            if (parseInt(Variables.BitDisplay[1][84]) == 0) {\n                ProjectVariables.Old_CheckReport4 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][84]) == 1 && ProjectVariables.Old_CheckReport4 == 0)) {\n                ProjectVariables.Old_CheckReport4 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine4();\n                }\n            }\n        }\n        //Report ChiTiet 5\n        {\n            if (parseInt(Variables.BitDisplay[1][85]) == 0) {\n                ProjectVariables.Old_CheckReport5 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][85]) == 1 && ProjectVariables.Old_CheckReport5 == 0)) {\n                ProjectVariables.Old_CheckReport5 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine5();\n                }\n            }\n        }\n        //Report ChiTiet 6\n        {\n            if (parseInt(Variables.BitDisplay[1][86]) == 0) {\n                ProjectVariables.Old_CheckReport6 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][86]) == 1 && ProjectVariables.Old_CheckReport6 == 0)) {\n                ProjectVariables.Old_CheckReport6 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine6();\n                }\n            }\n        }\n        //Report ChiTiet 7\n        {\n            if (parseInt(Variables.BitDisplay[1][87]) == 0) {\n                ProjectVariables.Old_CheckReport7 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][87]) == 1 && ProjectVariables.Old_CheckReport7 == 0)) {\n                ProjectVariables.Old_CheckReport7 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine7();\n                }\n            }\n        }\n        //Report ChiTiet 8\n        {\n            if (parseInt(Variables.BitDisplay[1][88]) == 0) {\n                ProjectVariables.Old_CheckReport8 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][88]) == 1 && ProjectVariables.Old_CheckReport8 == 0)) {\n                ProjectVariables.Old_CheckReport8 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine8();\n                }\n            }\n        }\n        //Report ChiTiet 9\n        {\n            if (parseInt(Variables.BitDisplay[1][42]) == 0) {\n                ProjectVariables.Old_CheckReport9 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][42]) == 1 && ProjectVariables.Old_CheckReport9 == 0)) {\n                ProjectVariables.Old_CheckReport9 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine9();\n                }\n            }\n        }\n        //Report ChiTiet 10\n        {\n            if (parseInt(Variables.BitDisplay[1][114]) == 0) {\n                ProjectVariables.Old_CheckReport10 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][114]) == 1 && ProjectVariables.Old_CheckReport10 == 0)) {\n                ProjectVariables.Old_CheckReport10 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine10();\n                }\n            }\n        }\n        //Report ChiTiet 11\n        {\n            if (parseInt(Variables.BitDisplay[1][119]) == 0) {\n                ProjectVariables.Old_CheckReport11 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][119]) == 1 && ProjectVariables.Old_CheckReport11 == 0)) {\n                ProjectVariables.Old_CheckReport11 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine11();\n                }\n            }\n        }\n        //Report ChiTiet 12\n        {\n            if (parseInt(Variables.BitDisplay[1][124]) == 0) {\n                ProjectVariables.Old_CheckReport12 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][124]) == 1 && ProjectVariables.Old_CheckReport12 == 0)) {\n                ProjectVariables.Old_CheckReport12 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportChiTiet_Machine12();\n                }\n            }\n        }\n\n        //Time BatDauCa 1\n        {\n            if (parseInt(Variables.BitDisplay[1][48]) == 0) {\n                ProjectVariables.Old_BatDauCa1 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][48]) == 1 && ProjectVariables.Old_BatDauCa1 == 0)) {\n                ProjectVariables.Old_BatDauCa1 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(1);\n                }\n            }\n        }\n        //Time BatDauCa 2\n        {\n            if (parseInt(Variables.BitDisplay[1][50]) == 0) {\n                ProjectVariables.Old_BatDauCa2 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][50]) == 1 && ProjectVariables.Old_BatDauCa2 == 0)) {\n                ProjectVariables.Old_BatDauCa2 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(2);\n                }\n            }\n        }\n        //Time BatDauCa 3\n        {\n            if (parseInt(Variables.BitDisplay[1][52]) == 0) {\n                ProjectVariables.Old_BatDauCa3 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][52]) == 1 && ProjectVariables.Old_BatDauCa3 == 0)) {\n                ProjectVariables.Old_BatDauCa3 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(3);\n                }\n            }\n        }\n        //Time BatDauCa 4\n        {\n            if (parseInt(Variables.BitDisplay[1][54]) == 0) {\n                ProjectVariables.Old_BatDauCa4 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][54]) == 1 && ProjectVariables.Old_BatDauCa4 == 0)) {\n                ProjectVariables.Old_BatDauCa4 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(4);\n                }\n            }\n        }\n        //Time BatDauCa 5\n        {\n            if (parseInt(Variables.BitDisplay[1][56]) == 0) {\n                ProjectVariables.Old_BatDauCa5 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][56]) == 1 && ProjectVariables.Old_BatDauCa5 == 0)) {\n                ProjectVariables.Old_BatDauCa5 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(5);\n                }\n            }\n        }\n        //Time BatDauCa 6\n        {\n            if (parseInt(Variables.BitDisplay[1][58]) == 0) {\n                ProjectVariables.Old_BatDauCa6 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][58]) == 1 && ProjectVariables.Old_BatDauCa6 == 0)) {\n                ProjectVariables.Old_BatDauCa6 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(6);\n                }\n            }\n        }\n        //Time BatDauCa 7\n        {\n            if (parseInt(Variables.BitDisplay[1][60]) == 0) {\n                ProjectVariables.Old_BatDauCa7 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][60]) == 1 && ProjectVariables.Old_BatDauCa7 == 0)) {\n                ProjectVariables.Old_BatDauCa7 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(7);\n                }\n            }\n        }\n        //Time BatDauCa 8\n        {\n            if (parseInt(Variables.BitDisplay[1][62]) == 0) {\n                ProjectVariables.Old_BatDauCa8 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][62]) == 1 && ProjectVariables.Old_BatDauCa8 == 0)) {\n                ProjectVariables.Old_BatDauCa8 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(8);\n                }\n            }\n        }\n        //Time BatDauCa 9\n        {\n            if (parseInt(Variables.BitDisplay[1][64]) == 0) {\n                ProjectVariables.Old_BatDauCa9 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][64]) == 1 && ProjectVariables.Old_BatDauCa9 == 0)) {\n                ProjectVariables.Old_BatDauCa9 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(9);\n                }\n            }\n        }\n        //Time BatDauCa 10\n        {\n            if (parseInt(Variables.BitDisplay[1][66]) == 0) {\n                ProjectVariables.Old_BatDauCa10 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][66]) == 1 && ProjectVariables.Old_BatDauCa10 == 0)) {\n                ProjectVariables.Old_BatDauCa10 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(10);\n                }\n            }\n        }\n        //Time BatDauCa 11\n        {\n            if (parseInt(Variables.BitDisplay[1][68]) == 0) {\n                ProjectVariables.Old_BatDauCa11 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][68]) == 1 && ProjectVariables.Old_BatDauCa11 == 0)) {\n                ProjectVariables.Old_BatDauCa11 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(11);\n                }\n            }\n        }\n        //Time BatDauCa 12\n        {\n            if (parseInt(Variables.BitDisplay[1][70]) == 0) {\n                ProjectVariables.Old_BatDauCa12 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][70]) == 1 && ProjectVariables.Old_BatDauCa12 == 0)) {\n                ProjectVariables.Old_BatDauCa12 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(12);\n                }\n            }\n        }\n\n        //Report Productivity 1\n        {\n            if (parseInt(Variables.WordDisplay[1][431]) > 0) {\n                ProjectVariables.oldAmountProduct1 = parseInt(Variables.WordDisplay[1][431])\n            }\n            if (parseInt(Variables.WordDisplay[1][431]) == 0 && ProjectVariables.oldAmountProduct1 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine1();\n                    ProjectVariables.oldAmountProduct1 = 0\n\n                }\n            }\n        }\n        //Report Productivity 2\n        {\n            if (parseInt(Variables.WordDisplay[1][433]) > 0) {\n                ProjectVariables.oldAmountProduct2 = parseInt(Variables.WordDisplay[1][433])\n            }\n            if (parseInt(Variables.WordDisplay[1][433]) == 0 && ProjectVariables.oldAmountProduct2 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine2();\n                    ProjectVariables.oldAmountProduct2 = 0\n                }\n            }\n        }\n        //Report Productivity 3\n        {\n            if (parseInt(Variables.WordDisplay[1][435]) > 0) {\n                ProjectVariables.oldAmountProduct3 = parseInt(Variables.WordDisplay[1][435])\n            }\n            if (parseInt(Variables.WordDisplay[1][435]) == 0 && ProjectVariables.oldAmountProduct3 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine3();\n                    ProjectVariables.oldAmountProduct3 = 0\n                }\n            }\n        }\n        //Report Productivity 4\n        {\n            if (parseInt(Variables.WordDisplay[1][437]) > 0) {\n                ProjectVariables.oldAmountProduct4 = parseInt(Variables.WordDisplay[1][437])\n            }\n            if (parseInt(Variables.WordDisplay[1][437]) == 0 && ProjectVariables.oldAmountProduct4 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine4();\n                    ProjectVariables.oldAmountProduct4 = 0\n                }\n            }\n        }\n        //Report Productivity 5\n        {\n            if (parseInt(Variables.WordDisplay[1][439]) > 0) {\n                ProjectVariables.oldAmountProduct5 = parseInt(Variables.WordDisplay[1][439])\n            }\n            if (parseInt(Variables.WordDisplay[1][439]) == 0 && ProjectVariables.oldAmountProduct5 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine5();\n                    ProjectVariables.oldAmountProduct5 = 0\n                }\n            }\n        }\n        //Report Productivity 6\n        {\n            if (parseInt(Variables.WordDisplay[1][441]) > 0) {\n                ProjectVariables.oldAmountProduct6 = parseInt(Variables.WordDisplay[1][441])\n            }\n            if (parseInt(Variables.WordDisplay[1][441]) == 0 && ProjectVariables.oldAmountProduct6 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine6();\n                    ProjectVariables.oldAmountProduct6 = 0\n                }\n            }\n        }\n        //Report Productivity 7\n        {\n            if (parseInt(Variables.WordDisplay[1][443]) > 0) {\n                ProjectVariables.oldAmountProduct7 = parseInt(Variables.WordDisplay[1][443])\n            }\n            if (parseInt(Variables.WordDisplay[1][443]) == 0 && ProjectVariables.oldAmountProduct7 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine7();\n                    ProjectVariables.oldAmountProduct7 = 0\n                }\n            }\n        }\n        //Report Productivity 8\n        {\n            if (parseInt(Variables.WordDisplay[1][642]) > 0) {\n                ProjectVariables.oldAmountProduct8 = parseInt(Variables.WordDisplay[1][642])\n            }\n            if (parseInt(Variables.WordDisplay[1][642]) == 0 && ProjectVariables.oldAmountProduct8 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine8();\n                    ProjectVariables.oldAmountProduct8 = 0\n                }\n            }\n        }\n        //Report Productivity 9\n        {\n            if (parseInt(Variables.WordDisplay[1][685]) > 0) {\n                ProjectVariables.oldAmountProduct9 = parseInt(Variables.WordDisplay[1][685])\n            }\n            if (parseInt(Variables.WordDisplay[1][685]) == 0 && ProjectVariables.oldAmountProduct9 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine9();\n                    ProjectVariables.oldAmountProduct9 = 0\n                }\n            }\n        }\n        //Report Productivity 10\n        {\n            if (parseInt(Variables.WordDisplay[1][728]) > 0) {\n                ProjectVariables.oldAmountProduct10 = parseInt(Variables.WordDisplay[1][728])\n            }\n            if (parseInt(Variables.WordDisplay[1][728]) == 0 && ProjectVariables.oldAmountProduct10 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine10();\n                    ProjectVariables.oldAmountProduct10 = 0\n                }\n            }\n        }\n        //Report Productivity 11\n        {\n            if (parseInt(Variables.WordDisplay[1][771]) > 0) {\n                ProjectVariables.oldAmountProduct11 = parseInt(Variables.WordDisplay[1][771])\n            }\n            if (parseInt(Variables.WordDisplay[1][771]) == 0 && ProjectVariables.oldAmountProduct11 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine11();\n                    ProjectVariables.oldAmountProduct11 = 0\n                }\n            }\n        }\n        //Report Productivity 12\n        {\n            if (parseInt(Variables.WordDisplay[1][813]) > 0) {\n                ProjectVariables.oldAmountProduct12 = parseInt(Variables.WordDisplay[1][813])\n            }\n            if (parseInt(Variables.WordDisplay[1][813]) == 0 && ProjectVariables.oldAmountProduct12 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine12();\n                    ProjectVariables.oldAmountProduct12 = 0\n                }\n            }\n        }\n\n        //Report Trang Thai 1\n        {\n            let IndexSet = 6;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State1)) {\n                ProjectVariables.Old_State1 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine1('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine1('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine1('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine1('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 2\n        {\n            let IndexSet = 23;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State2)) {\n                ProjectVariables.Old_State2 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine2('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine2('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine2('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine2('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 3\n        {\n            let IndexSet = 40;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State3)) {\n                ProjectVariables.Old_State3 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine3('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine3('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine3('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine3('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 4\n        {\n            let IndexSet = 57;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State4)) {\n                ProjectVariables.Old_State4 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine4('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine4('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine4('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine4('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 5\n        {\n            let IndexSet = 74;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State5)) {\n                ProjectVariables.Old_State5 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine5('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine5('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine5('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine5('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 6\n        {\n            let IndexSet = 90;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State6)) {\n                ProjectVariables.Old_State6 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine6('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine6('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine6('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine6('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 7\n        {\n            let IndexSet = 107;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State7)) {\n                ProjectVariables.Old_State7 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine7('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine7('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine7('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine7('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 8\n        {\n            let IndexSet = 607;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State8)) {\n                ProjectVariables.Old_State8 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine8('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine8('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine8('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine8('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 9\n        {\n            let IndexSet = 650;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State9)) {\n                ProjectVariables.Old_State9 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine9('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine9('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine9('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine9('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 10\n        {\n            let IndexSet = 693;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State10)) {\n                ProjectVariables.Old_State10 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine10('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine10('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine10('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine10('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 11\n        {\n            let IndexSet = 736;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State11)) {\n                ProjectVariables.Old_State11 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine11('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine11('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine11('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine11('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 12\n        {\n            let IndexSet = 779;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State12)) {\n                ProjectVariables.Old_State12 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine12('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine12('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine12('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine12('Máy Reset');\n                    }\n                }\n            }\n        }\n        count = count + 1\n        if (count > 99999) { count = 0 }\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n    }, 300)\n} catch (error) {\n\n}\n//Excel Load File\nvar XLSX = global.get(\"xlsx\");\ntry {\n    setInterval(function () {\n        var workbook = XLSX.readFile('DataStampingMachine.xlsx');\n        var sheet_name_list = workbook.SheetNames;\n\n        ProjectVariables.xlData_NhanVien = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);\n        ProjectVariables.xlData_SanPham = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[1]]);\n        if (JSON.stringify(ProjectVariables.Old_xlData_NhanVien) !== JSON.stringify(ProjectVariables.xlData_NhanVien)) {\n            ProjectVariables.Old_xlData_NhanVien = ProjectVariables.xlData_NhanVien\n            VariableSystem.IO.sockets.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien)\n            console.log('Have Change Excel1')\n            ProjectVariables.Old_Machine1_NV1 = null;\n            ProjectVariables.Old_Machine1_NV2 = null;\n            ProjectVariables.Old_Machine1_NV3 = null;\n            ProjectVariables.Old_Machine1_NV4 = null;\n            ProjectVariables.Old_Machine1_NV5 = null;\n            ProjectVariables.Old_Machine1_NV6 = null;\n            ProjectVariables.Old_Machine1_NV7 = null;\n            ProjectVariables.Old_Machine1_NV8 = null;\n            ProjectVariables.Old_Machine1_NV9 = null;\n            ProjectVariables.Old_Machine1_NV10 = null;\n            ProjectVariables.Old_Machine1_NV11 = null;\n\n            ProjectVariables.Old_Machine2_NV1 = null;\n            ProjectVariables.Old_Machine2_NV2 = null;\n            ProjectVariables.Old_Machine2_NV3 = null;\n            ProjectVariables.Old_Machine2_NV4 = null;\n            ProjectVariables.Old_Machine2_NV5 = null;\n            ProjectVariables.Old_Machine2_NV6 = null;\n            ProjectVariables.Old_Machine2_NV7 = null;\n            ProjectVariables.Old_Machine2_NV8 = null;\n            ProjectVariables.Old_Machine2_NV9 = null;\n            ProjectVariables.Old_Machine2_NV10 = null;\n            ProjectVariables.Old_Machine2_NV11 = null;\n\n            ProjectVariables.Old_Machine3_NV1 = null;\n            ProjectVariables.Old_Machine3_NV2 = null;\n            ProjectVariables.Old_Machine3_NV3 = null;\n            ProjectVariables.Old_Machine3_NV4 = null;\n            ProjectVariables.Old_Machine3_NV5 = null;\n            ProjectVariables.Old_Machine3_NV6 = null;\n            ProjectVariables.Old_Machine3_NV7 = null;\n            ProjectVariables.Old_Machine3_NV8 = null;\n            ProjectVariables.Old_Machine3_NV9 = null;\n            ProjectVariables.Old_Machine3_NV10 = null;\n            ProjectVariables.Old_Machine3_NV11 = null;\n\n            ProjectVariables.Old_Machine4_NV1 = null;\n            ProjectVariables.Old_Machine4_NV2 = null;\n            ProjectVariables.Old_Machine4_NV3 = null;\n            ProjectVariables.Old_Machine4_NV4 = null;\n            ProjectVariables.Old_Machine4_NV5 = null;\n            ProjectVariables.Old_Machine4_NV6 = null;\n            ProjectVariables.Old_Machine4_NV7 = null;\n            ProjectVariables.Old_Machine4_NV8 = null;\n            ProjectVariables.Old_Machine4_NV9 = null;\n            ProjectVariables.Old_Machine4_NV10 = null;\n            ProjectVariables.Old_Machine4_NV11 = null;\n\n            ProjectVariables.Old_Machine5_NV1 = null;\n            ProjectVariables.Old_Machine5_NV2 = null;\n            ProjectVariables.Old_Machine5_NV3 = null;\n            ProjectVariables.Old_Machine5_NV4 = null;\n            ProjectVariables.Old_Machine5_NV5 = null;\n            ProjectVariables.Old_Machine5_NV6 = null;\n            ProjectVariables.Old_Machine5_NV7 = null;\n            ProjectVariables.Old_Machine5_NV8 = null;\n            ProjectVariables.Old_Machine5_NV9 = null;\n            ProjectVariables.Old_Machine5_NV10 = null;\n            ProjectVariables.Old_Machine5_NV11 = null;\n\n            ProjectVariables.Old_Machine6_NV1 = null;\n            ProjectVariables.Old_Machine6_NV2 = null;\n            ProjectVariables.Old_Machine6_NV3 = null;\n            ProjectVariables.Old_Machine6_NV4 = null;\n            ProjectVariables.Old_Machine6_NV5 = null;\n            ProjectVariables.Old_Machine6_NV6 = null;\n            ProjectVariables.Old_Machine6_NV7 = null;\n            ProjectVariables.Old_Machine6_NV8 = null;\n            ProjectVariables.Old_Machine6_NV9 = null;\n            ProjectVariables.Old_Machine6_NV10 = null;\n            ProjectVariables.Old_Machine6_NV11 = null;\n\n            ProjectVariables.Old_Machine7_NV1 = null;\n            ProjectVariables.Old_Machine7_NV2 = null;\n            ProjectVariables.Old_Machine7_NV3 = null;\n            ProjectVariables.Old_Machine7_NV4 = null;\n            ProjectVariables.Old_Machine7_NV5 = null;\n            ProjectVariables.Old_Machine7_NV6 = null;\n            ProjectVariables.Old_Machine7_NV7 = null;\n            ProjectVariables.Old_Machine7_NV8 = null;\n            ProjectVariables.Old_Machine7_NV9 = null;\n            ProjectVariables.Old_Machine7_NV10 = null;\n            ProjectVariables.Old_Machine7_NV11 = null;\n\n            ProjectVariables.Old_Machine8_NV1 = null;\n            ProjectVariables.Old_Machine8_NV2 = null;\n            ProjectVariables.Old_Machine8_NV3 = null;\n            ProjectVariables.Old_Machine8_NV4 = null;\n            ProjectVariables.Old_Machine8_NV5 = null;\n            ProjectVariables.Old_Machine8_NV6 = null;\n            ProjectVariables.Old_Machine8_NV7 = null;\n            ProjectVariables.Old_Machine8_NV8 = null;\n            ProjectVariables.Old_Machine8_NV9 = null;\n            ProjectVariables.Old_Machine8_NV10 = null;\n            ProjectVariables.Old_Machine8_NV11 = null;\n\n            ProjectVariables.Old_Machine9_NV1 = null;\n            ProjectVariables.Old_Machine9_NV2 = null;\n            ProjectVariables.Old_Machine9_NV3 = null;\n            ProjectVariables.Old_Machine9_NV4 = null;\n            ProjectVariables.Old_Machine9_NV5 = null;\n            ProjectVariables.Old_Machine9_NV6 = null;\n            ProjectVariables.Old_Machine9_NV7 = null;\n            ProjectVariables.Old_Machine9_NV8 = null;\n            ProjectVariables.Old_Machine9_NV9 = null;\n            ProjectVariables.Old_Machine9_NV10 = null;\n            ProjectVariables.Old_Machine9_NV11 = null;\n\n            ProjectVariables.Old_Machine10_NV1 = null;\n            ProjectVariables.Old_Machine10_NV2 = null;\n            ProjectVariables.Old_Machine10_NV3 = null;\n            ProjectVariables.Old_Machine10_NV4 = null;\n            ProjectVariables.Old_Machine10_NV5 = null;\n            ProjectVariables.Old_Machine10_NV6 = null;\n            ProjectVariables.Old_Machine10_NV7 = null;\n            ProjectVariables.Old_Machine10_NV8 = null;\n            ProjectVariables.Old_Machine10_NV9 = null;\n            ProjectVariables.Old_Machine10_NV10 = null;\n            ProjectVariables.Old_Machine10_NV11 = null;\n\n            ProjectVariables.Old_Machine11_NV1 = null;\n            ProjectVariables.Old_Machine11_NV2 = null;\n            ProjectVariables.Old_Machine11_NV3 = null;\n            ProjectVariables.Old_Machine11_NV4 = null;\n            ProjectVariables.Old_Machine11_NV5 = null;\n            ProjectVariables.Old_Machine11_NV6 = null;\n            ProjectVariables.Old_Machine11_NV7 = null;\n            ProjectVariables.Old_Machine11_NV8 = null;\n            ProjectVariables.Old_Machine11_NV9 = null;\n            ProjectVariables.Old_Machine11_NV10 = null;\n            ProjectVariables.Old_Machine11_NV11 = null;\n\n            ProjectVariables.Old_Machine12_NV1 = null;\n            ProjectVariables.Old_Machine12_NV2 = null;\n            ProjectVariables.Old_Machine12_NV3 = null;\n            ProjectVariables.Old_Machine12_NV4 = null;\n            ProjectVariables.Old_Machine12_NV5 = null;\n            ProjectVariables.Old_Machine12_NV6 = null;\n            ProjectVariables.Old_Machine12_NV7 = null;\n            ProjectVariables.Old_Machine12_NV8 = null;\n            ProjectVariables.Old_Machine12_NV9 = null;\n            ProjectVariables.Old_Machine12_NV10 = null;\n            ProjectVariables.Old_Machine12_NV11 = null;\n        }\n        if (JSON.stringify(ProjectVariables.Old_xlData_SanPham) !== JSON.stringify(ProjectVariables.xlData_SanPham)) {\n            ProjectVariables.Old_xlData_SanPham = ProjectVariables.xlData_SanPham\n            VariableSystem.IO.sockets.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham)\n            console.log('Have Change Excel2')\n            ProjectVariables.Old_Machine1_SP = null;\n            ProjectVariables.Old_Machine2_SP = null;\n            ProjectVariables.Old_Machine3_SP = null;\n            ProjectVariables.Old_Machine4_SP = null;\n            ProjectVariables.Old_Machine5_SP = null;\n            ProjectVariables.Old_Machine6_SP = null;\n            ProjectVariables.Old_Machine7_SP = null;\n            ProjectVariables.Old_Machine8_SP = null;\n            ProjectVariables.Old_Machine9_SP = null;\n            ProjectVariables.Old_Machine10_SP = null;\n            ProjectVariables.Old_Machine11_SP = null;\n            ProjectVariables.Old_Machine12_SP = null;\n        }\n    }, 2000);\n} catch (error) {\n    SubFunction.setLogServer(JSON.stringify(error))\n}\n\nVariableSystem.IO.removeAllListeners('connection')\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Have Client Connected \" + socket.id))\n\n    socket.emit('UpdateElement', Variables.resultElement);\n    socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n    socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n    socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n    socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n    socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n    socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n    socket.emit('UpdateTextField', Variables.resultTextField);\n    socket.emit('UpdateTextFieldInput', Variables.resultTextFieldInput);\n\n    socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n    socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n        socket.disconnect()\n    });\n    socket.on('initial', function () {\n        socket.emit('UpdateElement', Variables.resultElement);\n        socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n        socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n        socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n        socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n        socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n        socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n        socket.emit('UpdateTextField', Variables.resultTextField);\n\n        socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n        socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n    })\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data);\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ManuReportProductivity1') {\n                ProjectFunction.ReportProductivity_Machine1();\n            }\n            if (data.tag === 'ManuReportProductivity2') {\n                ProjectFunction.ReportProductivity_Machine2();\n            }\n            if (data.tag === 'ManuReportProductivity3') {\n                ProjectFunction.ReportProductivity_Machine3();\n            }\n            if (data.tag === 'ManuReportProductivity4') {\n                ProjectFunction.ReportProductivity_Machine4();\n            }\n            if (data.tag === 'ManuReportProductivity5') {\n                ProjectFunction.ReportProductivity_Machine5();\n            }\n            if (data.tag === 'ManuReportProductivity6') {\n                ProjectFunction.ReportProductivity_Machine6();\n            }\n            if (data.tag === 'ManuReportProductivity7') {\n                ProjectFunction.ReportProductivity_Machine7();\n            }\n            if (data.tag === 'ManuReportProductivity8') {\n                ProjectFunction.ReportProductivity_Machine8();\n            }\n            if (data.tag === 'ManuReportProductivity9') {\n                ProjectFunction.ReportProductivity_Machine9();\n            }\n            if (data.tag === 'ManuReportProductivity10') {\n                ProjectFunction.ReportProductivity_Machine10();\n            }\n            if (data.tag === 'ManuReportProductivity11') {\n                ProjectFunction.ReportProductivity_Machine11();\n            }\n            if (data.tag === 'ManuReportProductivity12') {\n                ProjectFunction.ReportProductivity_Machine12();\n            }\n            if (data.tag === 'ManuStartTime1') {\n                ProjectFunction.StampingMachineStartTime(1);\n            }\n        }\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            console.log(data)\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(parseInt(data.tag) / 16)\n                    let currentWordOfBitAdjust = Variables.WordBitAdjust[1][parseInt(parseInt(data.tag) / 16)]\n                    currentWordOfBitAdjust ^= mask;\n                    VariableSystem.COMMUNICATION_PLC_OMRON[1].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\n                }\n\n                if (parseInt(data.enableLogData)) {\n                    SubFunction.saveLogData({\n                        parent: 'logData',\n                        idDevice: data.idDevice,\n                        typeObject: 'BitAdjust',\n                        tag: data.tag,\n                        previousValue: 'old',\n                        newValue: 'new',\n                        action: 'Toggle',\n                        nameObject: '',\n                        user: data.currentUser\n                    })\n                }\n            }\n        }\n    });\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n// console.log('CLOSE NODE RED')\nvar VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.removeAllListeners()",
        "libs": [],
        "x": 770,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f37458827ae8051a",
        "type": "Config_Web Begin",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "bd78face7fbab31a"
            ]
        ]
    },
    {
        "id": "bd78face7fbab31a",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "SCADA PAGE",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "212b5663b9fce10f"
            ]
        ]
    },
    {
        "id": "212b5663b9fce10f",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Giao Diện Điều Khiển",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "150",
        "x": 740,
        "y": 540,
        "wires": [
            [
                "4e5bf3c94f4efcb6"
            ]
        ]
    },
    {
        "id": "4e5bf3c94f4efcb6",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Giao Diện Điều Khiển ZOOM",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "80",
        "x": 1020,
        "y": 540,
        "wires": [
            [
                "c8e232a14ce5f072"
            ]
        ]
    },
    {
        "id": "cd71515eb34a3f79",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 1",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping1",
        "scale": "100",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "9363e67b4d11aed7"
            ]
        ]
    },
    {
        "id": "9363e67b4d11aed7",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 2",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping2",
        "scale": "100",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "78f887e48698bbd5"
            ]
        ]
    },
    {
        "id": "78f887e48698bbd5",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 3",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping3",
        "scale": "100",
        "x": 950,
        "y": 600,
        "wires": [
            [
                "6d4f21347d403dee"
            ]
        ]
    },
    {
        "id": "6d4f21347d403dee",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 4",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping4",
        "scale": "100",
        "x": 1110,
        "y": 600,
        "wires": [
            [
                "9b51cb9b0cc4f0bb"
            ]
        ]
    },
    {
        "id": "9b51cb9b0cc4f0bb",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 5",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping5",
        "scale": "100",
        "x": 1270,
        "y": 600,
        "wires": [
            [
                "d8750c4a09178286"
            ]
        ]
    },
    {
        "id": "d8750c4a09178286",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 6",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping6",
        "scale": "100",
        "x": 1430,
        "y": 600,
        "wires": [
            [
                "ba89a99d30b6b06b"
            ]
        ]
    },
    {
        "id": "ba89a99d30b6b06b",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 7",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping7",
        "scale": "100",
        "x": 630,
        "y": 660,
        "wires": [
            [
                "7b821c07daeeb784"
            ]
        ]
    },
    {
        "id": "7b821c07daeeb784",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 8",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping8",
        "scale": "100",
        "x": 790,
        "y": 660,
        "wires": [
            [
                "c014207d2f52b926"
            ]
        ]
    },
    {
        "id": "c014207d2f52b926",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 9",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping9",
        "scale": "100",
        "x": 950,
        "y": 660,
        "wires": [
            [
                "a1da7a5dc247e312"
            ]
        ]
    },
    {
        "id": "a1da7a5dc247e312",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 10",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping10",
        "scale": "100",
        "x": 1120,
        "y": 660,
        "wires": [
            [
                "febdb106e0813787"
            ]
        ]
    },
    {
        "id": "febdb106e0813787",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 11",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping11",
        "scale": "100",
        "x": 1300,
        "y": 660,
        "wires": [
            [
                "5aebed74a0310d4b"
            ]
        ]
    },
    {
        "id": "5aebed74a0310d4b",
        "type": "Config_Web Page",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Máy 12",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1230",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping1.png",
        "idPage": "Stamping12",
        "scale": "100",
        "x": 1480,
        "y": 660,
        "wires": [
            [
                "0d7b49a79effc98c"
            ]
        ]
    },
    {
        "id": "0d7b49a79effc98c",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "BÁO CÁO",
        "x": 490,
        "y": 720,
        "wires": [
            [
                "41185f55c09cb717"
            ]
        ]
    },
    {
        "id": "c8e232a14ce5f072",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "MÁY",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "cd71515eb34a3f79"
            ]
        ]
    },
    {
        "id": "41185f55c09cb717",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Báo Cáo Chi Tiết",
        "url": "/scada/ReportProjectStampingMachineChiTiet",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 730,
        "y": 720,
        "wires": [
            [
                "c805953d567b6b70"
            ]
        ]
    },
    {
        "id": "c805953d567b6b70",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Báo Cáo Sản Lượng",
        "url": "/scada/ReportProjectStampingMachineProductivity",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1020,
        "y": 720,
        "wires": [
            [
                "ec51c826a41deae3"
            ]
        ]
    },
    {
        "id": "ec51c826a41deae3",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Báo Cáo Trạng Thái",
        "url": "/scada/ReportProjectStampingMachineTrangThai",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1320,
        "y": 720,
        "wires": [
            [
                "81407bd4e8bd6f3f"
            ]
        ]
    },
    {
        "id": "81407bd4e8bd6f3f",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "EXCEL",
        "x": 480,
        "y": 780,
        "wires": [
            [
                "5257af19f7d6f127"
            ]
        ]
    },
    {
        "id": "5257af19f7d6f127",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Nhân Viên",
        "url": "/excel/NhanVien",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 710,
        "y": 780,
        "wires": [
            [
                "e817e5c9e1e73332"
            ]
        ]
    },
    {
        "id": "e817e5c9e1e73332",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Sản Phẩm",
        "url": "/excel/SanPham",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 950,
        "y": 780,
        "wires": [
            [
                "634e9f2244e55dfa"
            ]
        ]
    },
    {
        "id": "634e9f2244e55dfa",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "ALARM",
        "x": 480,
        "y": 840,
        "wires": [
            [
                "61ce6e6b1a425ac1"
            ]
        ]
    },
    {
        "id": "61ce6e6b1a425ac1",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 710,
        "y": 840,
        "wires": [
            [
                "29677101ea221536"
            ]
        ]
    },
    {
        "id": "29677101ea221536",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 950,
        "y": 840,
        "wires": [
            [
                "4923e350eb9767c0"
            ]
        ]
    },
    {
        "id": "4923e350eb9767c0",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "LOG REPORT",
        "x": 500,
        "y": 900,
        "wires": [
            [
                "2147e1110c6b5217"
            ]
        ]
    },
    {
        "id": "2147e1110c6b5217",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 720,
        "y": 900,
        "wires": [
            [
                "929058ece4e65074"
            ]
        ]
    },
    {
        "id": "929058ece4e65074",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 940,
        "y": 900,
        "wires": [
            [
                "46df3cb8a9d305a9"
            ]
        ]
    },
    {
        "id": "46df3cb8a9d305a9",
        "type": "Config_Web Title",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "title": "USER MANAGER",
        "x": 510,
        "y": 960,
        "wires": [
            [
                "3907b493a56f3e91"
            ]
        ]
    },
    {
        "id": "3907b493a56f3e91",
        "type": "Config_Web Page_Call",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 760,
        "y": 960,
        "wires": [
            [
                "a69eb0a72aae32af"
            ]
        ]
    },
    {
        "id": "a69eb0a72aae32af",
        "type": "Config_Web End",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "port": "8000",
        "x": 450,
        "y": 1040,
        "wires": [
            [
                "2e57761ba38a57e5",
                "87def5f3d57f3f36",
                "a39eafe38eb787ca"
            ]
        ]
    },
    {
        "id": "87def5f3d57f3f36",
        "type": "file",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2e57761ba38a57e5",
        "type": "file",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "a39eafe38eb787ca",
        "type": "debug",
        "z": "42a759057180fe6e",
        "g": "349e5d319a527a1e",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0af1c06d15344620",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "d8b71a2917dadd69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 60,
        "wires": [
            [
                "9d0c0853e34755a1"
            ]
        ]
    },
    {
        "id": "9d0c0853e34755a1",
        "type": "function",
        "z": "42a759057180fe6e",
        "g": "d8b71a2917dadd69",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 60,
        "wires": [
            [
                "56d692c23f948d8c"
            ]
        ]
    },
    {
        "id": "56d692c23f948d8c",
        "type": "debug",
        "z": "42a759057180fe6e",
        "g": "d8b71a2917dadd69",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 60,
        "wires": []
    },
    {
        "id": "d929cea69714e7df",
        "type": "function",
        "z": "42a759057180fe6e",
        "g": "d8b71a2917dadd69",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cecae109bd8195b8",
        "type": "inject",
        "z": "42a759057180fe6e",
        "g": "d8b71a2917dadd69",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "d929cea69714e7df"
            ]
        ]
    },
    {
        "id": "6efc8bddcf8bf31e",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Write Schneider HK",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "e0d956497d4ce948"
            ]
        ]
    },
    {
        "id": "050863282e48c368",
        "type": "file in",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Read Config",
        "filename": "config/default_Modbus_Schneider.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "5711699ff8e9214c"
            ]
        ]
    },
    {
        "id": "022e9477c877dfd6",
        "type": "file",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 770,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a4529a8f8c185971",
        "type": "debug",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "8f588d0c2db4ecd7",
        "type": "function",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Config Project",
        "func": "var PLC = global.get(\"Modbus\");\nnode.warn(PLC);\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Schneider_HK.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            [
                "8816085acdb3e4fc",
                "89cf28a2e1efa711"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "ee5a63c05397dfe4",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "13ea0c6a8eece8c0"
            ]
        ]
    },
    {
        "id": "03beec45436d6e6a",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "8816085acdb3e4fc"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "3d9c805824772753",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 500,
        "y": 380,
        "wires": [
            [
                "8816085acdb3e4fc"
            ]
        ]
    },
    {
        "id": "3c5be560c815d3a0",
        "type": "Config_Web Begin",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "x": 440,
        "y": 460,
        "wires": [
            [
                "31d85c681bae485d"
            ]
        ]
    },
    {
        "id": "31d85c681bae485d",
        "type": "Config_Web Title",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "title": "SCADA PAGE",
        "x": 340,
        "y": 520,
        "wires": [
            [
                "0fe630a0052ce371"
            ]
        ]
    },
    {
        "id": "0fe630a0052ce371",
        "type": "Config_Web Page",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name_page": "Giao Diện Điều Khiển",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1854",
        "height": "1044",
        "backgroundColor": "456456",
        "backgroundImage": "Schneider_HK.jpg",
        "idPage": "Scada",
        "scale": "135",
        "x": 580,
        "y": 520,
        "wires": [
            [
                "a6bb809286db7973"
            ]
        ]
    },
    {
        "id": "965cdb6965e66112",
        "type": "Config_Web Page_Call",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "d617ca8b960a7644"
            ]
        ]
    },
    {
        "id": "4f97267b54176e1c",
        "type": "Config_Web Title",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "title": "USER MANAGER",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "965cdb6965e66112"
            ]
        ]
    },
    {
        "id": "a6bb809286db7973",
        "type": "Config_Web Title",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "title": "LOG DATA",
        "x": 330,
        "y": 580,
        "wires": [
            [
                "6924bf40862465e9"
            ]
        ]
    },
    {
        "id": "6924bf40862465e9",
        "type": "Config_Web Page",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name_page": "LOG SERVER",
        "url": "/scada/scada2",
        "icon": "cui-dashboard",
        "width": "1854",
        "height": "1044",
        "backgroundImage": "Schneider_HK.jpg",
        "idPage": "Scada2",
        "scale": "100",
        "x": 560,
        "y": 580,
        "wires": [
            [
                "4f97267b54176e1c"
            ]
        ]
    },
    {
        "id": "d617ca8b960a7644",
        "type": "Config_Web End",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "port": "8000",
        "x": 430,
        "y": 720,
        "wires": [
            [
                "0e390fc3008137c8",
                "dcabae5df95862af"
            ]
        ]
    },
    {
        "id": "0e390fc3008137c8",
        "type": "file",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "",
        "filename": "../RUN_TIME/Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "dcabae5df95862af",
        "type": "file",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "89cf28a2e1efa711",
        "type": "function",
        "z": "e074b9e578a8b694",
        "g": "26a934531de559cb",
        "name": "PROCESS CLIENT",
        "func": "var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\n// Variable.WordAdjust[0] = new Array(20).fill(10);\n// Variable.WordAdjust[0] = new Array(200).fill(10);\n// Variable.BitAdjust[0] = new Array(20).fill(0);\n// Variable.BitDisplay[0] = new Array(20).fill(0);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data);\n        //WRITE TO PLC\n        if (data.NameCommand === 'WriteToPLC') {\n            let OldVal = -1\n            let indexWrite = 0\n            let EnableWrite = true\n            let mySetTimeOut = setTimeout(() => { EnableWrite = false }, 1000)\n            function tempWrite() {\n                setTimeout(() => {\n                    if (indexWrite < Variable.resultSetupElement.length) {\n                        let LengthOfString = 10\n                        let ElementToWrite = Variable.resultSetupElement[indexWrite]\n                        var myBuffer = new Array(10).fill(0);\n                        var str = ElementToWrite.Name;\n                        var buffer = new Buffer(str, 'utf8');\n                        for (let i = 0; i < buffer.length; i++) {\n                            if (i < LengthOfString) myBuffer[i] = buffer[i];\n                        }\n                        let Data1 = [0, 0, 0, 0, 0]\n                        for (let i = 0; i < parseInt(LengthOfString / 2); i++) {\n                            if (i % 2 == 1) {\n                                Data1[parseInt(i / 2)] = parseInt(myBuffer[i]) * 256 + parseInt(myBuffer[i - 1]);\n                            }\n                        }\n                        let Data2 = [\n                            parseInt(ElementToWrite.ID) ? parseInt(ElementToWrite.ID) : 0,\n                            parseInt(ElementToWrite.SetTimeStartup) ? parseInt(ElementToWrite.SetTimeStartup) : 0,\n                            parseInt(ElementToWrite.SetTimeStop) ? parseInt(ElementToWrite.SetTimeStop) : 0,\n                            parseInt(ElementToWrite.SetAmpeLimit) ? parseInt(ElementToWrite.SetAmpeLimit) : 0,\n                            parseInt(ElementToWrite.TagAmpeLimit) ? parseInt(ElementToWrite.TagAmpeLimit) : 0,\n                            parseInt(ElementToWrite.IndexDestination) ? parseInt(ElementToWrite.IndexDestination) : 0,\n                            parseInt(ElementToWrite.IndexFeedback) ? parseInt(ElementToWrite.IndexFeedback) : 0\n                        ]\n\n                        let Data = [1000]\n                        Data = Data.concat([indexWrite])\n                        Data = Data.concat(Data1)\n                        Data = Data.concat(Data2)\n                        if (OldVal !== Variable.ComPC[1][50]) {\n                            OldVal = Variable.ComPC[1][50]\n                            Variable.clientMB.writeMultipleRegisters(1000, Data).then(function (resp) {\n                                indexWrite = indexWrite + 1;\n                                clearTimeout(mySetTimeOut)\n                                mySetTimeOut = setTimeout(() => { EnableWrite = false }, 1000)\n                                console.log(resp)\n                            }, console.error);\n                        }\n                        if (EnableWrite) {\n                            tempWrite()\n                        } else {\n                            socket.emit('Server-Send-Snackbar', {\n                                status: 'warning',\n                                message: 'Write Data To PLC Fault'\n                            });\n                        }\n                    } else {\n                        socket.emit('Server-Send-Snackbar', {\n                            status: 'success',\n                            message: 'Write Data To PLC Success'\n                        });\n                    }\n                }, 100)\n            }\n            tempWrite()\n        }\n        SubFunction.ProcessSocketIO_Modbus(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c596bfec2bf88b32",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "f1b28c33f2679f8c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 60,
        "wires": [
            [
                "ee7158825cd882ca"
            ]
        ]
    },
    {
        "id": "ee7158825cd882ca",
        "type": "function",
        "z": "e074b9e578a8b694",
        "g": "f1b28c33f2679f8c",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 60,
        "wires": [
            [
                "063fa88250552ff8"
            ]
        ]
    },
    {
        "id": "063fa88250552ff8",
        "type": "debug",
        "z": "e074b9e578a8b694",
        "g": "f1b28c33f2679f8c",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "0c4126c4dcc3be21",
        "type": "function",
        "z": "e074b9e578a8b694",
        "g": "f1b28c33f2679f8c",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6b92e0d7a86a7abc",
        "type": "inject",
        "z": "e074b9e578a8b694",
        "g": "f1b28c33f2679f8c",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "0c4126c4dcc3be21"
            ]
        ]
    },
    {
        "id": "2bd8bc46a8d44141",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "337f9b8848b780f9",
                "82ade3db4dda3fcf"
            ]
        ]
    },
    {
        "id": "337f9b8848b780f9",
        "type": "function",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "Config Project",
        "func": "var Profinet = global.get(\"Profinet\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HK_PG.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { Profinet }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "43694f9cab73a0cb",
                "bcd6f6b50a9cb352"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "392c2d42e3fbe93a",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 320,
        "y": 200,
        "wires": [
            [
                "43694f9cab73a0cb"
            ]
        ]
    },
    {
        "id": "f42ce3f5142efbef",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "43694f9cab73a0cb"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "8711b802adb0eedd",
        "type": "debug",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "c0a9359571f06cfb",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 290,
        "y": 280,
        "wires": [
            [
                "43694f9cab73a0cb"
            ]
        ]
    },
    {
        "id": "82ade3db4dda3fcf",
        "type": "Config_Web Begin",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "x": 280,
        "y": 400,
        "wires": [
            [
                "45f3bb737f51afa6"
            ]
        ]
    },
    {
        "id": "45f3bb737f51afa6",
        "type": "Config_Web Title",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "title": "SCADA PAGE",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "3af8d39fab9be663"
            ]
        ]
    },
    {
        "id": "3af8d39fab9be663",
        "type": "Config_Web Page",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "SERVO",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 700,
        "y": 400,
        "wires": [
            [
                "2593a45dbc1af179"
            ]
        ]
    },
    {
        "id": "5ff59bca273fe1ec",
        "type": "Config_Web End",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "port": "8000",
        "x": 270,
        "y": 680,
        "wires": [
            [
                "4d4cac333f9b855f",
                "71fd1da20f1aa5c4"
            ]
        ]
    },
    {
        "id": "71fd1da20f1aa5c4",
        "type": "file",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "",
        "filename": "../RUN_TIME/Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "4d4cac333f9b855f",
        "type": "file",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "",
        "filename": "../client_react/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "2593a45dbc1af179",
        "type": "Config_Web Page",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "ROBOT",
        "url": "/scada/scada2",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Scada2",
        "scale": "100",
        "x": 920,
        "y": 400,
        "wires": [
            [
                "c7e958d4f6e5734b"
            ]
        ]
    },
    {
        "id": "bcd6f6b50a9cb352",
        "type": "function",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c7e958d4f6e5734b",
        "type": "Config_Web Title",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "title": "ALARM",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "e7aa6ce63c468b20"
            ]
        ]
    },
    {
        "id": "e7aa6ce63c468b20",
        "type": "Config_Web Page_Call",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 780,
        "y": 460,
        "wires": [
            [
                "bd916fdf03ea5304"
            ]
        ]
    },
    {
        "id": "bd916fdf03ea5304",
        "type": "Config_Web Page_Call",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "e03d802f1c222ab1"
            ]
        ]
    },
    {
        "id": "ac85b8f1afa12356",
        "type": "Config_Web Page_Call",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "82ddf873a7fde3a7"
            ]
        ]
    },
    {
        "id": "6adefce197b3f0d8",
        "type": "Config_Web Page_Call",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 810,
        "y": 520,
        "wires": [
            [
                "ac85b8f1afa12356"
            ]
        ]
    },
    {
        "id": "e03d802f1c222ab1",
        "type": "Config_Web Title",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "title": "LOG REPORT",
        "x": 570,
        "y": 520,
        "wires": [
            [
                "6adefce197b3f0d8"
            ]
        ]
    },
    {
        "id": "82ddf873a7fde3a7",
        "type": "Config_Web Title",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "title": "USER MANAGER",
        "x": 580,
        "y": 580,
        "wires": [
            [
                "ac51f15f7a4d2b67"
            ]
        ]
    },
    {
        "id": "ac51f15f7a4d2b67",
        "type": "Config_Web Page_Call",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 850,
        "y": 580,
        "wires": [
            [
                "5ff59bca273fe1ec"
            ]
        ]
    },
    {
        "id": "e9c6b5cac9632abb",
        "type": "plc_siemens",
        "z": "954743b2d5841a73",
        "g": "236e1697417ca0b5",
        "name": "",
        "host": "192.168.1.10",
        "port": 102,
        "rack": 0,
        "slot": 1,
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "100",
        "PLC_WordStartBitDisplay": "100",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "120",
        "PLC_LengthOfWordBitAdjust": "20",
        "PLC_WordStartWordDisplay": "140",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "340",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "520",
        "PLC_LengthOfWordDWordDisplay": "0",
        "PLC_WordStartDWordAdjust": "520",
        "PLC_LengthOfWordDWordAdjust": "0",
        "PLC_WordStartRotate": "520",
        "PLC_LengthOfWordRotate": "0",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "100",
        "PLC_NumberWordInString": "20",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "8711b802adb0eedd"
            ]
        ]
    },
    {
        "id": "681789a85326d81e",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "b1c4bdfa88d3a751",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 60,
        "wires": [
            [
                "2be6e29eadfbe455"
            ]
        ]
    },
    {
        "id": "2be6e29eadfbe455",
        "type": "function",
        "z": "954743b2d5841a73",
        "g": "b1c4bdfa88d3a751",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "32f8930b180e3e06"
            ]
        ]
    },
    {
        "id": "32f8930b180e3e06",
        "type": "debug",
        "z": "954743b2d5841a73",
        "g": "b1c4bdfa88d3a751",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "4118364c35ad8f8b",
        "type": "function",
        "z": "954743b2d5841a73",
        "g": "b1c4bdfa88d3a751",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "235e6ca3775daf4b",
        "type": "inject",
        "z": "954743b2d5841a73",
        "g": "b1c4bdfa88d3a751",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "4118364c35ad8f8b"
            ]
        ]
    },
    {
        "id": "804ff6d0f1d366ea",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "Write HK_PG",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "bb52601c56c7f706"
            ]
        ]
    },
    {
        "id": "13c032d5c51fc625",
        "type": "function",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "Config Project",
        "func": "var PLC = global.get(\"Modbus\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HK_PG_Socket.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData=true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "4ae9cf1dcbe6fa8f"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "d695e002f9e843b7",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "f964f6c1fb0d09ee"
            ]
        ]
    },
    {
        "id": "48793e130e2c6e99",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 410,
        "y": 300,
        "wires": [
            [
                "4ae9cf1dcbe6fa8f"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "f3afda3c9a4eda51",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 400,
        "y": 340,
        "wires": [
            [
                "4ae9cf1dcbe6fa8f"
            ]
        ]
    },
    {
        "id": "72fec31c407f7693",
        "type": "socket_client",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "",
        "host": "localhost",
        "port": "6000",
        "indexPLC": "1",
        "x": 790,
        "y": 300,
        "wires": [
            [
                "0723b85a928e238e"
            ]
        ]
    },
    {
        "id": "bfa833c20f8df867",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "reopen_socket",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"reopen_socket\":\"reopen_socket\"}",
        "payloadType": "json",
        "x": 500,
        "y": 200,
        "wires": [
            [
                "845a936a56106e53"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "73315489850bf2ac",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "2177ec3a3443a10f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "6f7e22642047c0e7"
            ]
        ]
    },
    {
        "id": "6f7e22642047c0e7",
        "type": "function",
        "z": "3faa7c0a18845ba4",
        "g": "2177ec3a3443a10f",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "7fe9e5cfb256deb7"
            ]
        ]
    },
    {
        "id": "7fe9e5cfb256deb7",
        "type": "debug",
        "z": "3faa7c0a18845ba4",
        "g": "2177ec3a3443a10f",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "d498465a2b7ad4cc",
        "type": "function",
        "z": "3faa7c0a18845ba4",
        "g": "2177ec3a3443a10f",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3d7257e64468b67c",
        "type": "inject",
        "z": "3faa7c0a18845ba4",
        "g": "2177ec3a3443a10f",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "d498465a2b7ad4cc"
            ]
        ]
    },
    {
        "id": "24547fe44faf210b",
        "type": "Config_Web Begin",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "x": 340,
        "y": 440,
        "wires": [
            [
                "7a74f8417ce60ca6"
            ]
        ]
    },
    {
        "id": "7a74f8417ce60ca6",
        "type": "Config_Web Title",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "title": "SCADA PAGE",
        "x": 540,
        "y": 440,
        "wires": [
            [
                "8ebde42a50e8b7cd"
            ]
        ]
    },
    {
        "id": "8ebde42a50e8b7cd",
        "type": "Config_Web Page",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name_page": "SCADA",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "343d31bf73ab06fd"
            ]
        ]
    },
    {
        "id": "bd2a7c8f4e830832",
        "type": "Config_Web End",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "port": "8000",
        "x": 410,
        "y": 680,
        "wires": [
            [
                "80785d333e0ac505",
                "7ae2304b50ce3ff7"
            ]
        ]
    },
    {
        "id": "7ae2304b50ce3ff7",
        "type": "file",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "80785d333e0ac505",
        "type": "file",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "18242fb27f6f1332",
        "type": "function",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "PROCESS",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar ProjectVariables = global.get(\"ProjectVariable\");\nvar ProjectFunction = global.get(\"ProjectFunction\");\nvar count = 0\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nvar myInitial = setInterval(() => {\n    if (VariableSystem.COMMUNICATION_SOCKET_CLIENT[1]) {\n        // for (let index = 0; index < Variables.BitAdjust[1].length; index++) {\n        VariableSystem.COMMUNICATION_SOCKET_CLIENT[1].write(\n            'ReadData' + '|' + 0\n        );\n        // VariableSystem.COMMUNICATION_SOCKET_CLIENT[1].write(\n        //     'ReadBitDisplay' + '|' + 0\n        // );\n        // VariableSystem.COMMUNICATION_SOCKET_CLIENT[1].write(\n        //     'ReadWordAdjust' + '|' + 0\n        // );\n        // VariableSystem.COMMUNICATION_SOCKET_CLIENT[1].write(\n        //     'ReadWordDisplay' + '|' + 0\n        // );\n        // }\n    }\n\n    count = count + 1\n    if (count > 99) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}, 500);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Have Client Connected \" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n        socket.disconnect()\n    });\n    socket.on('initial', function () {\n\n    })\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data)\n        //BitAdjust\n        // if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         VariableSystem.COMMUNICATION_SOCKET_CLIENT[parseInt(data.idDevice)].write(\n        //             'BitAdjust' + '|' + data.tag\n        //             );\n        //     }\n\n        // }\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            VariableSystem.COMMUNICATION_SOCKET_CLIENT[parseInt(data.idDevice)].write(\n                'BitAdjust' + '|' + data.tag\n            );\n        }\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            VariableSystem.COMMUNICATION_SOCKET_CLIENT[parseInt(data.idDevice)].write(\n                'WordAdjust' + '|' + data.tag + '|' + data.value\n            );\n        }\n    });\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n// console.log('CLOSE NODE RED')\nvar VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.removeAllListeners()",
        "libs": [],
        "x": 750,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "0723b85a928e238e",
        "type": "function",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name": "Data_Process",
        "func": "var Variable = global.get(\"Variable\");\n\nlet sum_palyload = msg.payload.data + ''\nlet lines = sum_palyload.split(\"\\n\");\nlines.forEach(function(line) {\n    let temp_data=line.split('|')\n    if (temp_data[0]=='Reply_BitAdjust'){\n        Variable.BitAdjust[1][parseInt(temp_data[1])] = parseInt(temp_data[2])?1:0\n    }\n    if (temp_data[0] == 'Reply_BitDisplay') {\n        Variable.BitDisplay[1][parseInt(temp_data[1])] = parseInt(temp_data[2]) ? 1 : 0\n    }\n\n    if (temp_data[0] == 'Reply_WordAdjust') {\n        Variable.WordAdjust[1][parseInt(temp_data[1])] = parseInt(temp_data[2])\n    }\n    if (temp_data[0] == 'Reply_WordDisplay') {\n        Variable.WordDisplay[1][parseInt(temp_data[1])] = parseInt(temp_data[2])\n    }\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "343d31bf73ab06fd",
        "type": "Config_Web Title",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "title": "MEMONIC ACE",
        "x": 460,
        "y": 540,
        "wires": [
            [
                "1252fb3c254a8cae"
            ]
        ]
    },
    {
        "id": "1252fb3c254a8cae",
        "type": "Config_Web Memonic",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name_page": "ACE- BitDisplay",
        "indexPLC": "1",
        "word_start": "0",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "67819a568126b8e1"
            ]
        ]
    },
    {
        "id": "67819a568126b8e1",
        "type": "Config_Web Memonic",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name_page": "ACE- BitAdjust",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 990,
        "y": 540,
        "wires": [
            [
                "06c723932f373e3b"
            ]
        ]
    },
    {
        "id": "06c723932f373e3b",
        "type": "Config_Web Memonic",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name_page": "ACE- WordDisplay",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 720,
        "y": 600,
        "wires": [
            [
                "4a35aeb8a672c068"
            ]
        ]
    },
    {
        "id": "4a35aeb8a672c068",
        "type": "Config_Web Memonic",
        "z": "3faa7c0a18845ba4",
        "g": "78cf7fc655ed93e8",
        "name_page": "ACE- WordAdjust",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1000,
        "y": 600,
        "wires": [
            [
                "bd2a7c8f4e830832"
            ]
        ]
    },
    {
        "id": "96fa87ba5e890e8b",
        "type": "mqtt in",
        "z": "bd1c82177ed26c7b",
        "d": true,
        "g": "0e37c16ae7548394",
        "name": "",
        "topic": "IAQ_Measures1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 60,
        "wires": [
            [
                "de8b8e598863fb6a"
            ]
        ]
    },
    {
        "id": "de8b8e598863fb6a",
        "type": "debug",
        "z": "bd1c82177ed26c7b",
        "g": "0e37c16ae7548394",
        "name": "IAQ - 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 60,
        "wires": []
    },
    {
        "id": "f335f9a4eaf45efb",
        "type": "mqtt in",
        "z": "bd1c82177ed26c7b",
        "d": true,
        "g": "0e37c16ae7548394",
        "name": "",
        "topic": "IAQ_Measures2",
        "qos": "0",
        "datatype": "utf8",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "3673c903e9c64124"
            ]
        ]
    },
    {
        "id": "b8a8829dd605159f",
        "type": "mqtt in",
        "z": "bd1c82177ed26c7b",
        "d": true,
        "g": "0e37c16ae7548394",
        "name": "",
        "topic": "IAQ_Measures3",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "14e0e056f9767cca"
            ]
        ]
    },
    {
        "id": "059957828a8fb0cd",
        "type": "mqtt in",
        "z": "bd1c82177ed26c7b",
        "d": true,
        "g": "0e37c16ae7548394",
        "name": "",
        "topic": "IAQ_Measures4",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "0ff20b1347d8bb49"
            ]
        ]
    },
    {
        "id": "3673c903e9c64124",
        "type": "debug",
        "z": "bd1c82177ed26c7b",
        "g": "0e37c16ae7548394",
        "name": "IAQ - 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "14e0e056f9767cca",
        "type": "debug",
        "z": "bd1c82177ed26c7b",
        "g": "0e37c16ae7548394",
        "name": "IAQ - 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 180,
        "wires": []
    },
    {
        "id": "0ff20b1347d8bb49",
        "type": "debug",
        "z": "bd1c82177ed26c7b",
        "g": "0e37c16ae7548394",
        "name": "IAQ - 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "dfba3da3abedc5a2",
        "type": "debug",
        "z": "bd1c82177ed26c7b",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 580,
        "wires": []
    },
    {
        "id": "61c4949fd1f9c387",
        "type": "mqtt in",
        "z": "bd1c82177ed26c7b",
        "d": true,
        "name": "",
        "topic": "IAQ_Measures1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 580,
        "wires": [
            [
                "dfba3da3abedc5a2"
            ]
        ]
    },
    {
        "id": "3dc36095ad8f9ec1",
        "type": "inject",
        "z": "5e75956f527d5520",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "c6a47970f9064177"
            ]
        ]
    },
    {
        "id": "795a9417ac86d13b",
        "type": "vnc_setup",
        "z": "5e75956f527d5520",
        "name": "",
        "host": "192.168.1.100",
        "port": 5900,
        "password": "111111",
        "indexVNC": "1",
        "fps": "20",
        "checkbox_copyRect": false,
        "checkbox_zrle": false,
        "checkbox_hextile": false,
        "checkbox_raw": false,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 730,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c6a47970f9064177",
        "type": "function",
        "z": "5e75956f527d5520",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HK_PG.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 260,
        "wires": [
            [
                "79c885b91fc53541"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "79c885b91fc53541",
        "type": "function",
        "z": "5e75956f527d5520",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    node.warn(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        node.warn(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n    });\n\n    //VNC\n    for (let i = 0; i < 10; i++) {\n        socket.on('mouse_vnc_' + i, function (evnt) {\n            if (VariableSystem.COMMUNICATION_VNC[1]) {\n                VariableSystem.COMMUNICATION_VNC[1].sendPointerEvent(evnt.x, evnt.y, evnt.button);\n            }\n        });\n        socket.on('keyboard_vnc_'+i, function (evnt) {\n            if (VariableSystem.COMMUNICATION_VNC[i]) {\n                VariableSystem.COMMUNICATION_VNC[i].sendKeyEvent(0, 1);\n            }\n        });\n        socket.on('disconnect_vnc_' + i, function () {\n            // disconnectClient(socket);\n            node.warn('Client disconnected');\n        });\n    }\n\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "795a9417ac86d13b"
            ]
        ]
    },
    {
        "id": "912c447eb476bf6b",
        "type": "inject",
        "z": "5e75956f527d5520",
        "g": "c6543ebf14069787",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "76ccabdc2ae2dba9"
            ]
        ]
    },
    {
        "id": "76ccabdc2ae2dba9",
        "type": "function",
        "z": "5e75956f527d5520",
        "g": "c6543ebf14069787",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 60,
        "wires": [
            [
                "72688111f63f5644"
            ]
        ]
    },
    {
        "id": "72688111f63f5644",
        "type": "debug",
        "z": "5e75956f527d5520",
        "g": "c6543ebf14069787",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 60,
        "wires": []
    },
    {
        "id": "caa8b2f5688c5ca8",
        "type": "function",
        "z": "5e75956f527d5520",
        "g": "c6543ebf14069787",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e3df02a54f7a23ee",
        "type": "inject",
        "z": "5e75956f527d5520",
        "g": "c6543ebf14069787",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "caa8b2f5688c5ca8"
            ]
        ]
    },
    {
        "id": "031d209dcd447906",
        "type": "inject",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "2ba55636f687aed8",
                "8cf60b694cc81ea3"
            ]
        ]
    },
    {
        "id": "2ba55636f687aed8",
        "type": "Config_Web Begin",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "x": 280,
        "y": 280,
        "wires": [
            [
                "6bc8c3a142c865b2"
            ]
        ]
    },
    {
        "id": "6bc8c3a142c865b2",
        "type": "Config_Web Title",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "title": "SCADA PAGE",
        "x": 480,
        "y": 280,
        "wires": [
            [
                "a720b9b87a321b16"
            ]
        ]
    },
    {
        "id": "a720b9b87a321b16",
        "type": "Config_Web Page",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name_page": "SCADA",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "9dd0d86b6c4daadd"
            ]
        ]
    },
    {
        "id": "9dd0d86b6c4daadd",
        "type": "Config_Web End",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "port": "8000",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "6bb400d901a572d2",
                "e98030f710cfcf7e"
            ]
        ]
    },
    {
        "id": "6bb400d901a572d2",
        "type": "file",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e98030f710cfcf7e",
        "type": "file",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "",
        "filename": "../RUN_TIME/Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "2d7f9e62e9982287",
        "type": "link out",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "5827d50f3574fc14"
        ],
        "x": 695,
        "y": 240,
        "wires": []
    },
    {
        "id": "22c41aaa7b36b1ee",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\n\nvar SetMaxElementChart = 45\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //CHART=====================================================================\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ResetChartFH') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_FH', tempData.slice())\n                global.set('Chart_Index_FH', 0)\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n            }\n            if (data.tag === 'ResetChartSpeed') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        Value2: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Pick_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n                global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Place_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n                global.set('Chart_Data_Speed_IO', tempData.slice())\n                global.set('Chart_Index_Speed_IO', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n                global.set('Chart_Data_Speed_PP', tempData.slice())\n                global.set('Chart_Index_Speed_PP', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n                global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n                global.set('Chart_Index_Speed_PlacePick', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n\n                global.set('Chart_Data_Speed_Bag', tempData.slice())\n                global.set('Chart_Index_Speed_Bag', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n                global.set('Chart_Data_Speed_DelayPlace', tempData.slice())\n                global.set('Chart_Index_Speed_DelayPlace', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_DelayPlace', global.get('Chart_Data_Speed_DelayPlace'))\n            }\n            if (data.tag === 'ReSendChart') {\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n            }\n        };\n        //CHART=====================================================================\n\n    });\n})\n// //CHART=====================================================================\n// //Initial\n// let tempData = []\n// for (var i = 1; i <= SetMaxElementChart; i++) {\n//     tempData.push({\n//         Value: null,\n//         Value2: null,\n//         TimeCreate: ''\n//     });\n// }\n// global.set('Chart_Data', tempData.slice())\n// global.set('Chart_Index', 0)\n// VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n\n// global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Pick_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n// global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Place_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n// global.set('Chart_Data_Speed_IO', tempData.slice())\n// global.set('Chart_Index_Speed_IO', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n// global.set('Chart_Data_Speed_PP', tempData.slice())\n// global.set('Chart_Index_Speed_PP', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n// global.set('Chart_Data_Speed_Bag', tempData.slice())\n// global.set('Chart_Index_Speed_Bag', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n// var Old_FH_X = Variable.WordDisplay[1][4]\n// var Old_FH_Y = Variable.WordDisplay[1][5]\n// var Old_Distance = Variable.WordDisplay[1][43]\n\n// var Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n// var Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n// var Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n// var Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n// var Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n// var Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n// var Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n// var Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n// var count = 0\n// //SCAN\n// function fnTimer() {\n//     //FH\n//     if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n//         Old_FH_X = Variable.WordDisplay[1][4]\n//         Old_FH_Y = Variable.WordDisplay[1][5]\n\n//         let tempData = global.get('Chart_Data')\n//         let tempIndex = global.get('Chart_Index')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             FH_X: Old_FH_X,\n//             FH_Y: Old_FH_Y,\n//             Distance: Variable.WordDisplay[1][43],\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data', tempData.slice())\n//         global.set('Chart_Index', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_FH', tempData)\n//     }\n//     //Check Speed Pick Y\n//     if ((Variable.WordDisplay[1][49] !== Old_CheckSpeed_Pick_Y)) {\n//         Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n//         Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n\n//         let tempData = global.get('Chart_Data_Speed_Pick_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Pick_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Pick_Y,\n//             Value2: Old_CheckSpeed_DelayPick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Pick_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\n//     }\n//     //Check Speed Place Y + Delay At Place\n//     if ((Variable.WordDisplay[1][45] !== Old_CheckSpeed_Place_Y)) {\n//         Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n//         Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n\n//         let tempData = global.get('Chart_Data_Speed_Place_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Place_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Place_Y,\n//             Value2: Old_CheckSpeed_DelayPlace,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Place_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\n//     }\n//     //Check Speed IO\n//     if ((Variable.WordDisplay[1][46] !== Old_CheckSpeed_In_Out)) {\n//         Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n\n//         let tempData = global.get('Chart_Data_Speed_IO')\n//         let tempIndex = global.get('Chart_Index_Speed_IO')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_In_Out,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_IO', tempData.slice())\n//         global.set('Chart_Index_Speed_IO', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_IO', tempData)\n//     }\n//     //Check Speed PP\n//     if ((Variable.WordDisplay[1][48] !== Old_CheckSpeed_PP)) {\n//         Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n\n//         let tempData = global.get('Chart_Data_Speed_PP')\n//         let tempIndex = global.get('Chart_Index_Speed_PP')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PP,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PP', tempData.slice())\n//         global.set('Chart_Index_Speed_PP', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PP', tempData)\n//     }\n//     //Check Speed Place 2 Pick Bag 1\n//     if ((Variable.WordDisplay[1][50] !== Old_CheckSpeed_PlacePick)) {\n//         Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n\n//         let tempData = global.get('Chart_Data_Speed_PlacePick')\n//         let tempIndex = global.get('Chart_Index_Speed_PlacePick')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PlacePick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n//         global.set('Chart_Index_Speed_PlacePick', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', tempData)\n//     }\n\n//     //Check Speed Bag\n//     if ((Variable.WordDisplay[1][33] !== Old_CheckSpeed_Bag)) {\n//         Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n//         let tempData = global.get('Chart_Data_Speed_Bag')\n//         let tempIndex = global.get('Chart_Index_Speed_Bag')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Bag,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Bag', tempData.slice())\n//         global.set('Chart_Index_Speed_Bag', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Bag', tempData)\n//     }\n\n\n//     count = count + 1\n//     if (count > 99999) { count = 0 }\n//     node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n// }\n// var myInitial = setInterval(fnTimer, 300);\n// //CHART=====================================================================\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "2d7f9e62e9982287"
            ]
        ]
    },
    {
        "id": "8cf60b694cc81ea3",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "ec0174097ba91509",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/CHECK_PC.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "22c41aaa7b36b1ee"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "5b8f1fdddf945aa4",
        "type": "http in",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "GET API X",
        "url": "/Chart_FH_X",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 500,
        "wires": [
            [
                "76016330a6b4bf52"
            ]
        ]
    },
    {
        "id": "76016330a6b4bf52",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_X')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "5085894a038b08e0"
            ]
        ]
    },
    {
        "id": "5085894a038b08e0",
        "type": "http response",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 500,
        "wires": []
    },
    {
        "id": "2a86f1e969a06e63",
        "type": "http in",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "PUT RESET X",
        "url": "/Chart_FH_X/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "6ef122f3d8775b1b"
            ]
        ]
    },
    {
        "id": "6ef122f3d8775b1b",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "RESET",
        "func": "var SetMaxElementChart = 100\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_FH_X', tempData.slice())\nglobal.set('Chart_FH_Y', tempData.slice())\nglobal.set('Chart_FH_Distance', tempData.slice())\nglobal.set('Chart_FH_Index', 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 600,
        "wires": [
            [
                "6adf4d564285fc3b"
            ]
        ]
    },
    {
        "id": "6adf4d564285fc3b",
        "type": "http response",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 600,
        "wires": []
    },
    {
        "id": "30a0ad3730d3872e",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 100\nvar count=0\n\n// let tempData = global.get('Chart_Data_Speed_PP')\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n\nvar Old_FH_X = Variable.WordDisplay[1][4]\nvar Old_FH_Y = Variable.WordDisplay[1][5]\nvar Old_Distance = Variable.WordDisplay[1][43]\n\nfunction fnTimer() {\n    //FH\n    if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n        Old_FH_X = Variable.WordDisplay[1][4]\n        Old_FH_Y = Variable.WordDisplay[1][5]\n        //FH_X\n        tempData = global.get('Chart_FH_X')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_X,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_X', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\n\n        //FH_Y\n        tempData = global.get('Chart_FH_Y')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\n\n        //FH_Distance\n        tempData = global.get('Chart_FH_Distance')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Variable.WordDisplay[1][43],\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Distance', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_FH_Index', tempIndex)\n    }\n\n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "49c73ee3dba3a9da",
        "type": "http in",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "PUT RESET Y",
        "url": "/Chart_FH_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "6ef122f3d8775b1b"
            ]
        ]
    },
    {
        "id": "0b9a1a90676e1d03",
        "type": "http in",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "PUT RESET Distance",
        "url": "/Chart_FH_Distance/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "6ef122f3d8775b1b"
            ]
        ]
    },
    {
        "id": "5827d50f3574fc14",
        "type": "link in",
        "z": "3a4fb62dbb775101",
        "g": "b28dcdd5b42ee3dd",
        "name": "link in 4",
        "links": [
            "2d7f9e62e9982287"
        ],
        "x": 205,
        "y": 720,
        "wires": [
            [
                "30a0ad3730d3872e"
            ]
        ]
    },
    {
        "id": "3b2f10a3773b0251",
        "type": "inject",
        "z": "3a4fb62dbb775101",
        "g": "afc44b117d393bc5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 860,
        "y": 80,
        "wires": [
            [
                "e31f2812ab8ff2f7"
            ]
        ]
    },
    {
        "id": "e31f2812ab8ff2f7",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "afc44b117d393bc5",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 80,
        "wires": [
            [
                "fc2dd2156936ce86"
            ]
        ]
    },
    {
        "id": "fc2dd2156936ce86",
        "type": "debug",
        "z": "3a4fb62dbb775101",
        "g": "afc44b117d393bc5",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 80,
        "wires": []
    },
    {
        "id": "533de5d77941bc25",
        "type": "function",
        "z": "3a4fb62dbb775101",
        "g": "afc44b117d393bc5",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "52e2ba0508ef9a89",
        "type": "inject",
        "z": "3a4fb62dbb775101",
        "g": "afc44b117d393bc5",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "533de5d77941bc25"
            ]
        ]
    },
    {
        "id": "39a6d0562ef27266",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "MEMONIC VIBRATION",
        "x": 870,
        "y": 2560,
        "wires": [
            [
                "9c9e492e61d24110"
            ]
        ]
    },
    {
        "id": "9c9e492e61d24110",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - BitDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 1170,
        "y": 2560,
        "wires": [
            [
                "98a89bc0c5110cf8"
            ]
        ]
    },
    {
        "id": "98a89bc0c5110cf8",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - BitAdjust",
        "indexPLC": "2",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1460,
        "y": 2560,
        "wires": [
            [
                "ce67e90910d96f40"
            ]
        ]
    },
    {
        "id": "ce67e90910d96f40",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - WordDisplay",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 1180,
        "y": 2620,
        "wires": [
            [
                "5657f0ba6e898905"
            ]
        ]
    },
    {
        "id": "5657f0ba6e898905",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - WordAdjust",
        "indexPLC": "2",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1470,
        "y": 2620,
        "wires": [
            [
                "60a4e63c3669a4ab"
            ]
        ]
    },
    {
        "id": "60a4e63c3669a4ab",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - DWordDisplay",
        "indexPLC": "2",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 1180,
        "y": 2680,
        "wires": [
            [
                "5a18b426714353cb"
            ]
        ]
    },
    {
        "id": "5a18b426714353cb",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "Vibration - DWordAdjust",
        "indexPLC": "2",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1480,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "e476bf7668a4b7f2",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Get Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStore = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store', (err, rows) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                }\n\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 180,
        "wires": []
    },
    {
        "id": "30ff385f153b2524",
        "type": "link in",
        "z": "23b8e3bff5be828e",
        "name": "link in 7",
        "links": [
            "389b0a27c2819156",
            "622f212ffa9fbfb2"
        ],
        "x": 1045,
        "y": 240,
        "wires": [
            [
                "e476bf7668a4b7f2",
                "9ce567d8bed108c9",
                "f0b15cf4f2bc4ee3",
                "5c095049753f7254"
            ]
        ]
    },
    {
        "id": "9ce567d8bed108c9",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Insert Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'LotId text UNIQUE,'\n                tempText = tempText + 'Product text,'\n                tempText = tempText + 'Quantity int,'\n                tempText = tempText + 'QuantityOrdering int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Location text,'\n                tempText = tempText + 'State text,'\n                tempText = tempText + 'Package text,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'TimeCreate Date,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store(' + newTempText + ')', (err) => {\n                    if (err) {\n                        cb(null, err)\n                    } else {\n                        let command = `INSERT INTO Store(_id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${LotId ? LotId : ''}',\n                            '${Product ? Product : ''}',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${Location ? Location : ''}',\n                            '${'STOCK'}',\n                            '${Package ? Package : ''}',\n                            '${Remark ? Remark : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${new Date()}'\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                            }\n                        });\n                    }\n\n                })\n            })\n\n            //Save Report\n            if (SaveReport) {\n                VariableSystem.LocalDB.serialize(() => {\n                    let tempText = ''\n                    tempText = tempText + '_id text PRIMARY KEY,'\n                    tempText = tempText + 'id text,'\n                    tempText = tempText + 'LotId text,'\n                    tempText = tempText + 'Product text,'\n                    tempText = tempText + 'Quantity int,'\n                    tempText = tempText + 'QuantityOrdering int,'\n                    tempText = tempText + 'Unit text,'\n                    tempText = tempText + 'Location text,'\n                    tempText = tempText + 'State text,'\n                    tempText = tempText + 'Package text,'\n                    tempText = tempText + 'Remark text,'\n                    tempText = tempText + 'Weight int,'\n                    tempText = tempText + 'TimeCreate Date,'\n                    tempText = tempText + 'User text,'\n                    tempText = tempText + 'LevelUser text,'\n                    tempText = tempText + 'TypeReport text,'\n\n                    let newTempText = tempText.substring(0, tempText.length - 1);\n                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '_',\n                            '${LotId ? LotId : ''}',\n                            '${Product ? Product : ''}',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${Location ? Location : ''}',\n                            '${State ? State : ''}',\n                            '${Package ? Package : ''}',\n                            '${Remark ? Remark : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${Date.now()}',\n                            '${User ? User : '_'}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            'INSERT'\n                            )`\n                            VariableSystem.LocalDB.run(command, (err) => {\n                                if (err) {\n                                    cb(null, err)\n                                } else {\n                                    cb('success')\n                                }\n                            });\n                        }\n\n                    })\n                })\n            }\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 220,
        "wires": []
    },
    {
        "id": "f0b15cf4f2bc4ee3",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Delete Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\n\nglobal_functions.DeleteStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id !== undefined) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            //Save Report\n                            if (SaveReport) {\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'QuantityOrdering int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Location text,'\n                                    tempText = tempText + 'State text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser text,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            node.warn(err);\n                                            cb(null, err)\n                                        } else {\n                                            cb('success')\n                                            let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${_id}',\n                            '${element.LotId ? element.LotId : ''}',\n                            '${element.Product ? element.Product : ''}',\n                            '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                            '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                            '${element.Unit ? element.Unit : ''}',\n                            '${element.Location ? element.Location : ''}',\n                            '${element.State ? element.State : ''}',\n                            '${element.Package ? element.Package : ''}',\n                            '${element.Remark ? element.Remark : ''}',\n                            '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                            '${Date.now()}',\n                            '${User ? User : '_'}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            'DELETE'\n                            )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n\n                                    })\n                                })\n                            }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "5c095049753f7254",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Update Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.UpdateStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n\n\n        if (_id) {\n            try {\n                let newValue = '';\n                if (typeof (LotId) !== 'undefined') { newValue = newValue + 'LotId=\"' + LotId + '\",' }\n                if (typeof (Product) !== 'undefined') { newValue = newValue + 'Product=\"' + Product + '\",' }\n                if (typeof (Quantity) !== 'undefined') { newValue = newValue + 'Quantity=' + Quantity + ',' }\n                if (typeof (QuantityOrdering) !== 'undefined') { newValue = newValue + 'QuantityOrdering=' + QuantityOrdering + ',' }\n                if (typeof (Unit) !== 'undefined') { newValue = newValue + 'Unit=\"' + Unit + '\",' }\n                if (typeof (Location) !== 'undefined') { newValue = newValue + 'Location=\"' + Location + '\",' }\n                if (typeof (State) !== 'undefined') { newValue = newValue + 'State=\"' + State + '\",' }\n                if (typeof (Package) !== 'undefined') { newValue = newValue + 'Package=\"' + Package + '\",' }\n                if (typeof (Remark) !== 'undefined') { newValue = newValue + 'Remark=\"' + Remark + '\",' }\n                if (typeof (Weight) !== 'undefined') { newValue = newValue + 'Weight=\"' + Weight + '\",' }\n\n                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                VariableSystem.LocalDB.serialize(() => {\n                    let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + _id + '\"'\n                    VariableSystem.LocalDB.run(temp, function (err) {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            cb('success')\n                            VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                                if (err) {\n                                    cb(null, err)\n                                } else {\n                                    //Save Report\n                                    if (SaveReport) {\n                                        VariableSystem.LocalDB.serialize(() => {\n                                            let tempText = ''\n                                            tempText = tempText + '_id text PRIMARY KEY,'\n                                            tempText = tempText + 'id text,'\n                                            tempText = tempText + 'LotId text,'\n                                            tempText = tempText + 'Product text,'\n                                            tempText = tempText + 'Quantity int,'\n                                            tempText = tempText + 'QuantityOrdering int,'\n                                            tempText = tempText + 'Unit text,'\n                                            tempText = tempText + 'Location text,'\n                                            tempText = tempText + 'State text,'\n                                            tempText = tempText + 'Package text,'\n                                            tempText = tempText + 'Remark text,'\n                                            tempText = tempText + 'Weight int,'\n                                            tempText = tempText + 'TimeCreate Date,'\n                                            tempText = tempText + 'User text,'\n                                            tempText = tempText + 'LevelUser text,'\n                                            tempText = tempText + 'TypeReport text,'\n\n                                            let newTempText = tempText.substring(0, tempText.length - 1);\n                                            let element = rows[0]\n                                            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                                if (err) {\n                                                    cb(null, err)\n                                                } else {\n                                                    let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                                                    '${'a' + Math.random().toString(36)}',\n                                                    '${_id}',\n                                                    '${element.LotId ? element.LotId : ''}',\n                                                    '${element.Product ? element.Product : ''}',\n                                                    '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                                                    '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                                                    '${element.Unit ? element.Unit : ''}',\n                                                    '${element.Location ? element.Location : ''}',\n                                                    '${element.State ? element.State : ''}',\n                                                    '${element.Package ? element.Package : ''}',\n                                                    '${element.Remark ? element.Remark : ''}',\n                                                    '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                                    '${Date.now()}',\n                                                    '${User ? User : '_'}',\n                                                    '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                                    'UPDATE'\n                                                    )`\n                                                    VariableSystem.LocalDB.run(command, (err) => {\n                                                        if (err) {\n                                                            node.warn('Update Report Err: ' + err);\n                                                        }\n                                                    });\n                                                }\n\n                                            })\n                                        })\n                                    }\n                                }\n                            })\n                        }\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "30333e5f79335397",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Get Store_Select",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStoreSelected = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Select', (err, rows) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                }\n\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 500,
        "wires": []
    },
    {
        "id": "2c0fefb433cfb392",
        "type": "link in",
        "z": "23b8e3bff5be828e",
        "name": "link in 8",
        "links": [
            "389b0a27c2819156",
            "622f212ffa9fbfb2"
        ],
        "x": 1045,
        "y": 540,
        "wires": [
            [
                "30333e5f79335397",
                "d97a688ab04664d0",
                "7a7aeafdc2b51c09"
            ]
        ]
    },
    {
        "id": "d97a688ab04664d0",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Insert Store Select",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'id text,'\n                tempText = tempText + 'LotId text,'\n                tempText = tempText + 'Product text,'\n                tempText = tempText + 'Destination text,'\n                tempText = tempText + 'Quantity int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Package text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'User text,'\n                tempText = tempText + 'LevelUser int,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select(' + newTempText + ')', (err) => {\n                    if (err) {\n                        cb(null, err)\n                    } else {\n                        let command = `INSERT INTO Store_Select(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${id}',\n                            '${LotId}',\n                            '${Product}',\n                            '${Destination}',\n                            '${parseInt(Quantity)}',\n                            '${Unit}',\n                            '${Remark ? Remark : ''}',\n                            '${Package ? Package : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${User ? User : ''}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}'\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                                //Update Store Status\n                                try {\n                                    let newValue = '';\n                                    newValue = newValue + 'State=\"UNDER ORDER\",'\n                                    let tempNewValue = newValue.substring(0, newValue.length - 1);\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + id + '\"'\n                                        VariableSystem.LocalDB.run(temp, function (err) {\n                                            if (err) {\n                                                node.warn('Update Store Status Err:' + err)\n                                            } else {\n                                                flow.get(\"global_functions\").GetStore((result, err) => {\n                                                    if (err) {\n                                                        node.warn('Get Store Err:' + err)\n                                                    } else {\n                                                        VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    }\n                                                })\n                                            }\n                                        });\n                                    })\n\n                                } catch (err) {\n                                    cb(null, err)\n                                }\n                                //Save Report\n                                if (SaveReport) {\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let tempText = ''\n                                        tempText = tempText + '_id text PRIMARY KEY,'\n                                        tempText = tempText + 'id text,'\n                                        tempText = tempText + 'LotId text,'\n                                        tempText = tempText + 'Product text,'\n                                        tempText = tempText + 'Destination text,'\n                                        tempText = tempText + 'Quantity int,'\n                                        tempText = tempText + 'Unit text,'\n                                        tempText = tempText + 'Remark text,'\n                                        tempText = tempText + 'Package text,'\n                                        tempText = tempText + 'Weight int,'\n                                        tempText = tempText + 'User text,'\n                                        tempText = tempText + 'LevelUser int,'\n                                        tempText = tempText + 'TimeCreate Date,'\n                                        tempText = tempText + 'TypeReport text,'\n\n                                        let newTempText = tempText.substring(0, tempText.length - 1);\n                                        VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                                            if (err) {\n                                                cb(null, err)\n                                            } else {\n                                                let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${id}',\n                                            '${LotId}',\n                                            '${Product}',\n                                            '${Destination}',\n                                            '${parseInt(Quantity)}',\n                                            '${Unit}',\n                                            '${Remark ? Remark : ''}',\n                                            '${Package ? Package : ''}',\n                                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                                            '${User ? User : ''}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            '${Date.now()}',\n                                            'INSERT'\n                                            )`\n                                                VariableSystem.LocalDB.run(command, (err) => {\n                                                    if (err) {\n                                                        node.warn(err)\n                                                    }\n                                                });\n                                            }\n\n                                        })\n                                    })\n                                }\n                            }\n                        });\n                    }\n                })\n            })\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 540,
        "wires": []
    },
    {
        "id": "7a7aeafdc2b51c09",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Delete Store Select",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Select' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            //Save Report\n                            if (SaveReport) {\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Destination text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            cb(null, err)\n                                        } else {\n                                            let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${_id}',\n                                            '${element.LotId}',\n                                            '${element.Product}',\n                                            '${element.Destination}',\n                                            '${parseInt(element.Quantity)}',\n                                            '${element.Unit}',\n                                            '${element.Remark ? element.Remark : ''}',\n                                            '${element.Package ? element.Package : ''}',\n                                            '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                            '${User ? User : ''}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            '${Date.now()}',\n                                            'DELETE'\n                                            )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n\n                                    })\n                                })\n                            }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store_Select WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 580,
        "wires": []
    },
    {
        "id": "b6994d5a095834b6",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Get Store Prepare Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStorePrepareWarehouse = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Prepare_Warehouse', (err, rows) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                }\n\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 860,
        "wires": []
    },
    {
        "id": "289dc66648f497bd",
        "type": "link in",
        "z": "23b8e3bff5be828e",
        "name": "link in 9",
        "links": [
            "389b0a27c2819156",
            "622f212ffa9fbfb2"
        ],
        "x": 1045,
        "y": 900,
        "wires": [
            [
                "b6994d5a095834b6",
                "5c48633f58b0dd19",
                "0111556d246ca195"
            ]
        ]
    },
    {
        "id": "5c48633f58b0dd19",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Insert Store Prepare Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStorePrepareWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'id text,'\n                tempText = tempText + 'LotId text,'\n                tempText = tempText + 'Product text,'\n                tempText = tempText + 'Destination text,'\n                tempText = tempText + 'Quantity int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Package text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'User text,'\n                tempText = tempText + 'LevelUser int,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Prepare_Warehouse(' + newTempText + ')', (err) => {\n                    if (err) {\n                        node.warn(err)\n                        cb(null, err)\n                    } else {\n                        let command = `INSERT INTO Store_Prepare_Warehouse(_id, id, LotId, Product, Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${id}',\n                            '${LotId}',\n                            '${Product}',\n                            '${Destination}',\n                            '${parseInt(Quantity)}',\n                            '${Unit}',\n                            '${Remark ? Remark : ''}',\n                            '${Package ? Package : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${User ? User : ''}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}'\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                node.warn(err)\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                                //Save Report\n                                if (SaveReport) {\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let tempText = ''\n                                        tempText = tempText + '_id text PRIMARY KEY,'\n                                        tempText = tempText + 'id text,'\n                                        tempText = tempText + 'LotId text,'\n                                        tempText = tempText + 'Product text,'\n                                        tempText = tempText + 'Destination text,'\n                                        tempText = tempText + 'Quantity int,'\n                                        tempText = tempText + 'Unit text,'\n                                        tempText = tempText + 'Remark text,'\n                                        tempText = tempText + 'Package text,'\n                                        tempText = tempText + 'Weight int,'\n                                        tempText = tempText + 'User text,'\n                                        tempText = tempText + 'LevelUser int,'\n                                        tempText = tempText + 'TimeCreate Date,'\n                                        tempText = tempText + 'TypeReport text,'\n\n                                        let newTempText = tempText.substring(0, tempText.length - 1);\n                                        VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Prepare_Warehouse_Report(' + newTempText + ')', (err) => {\n                                            if (err) {\n                                                cb(null, err)\n                                            } else {\n                                                let command = `INSERT INTO Store_Prepare_Warehouse_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${id}',\n                                            '${LotId}',\n                                            '${Product}',\n                                            '${Destination}',\n                                            '${parseInt(Quantity)}',\n                                            '${Unit}',\n                                            '${Remark ? Remark : ''}',\n                                            '${Package ? Package : ''}',\n                                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                                            '${User ? User : ''}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            '${Date.now()}',\n                                            'INSERT'\n                                            )`\n                                                VariableSystem.LocalDB.run(command, (err) => {\n                                                    if (err) {\n                                                        node.warn(err)\n                                                    }\n                                                });\n                                            }\n                                        })\n                                    })\n                                }\n                            }\n                        });\n                    }\n                })\n            })\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 900,
        "wires": []
    },
    {
        "id": "0111556d246ca195",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Delete Store Prepare Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStorePrepareWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Prepare_Warehouse' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            //Save Report\n                            if (SaveReport) {\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Destination text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Prepare_Warehouse_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            cb(null, err)\n                                        } else {\n                                            let command = `INSERT INTO Store_Prepare_Warehouse_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                        '${'a' + Math.random().toString(36)}',\n                                        '${_id}',\n                                        '${element.LotId}',\n                                        '${element.Product}',\n                                        '${element.Destination}',\n                                        '${parseInt(element.Quantity)}',\n                                        '${element.Unit}',\n                                        '${element.Remark ? element.Remark : ''}',\n                                        '${element.Package ? element.Package : ''}',\n                                        '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                        '${User ? User : ''}',\n                                        '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                        '${Date.now()}',\n                                        'DELETE'\n                                        )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n                                    })\n                                })\n                            }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store_Prepare_Warehouse WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 940,
        "wires": []
    },
    {
        "id": "dcae39734071cfd8",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Insert Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreDeliveryWarehouse = function (arrdata, cb) {\n    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n        if (err) {\n            node.warn(err)\n            cb(null, err)\n        } else {\n            if (result.length == 0) {\n                arrdata.forEach(function (data,index) {\n                    if (typeof data === 'object' && data !== null) {\n                        const isLastElement = index === arrdata.length - 1;\n                        let id = data.id\n                        let LotId = data.LotId\n                        let Product = data.Product\n                        let Destination = data.Destination\n                        let Quantity = data.Quantity\n                        let Unit = data.Unit\n                        let Remark = data.Remark\n                        let Package = data.Package\n                        let Weight = data.Weight\n                        let User = data.User\n                        let LevelUser = data.LevelUser\n\n                        try {\n                            VariableSystem.LocalDB.serialize(() => {\n                                let tempText = ''\n                                tempText = tempText + '_id text PRIMARY KEY,'\n                                tempText = tempText + 'id text,'\n                                tempText = tempText + 'LotId text,'\n                                tempText = tempText + 'Product text,'\n                                tempText = tempText + 'Destination text,'\n                                tempText = tempText + 'Quantity int,'\n                                tempText = tempText + 'Unit text,'\n                                tempText = tempText + 'Remark text,'\n                                tempText = tempText + 'Package text,'\n                                tempText = tempText + 'Weight int,'\n                                tempText = tempText + 'User text,'\n                                tempText = tempText + 'LevelUser int,'\n\n                                let newTempText = tempText.substring(0, tempText.length - 1);\n                                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Delivery_Warehouse(' + newTempText + ')', (err) => {\n                                    if (err) {\n                                        node.warn(err)\n                                        cb(null, err)\n                                    } else {\n                                        let command = `INSERT INTO Store_Delivery_Warehouse(_id, id, LotId, Product, Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser)VALUES(\n                                        '${'a' + Math.random().toString(36)}',\n                                        '${id}',\n                                        '${LotId}',\n                                        '${Product}',\n                                        '${Destination}',\n                                        '${parseInt(Quantity)}',\n                                        '${Unit}',\n                                        '${Remark ? Remark : ''}',\n                                        '${Package ? Package : ''}',\n                                        '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                                        '${User ? User : ''}',\n                                        '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}'\n                                        )`\n                                        VariableSystem.LocalDB.run(command, (err) => {\n                                            if (err) {\n                                                node.warn('err' + err)\n                                                cb(null, err)\n                                            } else {\n                                                if (isLastElement) {\n                                                    cb('success')\n                                                }\n                                            }\n                                        });\n                                    }\n                                })\n                            })\n                        } catch (err) {\n                            cb(null, err)\n                        }\n                    }\n                });\n            } else {\n                cb('length_result_more_0')\n            }\n        }\n    })\n}\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0892832098404a0f",
        "type": "link in",
        "z": "23b8e3bff5be828e",
        "name": "link in 10",
        "links": [
            "389b0a27c2819156",
            "622f212ffa9fbfb2"
        ],
        "x": 1045,
        "y": 1100,
        "wires": [
            [
                "8426e0316de3ba27",
                "dcae39734071cfd8",
                "4078477afc9fea24"
            ]
        ]
    },
    {
        "id": "8426e0316de3ba27",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Get Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStoreDeliveryWarehouse = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Delivery_Warehouse', (err, rows) => {\n                if (err) {\n                    node.warn(err);\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                    if (rows.length > 0) {\n                        Variables.ListString[0][14] = rows[0].id;\n                        Variables.ListString[0][15] = rows[0].LotId;\n                        Variables.ListString[0][16] = rows[0].Product;\n                        Variables.ListString[0][17] = rows[0].Destination;\n                        Variables.ListString[0][18] = rows[0].Quantity;\n                        Variables.ListString[0][19] = rows[0]._id;\n                        Variables.ListString[0][20] = rows[0].User;\n                    } else {\n                        Variables.ListString[0][14] = '---';\n                        Variables.ListString[0][15] = '---';\n                        Variables.ListString[0][16] = '---';\n                        Variables.ListString[0][17] = '---';\n                        Variables.ListString[0][18] = '---';\n                        Variables.ListString[0][20] = '---';\n                    }\n                }\n\n            })\n        })\n    } catch (err) {\n        node.warn(err);\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4078477afc9fea24",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "SubFunc Delete Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreDeliveryWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    if (SaveReport) {\n                        VariableSystem.LocalDB.all('SELECT * FROM Store_Delivery_Warehouse' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                //Save Report\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'QuantityOrdering int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Location text,'\n                                    tempText = tempText + 'State text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser text,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Delivery_Warehouse_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            node.warn(err);\n                                        } else {\n                                            let command = `INSERT INTO Store_Delivery_Warehouse_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${_id}',\n                                            '${element.LotId ? element.LotId : ''}',\n                                            '${element.Product ? element.Product : ''}',\n                                            '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                                            '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                                            '${element.Unit ? element.Unit : ''}',\n                                            '${element.Location ? element.Location : ''}',\n                                            '${element.State ? element.State : ''}',\n                                            '${element.Package ? element.Package : ''}',\n                                            '${element.Remark ? element.Remark : ''}',\n                                            '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                            '${Date.now()}',\n                                            '${User ? User : '_'}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            'DELETE'\n                                            )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n\n                                    })\n                                })\n                            }\n                        })\n                    }\n\n                    VariableSystem.LocalDB.run('DELETE from Store_Delivery_Warehouse WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            node.warn('err' + err);\n                            cb(null, err)\n                        }else{\n                            cb('success')\n                        }\n                    });\n                })\n            } catch (err) {\n                node.warn('err' + err);\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8444f86a3963e5f0",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "OLD SubFunc Insert Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStore = function (data, cb) {\n    node.warn(data);\n    let Code = data.Code\n    let Name = data.Name\n    let Quantity = data.Quantity\n    let QuantityOrdering = data.QuantityOrdering\n    let Unit = data.Unit\n    let Row = data.Row\n    let Column = data.Column\n    let Comment = data.Comment\n    let LastAction = data.LastAction\n    let LastTime = data.LastTime\n    let Weight = data.Weight\n    let User=data.User\n    let LevelUser=data.LevelUser\n\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            let tempText = ''\n            tempText = tempText + '_id text PRIMARY KEY,'\n            tempText = tempText + 'Code text,'\n            tempText = tempText + 'Name text,'\n            tempText = tempText + 'Quantity int,'\n            tempText = tempText + 'QuantityOrdering int,'\n            tempText = tempText + 'Unit text,'\n            tempText = tempText + 'Row int,'\n            tempText = tempText + 'Column int,'\n            tempText = tempText + 'Comment text,'\n            tempText = tempText + 'LastAction int,'\n            tempText = tempText + 'LastTime Date,'\n            tempText = tempText + 'Weight int,'\n            tempText = tempText + 'TimeCreate Date,'\n\n            let newTempText = tempText.substring(0, tempText.length - 1);\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store(' + newTempText + ')', (err) => {\n                if (err) {\n                    cb(null,err)\n                } else {\n                    let command = `INSERT INTO Store(_id, Code, Name, Quantity, QuantityOrdering, Unit, Row, Column, Comment, LastAction, LastTime, Weight, TimeCreate)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${Code ? Code : '_'}',\n                            '${Name ? Name : '_'}',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${parseInt(Row) ? parseInt(Row) : 0}',\n                            '${parseInt(Column) ? parseInt(Column) : 0}',\n                            '${Comment ? Comment : ''}',\n                            '${parseInt(LastAction) ? parseInt(LastAction) : 0}',\n                            '${LastTime ? LastTime : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${new Date()}'\n                            )`\n                    VariableSystem.LocalDB.run(command, (err) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            cb('success')\n                        }\n                    });\n                }\n\n            })\n        })\n\n        //Save Report\n        VariableSystem.LocalDB.serialize(() => {\n            let tempText = ''\n            tempText = tempText + '_id text PRIMARY KEY,'\n            tempText = tempText + 'id text,'\n            tempText = tempText + 'Code text,'\n            tempText = tempText + 'Name text,'\n            tempText = tempText + 'Quantity int,'\n            tempText = tempText + 'QuantityOrdering int,'\n            tempText = tempText + 'Unit text,'\n            tempText = tempText + 'Row int,'\n            tempText = tempText + 'Column int,'\n            tempText = tempText + 'Comment text,'\n            tempText = tempText + 'LastAction int,'\n            tempText = tempText + 'LastTime Date,'\n            tempText = tempText + 'Weight int,'\n            tempText = tempText + 'TimeCreate Date,'\n            tempText = tempText + 'User text,'\n            tempText = tempText + 'LevelUser text,'\n            tempText = tempText + 'TypeReport text,'\n\n            let newTempText = tempText.substring(0, tempText.length - 1);\n            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    let command = `INSERT INTO Store_Report(_id, id, Code, Name, Quantity, QuantityOrdering, Unit, Row, Column, Comment, LastAction, LastTime, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '_',\n                            '${Code ? Code : '_'}',\n                            '${Name ? Name : '_'}',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${parseInt(Row) ? parseInt(Row) : 0}',\n                            '${parseInt(Column) ? parseInt(Column) : 0}',\n                            '${Comment ? Comment : ''}',\n                            '${parseInt(LastAction) ? parseInt(LastAction) : 0}',\n                            '${LastTime ? LastTime : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${new Date()}',\n                            '${User ? User : '_'}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            'INSERT'\n                            )`\n                    VariableSystem.LocalDB.run(command, (err) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            cb('success')\n                        }\n                    });\n                }\n\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 200,
        "wires": []
    },
    {
        "id": "2616ad0be7d1d92d",
        "type": "inject",
        "z": "23b8e3bff5be828e",
        "name": "Interval_Write_PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2500,
        "wires": [
            [
                "57f190d9eabb5571",
                "1b198682855a2121"
            ]
        ]
    },
    {
        "id": "57f190d9eabb5571",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "PLC",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\n\nif (Variable.ListString[0][17] != Variable.ListString[1][5].replace(/\\s+/g, '')) {\n    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var str = Variable.ListString[0][17]\n\n    var buffer = new Buffer(str, 'utf8');\n    for (let i = 0; i < buffer.length; i++) {\n        if (i < 40) byteArray[i] = buffer[i];\n    }\n\n    const intArray = [];\n    for (let i = 0; i < byteArray.length; i += 2) {\n        const byte1 = byteArray[i];\n        const byte2 = byteArray[i + 1];\n        const combinedInt = (byte2 << 8) | byte1;\n        intArray.push(combinedInt);\n    }\n\n    VariableSystem.COMMUNICATION_PLC_OMRON[1].write('D2100', intArray);\n    msg.payload = 'Write Data'\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "1b198682855a2121",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "Auto Delete",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nif (Variables.ListString[0] && Variables.ListString[1]) {\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 3) {\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                        }\n                                                    })\n                                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n\n    //ThatBai\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 4) {\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                        }\n                                                    })\n                                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "30fae8c91982c25b",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "REPORT",
        "x": 580,
        "y": 1700,
        "wires": [
            [
                "598d96d12929ed04"
            ]
        ]
    },
    {
        "id": "19b19feb1f7edd93",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Prepare_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2660,
        "wires": [
            [
                "ad5017df2b2c4317"
            ]
        ]
    },
    {
        "id": "fefc961a2b28f486",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "name": "GET REPORT PREPARE",
        "url": "/report_prepare_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 2660,
        "wires": [
            [
                "19b19feb1f7edd93"
            ]
        ]
    },
    {
        "id": "ad5017df2b2c4317",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 2660,
        "wires": []
    },
    {
        "id": "72bbd2c494d3df6b",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "MÀN HÌNH",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "abf6c8691cf53226"
            ]
        ]
    },
    {
        "id": "391c958c79e72f93",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Onsemi.db\"\nnode.warn(JSON.stringify(Sql_link))\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nvar global_functions = {};\n\nflow.set(\"global_functions\", global_functions);\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1460,
        "wires": [
            [
                "9b55cb461a6e1560"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "abf6c8691cf53226",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "name_page": "MÀN HÌNH LINE",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Line",
        "scale": "75",
        "header_hide": "0",
        "x": 830,
        "y": 1520,
        "wires": [
            [
                "3e66a548d20af641"
            ]
        ]
    },
    {
        "id": "9b55cb461a6e1560",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "PROCESS CLIENT",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nVariables.ListString[0][11] = '40 Kg'\n\n\nasync function DeleteStorePrepareWarehouse(id) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").DeleteStorePrepareWarehouse(id, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve('Delete Success');\n            }\n        })\n    });\n}\nasync function InsertStorePrepareWarehouse(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\n\n\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.idDevice)) {\n            if (data.idDevice == 'goal') {\n                Variables.ListString[0][5] = data.tag;\n                if (Variables.BitAdjust[0][1]){\n                    VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write('goto ' + data.tag + '\\r\\n')\n                }\n            }\n            if (data.idDevice == 'line' && data.tag == 'confirm') {\n                if (parseInt(data.levelUser) > 0) {\n                    if (Variables.ListString[0][1] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Sản Phẩm' })\n                    } else if (Variables.ListString[0][5] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Vị Trí Giao' })\n                    } else if (parseInt(Variables.WordAdjust[0][1]) == 0) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Nhập Số Lượng' })\n                    } else if ((parseInt(Variables.ListString[0][3])) < parseInt(Variables.WordAdjust[0][1])) {\n                        // } else if ((parseInt(Variables.ListString[0][3]) - parseInt(Variables.ListString[0][6])) < parseInt(Variables.WordAdjust[0][1])) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Số Lượng Vượt Quá Trong Kho' })\n                    } else {\n\n                        var temp_Insert = {\n                            id: Variables.ListString[0][0],\n                            LotId: Variables.ListString[0][1],\n                            Product: Variables.ListString[0][2],\n                            Destination: Variables.ListString[0][5],\n                            Quantity: Variables.WordAdjust[0][1],\n                            Unit: Variables.ListString[0][4],\n                            Remark: Variables.ListString[0][7],\n                            Package: Variables.ListString[0][13],\n                            Weight: parseInt(Variables.ListString[0][12]),\n                            User: data.currentUser,\n                            LevelUser: data.levelUser,\n                            SaveReport: true\n                        }\n\n                        flow.get(\"global_functions\").InsertStoreSelected(temp_Insert, (result, err) => {\n                            if (err) {\n                                node.warn(err)\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                            } else {\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Tạo Yêu Cầu Thành Công' })\n                                Variables.ListString[0][0] = '---'\n                                Variables.ListString[0][1] = '---'\n                                Variables.ListString[0][2] = '---'\n                                Variables.ListString[0][5] = '---'\n                                Variables.ListString[0][3] = '---'\n                                Variables.ListString[0][4] = '---'\n                                Variables.ListString[0][6] = '---'\n                                Variables.ListString[0][7] = '---'\n                                Variables.ListString[0][12] = '---'\n                                Variables.ListString[0][13] = '---'\n                                Variables.WordAdjust[0][1] = 0\n\n                                flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                    if (err) {\n                                        node.warn(err)\n                                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                                    } else {\n                                        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                    }\n                                })\n                            }\n                        })\n                    }\n                } else {\n                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Chưa Đăng Nhập' })\n\n                }\n            }\n            if (data.idDevice == 'warehouse' && data.tag == 'manual_delivery') {\n                try {\n                    VariableSystem.LocalDB.serialize(() => {\n                        VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                            if (err) {\n                                node.warn(err)\n                            } else {\n                                if (rows.length > 0) {\n                                    flow.get(\"global_functions\").UpdateStore({\n                                        _id: Variables.ListString[0][14],\n                                        Status: 'STOCK',\n                                        Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                                    }, (result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                            flow.get(\"global_functions\").GetStore((result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                        _id: Variables.ListString[0][19],\n                                                        User: data.currentUser,\n                                                        LevelUser: data.levelUser,\n                                                    }, (result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                                if (err) {\n                                                                    node.warn(err)\n                                                                } else {\n                                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                                }\n                                                            })\n                                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                        }\n                                                    })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            }\n\n                        })\n                    })\n                } catch (err) {\n                    node.warn(err)\n                }\n            }\n           \n        }\n\n        // if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n        //     let TempArr = data.tag.split('_')\n        //     if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n        //         node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n        //         VariableSystem.COMMUNICATION_MOBILE_ROBOT[1].write(TempArr[1] + '\\r\\n')\n        //     }\n        // }\n\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n\n\n});\nreturn msg;\n\n\n // if (data.idDevice == 'warehouse' && data.tag == 'confirm') {\n            //     flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //         if (err) {\n            //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //         } else {\n\n            //             var promises = result.map(async (item) => {\n            //                 await DeleteStorePrepareWarehouse(item._id);\n            //             });\n            //             Promise.all(promises)\n            //                 .then(() => {\n            //                     node.warn('delete success all')\n            //                     // All async operations are complete\n            //                     var TempSelectWarehouse = global.get(\"TempSelectWarehouse\");\n\n            //                     var promises_insert = TempSelectWarehouse.selectedRowsData.map(async (item) => {\n            //                         await InsertStorePrepareWarehouse(item);\n            //                     });\n            //                     Promise.all(promises_insert)\n            //                         .then(() => {\n            //                             node.warn('ok get new table');\n            //                             flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //                                 if (err) {\n            //                                     VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                                 } else {\n            //                                     node.warn(result);\n            //                                     VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Prepare_Warehouse', result)\n            //                                 }\n            //                             })\n            //                         })\n            //                         .catch((error) => {\n            //                             // Handle any errors that occurred during async operations\n            //                             console.error(error);\n            //                         });\n\n            //                     // TempSelectWarehouse.selectedRowsData.forEach(function (element) {\n            //                     //     if (element.id !== undefined) {\n            //                     //         // flow.get(\"global_functions\").DeleteStoreSelected(element._id, (result, err) => {\n            //                     //         //     if (err) {\n            //                     //         //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //         //     }\n            //                     //         // })\n            //                     //         flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            //                     //             if (err) {\n            //                     //                 VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //             } else {\n            //                     //                 node.warn('insert data ');\n            //                     //             }\n            //                     //         })\n            //                     //     }\n            //                     // });\n\n            //                 })\n            //                 .catch((error) => {\n            //                     // Handle any errors that occurred during async operations\n            //                     console.error(error);\n            //                 });\n\n            //             // result.forEach(function (element) {\n            //             //     flow.get(\"global_functions\").DeleteStorePrepareWarehouse(element._id, (result, err) => {\n            //             //         if (err) {\n            //             //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //             //         }else{\n            //             //             node.warn(element._id);\n            //             //         }\n            //             //     })\n            //             // });\n            //             // node.warn('finish for');\n\n            //         }\n            //     })\n            //     node.warn('finish delete');\n\n            //     // flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n            //     //     if (err) {\n            //     //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //     //     } else {\n            //     //         VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            //     //     }\n            //     // })\n            // }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "3e66a548d20af641",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "name_page": "MÀN HÌNH KHO",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Kho",
        "scale": "75",
        "header_hide": "0",
        "x": 1090,
        "y": 1520,
        "wires": [
            [
                "8225ac06fcb00c1a"
            ]
        ]
    },
    {
        "id": "8c9305566e9425fc",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "STORE MANAGE",
        "x": 610,
        "y": 1660,
        "wires": [
            [
                "fd4e7c54a5ed5564"
            ]
        ]
    },
    {
        "id": "fd4e7c54a5ed5564",
        "type": "Config_Web Page_Call",
        "z": "23b8e3bff5be828e",
        "name_page": "STORE",
        "url": "/scada/StoreProjectSanofi",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "onsemi",
        "x": 860,
        "y": 1660,
        "wires": [
            [
                "30fae8c91982c25b"
            ]
        ]
    },
    {
        "id": "d043a12f7a6de5c3",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "USER MANAGER",
        "x": 610,
        "y": 1840,
        "wires": [
            [
                "383792b2556203d6"
            ]
        ]
    },
    {
        "id": "383792b2556203d6",
        "type": "Config_Web Page_Call",
        "z": "23b8e3bff5be828e",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 860,
        "y": 1840,
        "wires": [
            [
                "305afe98e3b75a7a"
            ]
        ]
    },
    {
        "id": "305afe98e3b75a7a",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "MEMONIC TAG SYSTEM",
        "x": 630,
        "y": 1900,
        "wires": [
            [
                "d66f2a6a0ffb4cf1"
            ]
        ]
    },
    {
        "id": "d66f2a6a0ffb4cf1",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 900,
        "y": 1900,
        "wires": [
            [
                "0c49913f28b237d5"
            ]
        ]
    },
    {
        "id": "0c49913f28b237d5",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - BitAdjust",
        "indexPLC": "1",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1200,
        "y": 1900,
        "wires": [
            [
                "bd0a5edbca34f30d"
            ]
        ]
    },
    {
        "id": "bd0a5edbca34f30d",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - WordDisplay",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 910,
        "y": 1940,
        "wires": [
            [
                "d3a30a89f5f1488b"
            ]
        ]
    },
    {
        "id": "d3a30a89f5f1488b",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - WordAdjust",
        "indexPLC": "2",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1210,
        "y": 1940,
        "wires": [
            [
                "12064808db55d7d1"
            ]
        ]
    },
    {
        "id": "12064808db55d7d1",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - DWordDisplay",
        "indexPLC": "2",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 920,
        "y": 1980,
        "wires": [
            [
                "e7ef9a1e4f748c8d"
            ]
        ]
    },
    {
        "id": "e7ef9a1e4f748c8d",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - DWordAdjust",
        "indexPLC": "2",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1210,
        "y": 1980,
        "wires": [
            [
                "244e84b4903d7e27"
            ]
        ]
    },
    {
        "id": "244e84b4903d7e27",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "NJ - Word_Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 900,
        "y": 2020,
        "wires": [
            [
                "c7dcb7ef0cc71756"
            ]
        ]
    },
    {
        "id": "c7dcb7ef0cc71756",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - String",
        "indexPLC": "2",
        "word_start": "2000",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 1190,
        "y": 2020,
        "wires": [
            [
                "83240ddac4497a82"
            ]
        ]
    },
    {
        "id": "2491218058f1e402",
        "type": "Config_Web Memonic",
        "z": "23b8e3bff5be828e",
        "name_page": "System - MOBILE - BITADJUST",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "100",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 940,
        "y": 2080,
        "wires": [
            [
                "940543cbfaebf661"
            ]
        ]
    },
    {
        "id": "83240ddac4497a82",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "MEMONIC MOBILE",
        "x": 620,
        "y": 2080,
        "wires": [
            [
                "2491218058f1e402"
            ]
        ]
    },
    {
        "id": "24ec3606ec3308ec",
        "type": "Config_Web Page_Report",
        "z": "23b8e3bff5be828e",
        "name_page": "STORE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_store",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Location\",\"capture\":\"Location\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "d043a12f7a6de5c3"
            ]
        ]
    },
    {
        "id": "6a3ac23138942ba0",
        "type": "Config_Web Page_Report",
        "z": "23b8e3bff5be828e",
        "name_page": "DELIVERY",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_delivery_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Location\",         \"capture\": \"Location\",         \"width\": \"auto\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 1120,
        "y": 1740,
        "wires": [
            [
                "24ec3606ec3308ec"
            ]
        ]
    },
    {
        "id": "598d96d12929ed04",
        "type": "Config_Web Page_Report",
        "z": "23b8e3bff5be828e",
        "name_page": "REQUEST LINES",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_select_line",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 820,
        "y": 1700,
        "wires": [
            [
                "54d6e06ea4bc7e98"
            ]
        ]
    },
    {
        "id": "54d6e06ea4bc7e98",
        "type": "Config_Web Page_Report",
        "z": "23b8e3bff5be828e",
        "name_page": "PREPARE WARESHOUSE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_prepare_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Destination\",         \"capture\": \"Destination\",         \"width\": \"100\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 850,
        "y": 1740,
        "wires": [
            [
                "6a3ac23138942ba0"
            ]
        ]
    },
    {
        "id": "72dad6e84cbc9837",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "name_page": "MÀN HÌNH LINE - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Line",
        "scale": "75",
        "header_hide": "1",
        "x": 870,
        "y": 1580,
        "wires": [
            [
                "1135bb1d18b7f510"
            ]
        ]
    },
    {
        "id": "1135bb1d18b7f510",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "name_page": "MÀN HÌNH KHO - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Kho",
        "scale": "75",
        "header_hide": "1",
        "x": 1150,
        "y": 1580,
        "wires": [
            [
                "8c9305566e9425fc"
            ]
        ]
    },
    {
        "id": "8225ac06fcb00c1a",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "title": "FULL SCREEN",
        "x": 600,
        "y": 1580,
        "wires": [
            [
                "72dad6e84cbc9837"
            ]
        ]
    },
    {
        "id": "b3b0af2450ca3ad3",
        "type": "inject",
        "z": "23b8e3bff5be828e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2820,
        "wires": [
            [
                "f18e4515f1623f57"
            ]
        ]
    },
    {
        "id": "f18e4515f1623f57",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "name": "function 1",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nnode.warn(Variable.ListString)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "785f1656f370845b",
        "type": "inject",
        "z": "23b8e3bff5be828e",
        "g": "cc8513dc89331754",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "c2414429f4310a0f"
            ]
        ]
    },
    {
        "id": "c2414429f4310a0f",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "cc8513dc89331754",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 60,
        "wires": [
            [
                "d05844df926a4a22"
            ]
        ]
    },
    {
        "id": "d05844df926a4a22",
        "type": "debug",
        "z": "23b8e3bff5be828e",
        "g": "cc8513dc89331754",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 60,
        "wires": []
    },
    {
        "id": "97fa50c5ad09e681",
        "type": "inject",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1380,
        "wires": [
            [
                "d23b0e7b3cf75dc0",
                "46205ebb911caf78"
            ]
        ]
    },
    {
        "id": "d23b0e7b3cf75dc0",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/MobileRobot_ATC.db\"\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nvar global_functions = {};\nflow.set(\"global_functions\", global_functions);\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1380,
        "wires": [
            [
                "4bbfa1a3810ba03b",
                "389b0a27c2819156"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "46205ebb911caf78",
        "type": "Config_Web Begin",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "x": 400,
        "y": 1480,
        "wires": [
            [
                "56b80b9803fa622c"
            ]
        ]
    },
    {
        "id": "940543cbfaebf661",
        "type": "Config_Web End",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "port": "8000",
        "x": 390,
        "y": 2400,
        "wires": [
            [
                "8fceb7c5de8f5b00",
                "d12d5d5c94de3dc3"
            ]
        ]
    },
    {
        "id": "f6c5519a79fa78b1",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name_page": "ATC",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "1010",
        "backgroundColor": "457b9d",
        "backgroundImage": "NoThing",
        "idPage": "Scada",
        "scale": "67",
        "header_hide": "0",
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "63c4ea18e56e4940"
            ]
        ]
    },
    {
        "id": "56b80b9803fa622c",
        "type": "Config_Web Title",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "title": "SCADA PAGE",
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "f6c5519a79fa78b1"
            ]
        ]
    },
    {
        "id": "4bbfa1a3810ba03b",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar Variables = global.get(\"Variable\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nVariables.ListString[0][11] = '40 Kg'\n\nasync function DeleteStorePrepareWarehouse(id) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").DeleteStorePrepareWarehouse(id, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve('Delete Success');\n            }\n        })\n    });\n}\nasync function InsertStorePrepareWarehouse(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.idDevice)) {\n            let TempArr = data.tag.split('_')\n            if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n                node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n                VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write(TempArr[1] + '\\r\\n')\n            }\n\n\n            if (data.idDevice == 'goal') {\n                Variables.ListString[0][5] = data.tag;\n                if (Variables.BitAdjust[0][1]) {\n                    VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write('goto ' + data.tag + '\\r\\n')\n                }\n            }\n            if (data.idDevice == 'line' && data.tag == 'confirm') {\n                if (parseInt(data.levelUser) > 0) {\n                    if (Variables.ListString[0][1] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Sản Phẩm' })\n                    } else if (Variables.ListString[0][5] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Vị Trí Giao' })\n                    } else if (parseInt(Variables.WordAdjust[0][1]) == 0) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Nhập Số Lượng' })\n                    } else if ((parseInt(Variables.ListString[0][3])) < parseInt(Variables.WordAdjust[0][1])) {\n                        // } else if ((parseInt(Variables.ListString[0][3]) - parseInt(Variables.ListString[0][6])) < parseInt(Variables.WordAdjust[0][1])) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Số Lượng Vượt Quá Trong Kho' })\n                    } else {\n\n                        var temp_Insert = {\n                            id: Variables.ListString[0][0],\n                            LotId: Variables.ListString[0][1],\n                            Product: Variables.ListString[0][2],\n                            Destination: Variables.ListString[0][5],\n                            Quantity: Variables.WordAdjust[0][1],\n                            Unit: Variables.ListString[0][4],\n                            Remark: Variables.ListString[0][7],\n                            Package: Variables.ListString[0][13],\n                            Weight: parseInt(Variables.ListString[0][12]),\n                            User: data.currentUser,\n                            LevelUser: data.levelUser,\n                            SaveReport: true\n                        }\n\n                        flow.get(\"global_functions\").InsertStoreSelected(temp_Insert, (result, err) => {\n                            if (err) {\n                                node.warn(err)\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                            } else {\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Tạo Yêu Cầu Thành Công' })\n                                Variables.ListString[0][0] = '---'\n                                Variables.ListString[0][1] = '---'\n                                Variables.ListString[0][2] = '---'\n                                Variables.ListString[0][5] = '---'\n                                Variables.ListString[0][3] = '---'\n                                Variables.ListString[0][4] = '---'\n                                Variables.ListString[0][6] = '---'\n                                Variables.ListString[0][7] = '---'\n                                Variables.ListString[0][12] = '---'\n                                Variables.ListString[0][13] = '---'\n                                Variables.WordAdjust[0][1] = 0\n\n                                flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                    if (err) {\n                                        node.warn(err)\n                                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                                    } else {\n                                        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                    }\n                                })\n                            }\n                        })\n                    }\n                } else {\n                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Chưa Đăng Nhập' })\n\n                }\n            }\n            if (data.idDevice == 'warehouse' && data.tag == 'manual_delivery') {\n                try {\n                    VariableSystem.LocalDB.serialize(() => {\n                        VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                            if (err) {\n                                node.warn(err)\n                            } else {\n                                if (rows.length > 0) {\n                                    flow.get(\"global_functions\").UpdateStore({\n                                        _id: Variables.ListString[0][14],\n                                        Status: 'STOCK',\n                                        Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                                    }, (result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                            flow.get(\"global_functions\").GetStore((result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                        _id: Variables.ListString[0][19],\n                                                        User: data.currentUser,\n                                                        LevelUser: data.levelUser,\n                                                    }, (result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                                if (err) {\n                                                                    node.warn(err)\n                                                                } else {\n                                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                                }\n                                                            })\n                                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                        }\n                                                    })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            }\n\n                        })\n                    })\n                } catch (err) {\n                    node.warn(err)\n                }\n            }\n\n        }\n\n        // if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n        //     let TempArr = data.tag.split('_')\n        //     if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n        //         node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n        //         VariableSystem.COMMUNICATION_MOBILE_ROBOT[1].write(TempArr[1] + '\\r\\n')\n        //     }\n        // }\n\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "c2798da9c47791bb"
            ]
        ]
    },
    {
        "id": "6cbf718f847ef3a2",
        "type": "Omron Mobile Robot",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "",
        "host": "192.168.1.100",
        "password": "omron",
        "port": "7171",
        "indexPLC": "2",
        "x": 780,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "63c4ea18e56e4940",
        "type": "Config_Web Page",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name_page": "ConfigSystem",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "1010",
        "backgroundColor": "457b9d",
        "backgroundImage": "abc",
        "idPage": "ConfigSystem",
        "scale": "67",
        "header_hide": "0",
        "x": 1000,
        "y": 1480,
        "wires": [
            [
                "72bbd2c494d3df6b"
            ]
        ]
    },
    {
        "id": "c2798da9c47791bb",
        "type": "plc_omron",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "test",
        "host": "192.168.250.1",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "2500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "0",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 940,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "389b0a27c2819156",
        "type": "link out",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "30ff385f153b2524",
            "a43b225f45d0a4b1",
            "2c0fefb433cfb392",
            "289dc66648f497bd",
            "0892832098404a0f"
        ],
        "x": 655,
        "y": 1380,
        "wires": []
    },
    {
        "id": "d8226213f97f584d",
        "type": "inject",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "46205ebb911caf78"
            ]
        ]
    },
    {
        "id": "5d50c0d8461992d1",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "API DELETE",
        "url": "/onsemi/delete",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "46585e10676f6bfe"
            ]
        ]
    },
    {
        "id": "46585e10676f6bfe",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "eaf9b53fdcbc5861"
            ]
        ]
    },
    {
        "id": "74e55d48bab6967a",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "API UPDATE",
        "url": "/onsemi/update",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "9fa5852447d6efd5"
            ]
        ]
    },
    {
        "id": "9fa5852447d6efd5",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Update DB",
        "func": "flow.get(\"global_functions\").UpdateStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            [
                "ea8448baf509ab1e"
            ]
        ]
    },
    {
        "id": "2df228c84a82bb56",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "API INSERT",
        "url": "/onsemi/insert",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "66e6d2f5bff7dc17"
            ]
        ]
    },
    {
        "id": "e65d60e7e075b791",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "API GET DATA",
        "url": "/onsemi/getdata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "d9a82521d9648b0f"
            ]
        ]
    },
    {
        "id": "d9a82521d9648b0f",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStore((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "c79fcb12161c52b8"
            ]
        ]
    },
    {
        "id": "02237247e5ac9c2a",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "66e6d2f5bff7dc17",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStore(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "e61a4eb1033cf61c"
            ]
        ]
    },
    {
        "id": "a8650f5f39367e18",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "SocketOI",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.emit('UpdateOnsemi', msg.payload)\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            [
                "02237247e5ac9c2a"
            ]
        ]
    },
    {
        "id": "c79fcb12161c52b8",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 500,
        "y": 160,
        "wires": []
    },
    {
        "id": "5fd02bf4fa95b41f",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStore((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "a8650f5f39367e18"
            ]
        ]
    },
    {
        "id": "82886f2120984a6f",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "API IMPORT",
        "url": "/onsemi/import",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "a91de1923d6c6165"
            ]
        ]
    },
    {
        "id": "a91de1923d6c6165",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "46688d17445956e0",
        "name": "Import DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar counterErr = 0\n\nasync function InsertStoreAsync(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStore(element, (result, err) => {\n            if (err) {\n                counterErr = counterErr + 1;\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\nvar promises = msg.payload.map(async (item) => {\n    await InsertStoreAsync(item);\n});\nPromise.all(promises)\n    .then(() => {\n        if (counterErr > 0) {\n            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Have ' + counterErr + \"lines cannot import\" })\n        }\n        node.send(msg)\n    })",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "a4a4ab9c72f71825"
            ]
        ]
    },
    {
        "id": "f7bd10b6af238bfb",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "749622da01263839",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 500,
        "y": 420,
        "wires": []
    },
    {
        "id": "f953568f7474e104",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "749622da01263839",
        "name": "Select Row",
        "func": "var Variables = global.get(\"Variable\");\n\nVariables.ListString[0][0] = msg.payload.id;\nVariables.ListString[0][1] = msg.payload.LotId;\nVariables.ListString[0][2] = msg.payload.Product;\nVariables.ListString[0][3] = msg.payload.Quantity;\n// Variables.ListString[0][4] = msg.payload.Unit;\n// Variables.ListString[0][6] = msg.payload.QuantityOrdering;\n// Variables.ListString[0][12] = msg.payload.Weight;\nVariables.ListString[0][13] = msg.payload.Package;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "f7bd10b6af238bfb"
            ]
        ]
    },
    {
        "id": "1ccce117771c9577",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "749622da01263839",
        "name": "API SELECT ROW",
        "url": "/onsemi/select",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "f953568f7474e104"
            ]
        ]
    },
    {
        "id": "4998fdc309a01bf6",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "API SELECT UPDATE",
        "url": "/onsemi/select_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "0dbbd49d8b980d22"
            ]
        ]
    },
    {
        "id": "0dbbd49d8b980d22",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Insert Prepare Warehouse",
        "func": "var Variables = global.get(\"Variable\");\nflow.get(\"global_functions\").InsertStorePrepareWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 740,
        "wires": [
            [
                "0d031bfcf2006181",
                "91d609cf113eddf2"
            ]
        ]
    },
    {
        "id": "c3c1672020859e9d",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 760,
        "wires": []
    },
    {
        "id": "d892f52b1c3265d4",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Get Temp Select Warehouse Check Weight",
        "func": "var Variables = global.get(\"Variable\");\n\nglobal.set('TempSelectWarehouse',msg.payload)\n\nlet currentWeight=0\nmsg.payload.selectedRowsData.forEach(function(element) {\n    currentWeight = currentWeight+parseInt(element.Weight)*parseInt(element.Quantity)\n});\n\nVariables.ListString[0][10] = parseFloat(currentWeight)/1000 +' kg';\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "0d031bfcf2006181",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Get DB Prepare",
        "func": "flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.warn(err);\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 740,
        "wires": [
            [
                "6a063207e2759c85"
            ]
        ]
    },
    {
        "id": "6a063207e2759c85",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "SocketOI Prepare",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Prepare_Warehouse', msg.payload)\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 740,
        "wires": [
            [
                "9ba95ccded4c2d69"
            ]
        ]
    },
    {
        "id": "a3ebe50a60b351c7",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "SocketOI Selected",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', msg.payload)\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 780,
        "wires": [
            [
                "9ba95ccded4c2d69"
            ]
        ]
    },
    {
        "id": "551bfe7691d9436d",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Get DB Selected",
        "func": "flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 780,
        "wires": [
            [
                "a3ebe50a60b351c7"
            ]
        ]
    },
    {
        "id": "91d609cf113eddf2",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "Delete DB Selected",
        "func": "flow.get(\"global_functions\").DeleteStoreSelected(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 780,
        "wires": [
            [
                "551bfe7691d9436d"
            ]
        ]
    },
    {
        "id": "9ba95ccded4c2d69",
        "type": "join",
        "z": "23b8e3bff5be828e",
        "g": "48b8b4f0ce578c6e",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "c3c1672020859e9d"
            ]
        ]
    },
    {
        "id": "afe82b308afbb908",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "API DELETE",
        "url": "/onsemi/delete_prepare_warehouse",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "da22b64db09b9cae"
            ]
        ]
    },
    {
        "id": "da22b64db09b9cae",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStorePrepareWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 920,
        "wires": [
            [
                "59cd2aa513d28f82"
            ]
        ]
    },
    {
        "id": "eda4597ec3f9e859",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "API GET DATA",
        "url": "/onsemi/getdata_prepare_warehouse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "756496b4080ab274"
            ]
        ]
    },
    {
        "id": "756496b4080ab274",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 880,
        "wires": [
            [
                "2dd662f8a7818429"
            ]
        ]
    },
    {
        "id": "bd898fa67a842f21",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 920,
        "wires": []
    },
    {
        "id": "d67d1dcf7702f7b2",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "SocketOI",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Prepare_Warehouse', msg.payload)\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 920,
        "wires": [
            [
                "bd898fa67a842f21"
            ]
        ]
    },
    {
        "id": "2dd662f8a7818429",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 880,
        "wires": []
    },
    {
        "id": "59cd2aa513d28f82",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "ec79efe71fa89d6b",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 920,
        "wires": [
            [
                "d67d1dcf7702f7b2"
            ]
        ]
    },
    {
        "id": "f46d13cb8fef7659",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "API DELETE",
        "url": "/onsemi/delete_delivery_warehouse",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "100f8033bf74019e"
            ]
        ]
    },
    {
        "id": "100f8033bf74019e",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "df422be2b56ae267"
            ]
        ]
    },
    {
        "id": "77471e7c443acca7",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "API GET DATA",
        "url": "/onsemi/getdata_delivery_warehouse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "7306f8e6182d113d"
            ]
        ]
    },
    {
        "id": "7306f8e6182d113d",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "1bb52bb6b314ded8"
            ]
        ]
    },
    {
        "id": "831fa4c7394588ba",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7130352bb3e34383",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "SocketOI",
        "func": "if (msg.payload == 'length_result_more_0') {\n    node.send(msg);\n} else {\n    var VariableSystem = global.get(\"VariableSystem\");\n    VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', msg.payload)\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1120,
        "wires": [
            [
                "831fa4c7394588ba"
            ]
        ]
    },
    {
        "id": "1bb52bb6b314ded8",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 1060,
        "wires": []
    },
    {
        "id": "df422be2b56ae267",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Get DB",
        "func": "if (msg.payload =='length_result_more_0'){\n    node.send(msg);\n}else{\n    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n        if (err) {\n            msg.payload = {\n                result: \"error\",\n                data: {},\n                message: err\n            };\n            node.send(msg);\n        } else {\n            msg.payload = result;\n            node.send(msg);\n        }\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "7130352bb3e34383"
            ]
        ]
    },
    {
        "id": "ba775289b7087b2b",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "API INSERT",
        "url": "/onsemi/insert_delivery_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "e0f95d5dccb03a02"
            ]
        ]
    },
    {
        "id": "e0f95d5dccb03a02",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "eb31bb409bdd7df8",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStoreDeliveryWarehouse(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "df422be2b56ae267"
            ]
        ]
    },
    {
        "id": "b80b1fee37623c3b",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "API SELECT DELETE",
        "url": "/onsemi/delete_select",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "385214d912816e0e"
            ]
        ]
    },
    {
        "id": "385214d912816e0e",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreSelected(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "1dc7a496337df51d"
            ]
        ]
    },
    {
        "id": "dccdf2ef32e1ec07",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "API SELECT GET DATA",
        "url": "/onsemi/getdata_select",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "cd28ac460fa4f904"
            ]
        ]
    },
    {
        "id": "cd28ac460fa4f904",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "a8c399039c985455"
            ]
        ]
    },
    {
        "id": "301959c0f3027c3d",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 560,
        "wires": []
    },
    {
        "id": "fdd86932e410c591",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "SocketOI",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', msg.payload)\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 560,
        "wires": [
            [
                "301959c0f3027c3d"
            ]
        ]
    },
    {
        "id": "a8c399039c985455",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 660,
        "y": 520,
        "wires": []
    },
    {
        "id": "1dc7a496337df51d",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "edabee745831be2f",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 560,
        "wires": [
            [
                "fdd86932e410c591"
            ]
        ]
    },
    {
        "id": "d63db6bb9a47c493",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2600,
        "wires": [
            [
                "da779c957c481ac2"
            ]
        ]
    },
    {
        "id": "2f416446fcfe811a",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "GET REPORT STORE",
        "url": "/report_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2600,
        "wires": [
            [
                "d63db6bb9a47c493"
            ]
        ]
    },
    {
        "id": "da779c957c481ac2",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 2600,
        "wires": []
    },
    {
        "id": "b1a93306622cef34",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "GET REPORT DELIVERY",
        "url": "/report_delivery_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 2700,
        "wires": [
            [
                "50de66d014ae9970"
            ]
        ]
    },
    {
        "id": "50de66d014ae9970",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Delivery_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2700,
        "wires": [
            [
                "3acea174a416d611"
            ]
        ]
    },
    {
        "id": "3acea174a416d611",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 2700,
        "wires": []
    },
    {
        "id": "a49ea45e42bf9274",
        "type": "http in",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "GET REPORT SELECT",
        "url": "/report_select_line/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2740,
        "wires": [
            [
                "8cc5153d0a2e67df"
            ]
        ]
    },
    {
        "id": "8cc5153d0a2e67df",
        "type": "function",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Select_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2740,
        "wires": [
            [
                "7efaf0e61a96f923"
            ]
        ]
    },
    {
        "id": "7efaf0e61a96f923",
        "type": "http response",
        "z": "23b8e3bff5be828e",
        "g": "2fd3886a6e1bdee1",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 2740,
        "wires": []
    },
    {
        "id": "8fceb7c5de8f5b00",
        "type": "file",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "d12d5d5c94de3dc3",
        "type": "file",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "ee2d2de592154a6a",
        "type": "plc_omron",
        "z": "23b8e3bff5be828e",
        "g": "1fa6028c4a3f161f",
        "name": "Vibration",
        "host": "192.168.1.10",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "2500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 960,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "afd31322ace0399d",
        "type": "inject",
        "z": "47abba529caab914",
        "g": "df014b52f111839a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 60,
        "wires": [
            [
                "3e833cc9a558a911"
            ]
        ]
    },
    {
        "id": "3e833cc9a558a911",
        "type": "function",
        "z": "47abba529caab914",
        "g": "df014b52f111839a",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "ba55d9e7e5330f1f"
            ]
        ]
    },
    {
        "id": "ba55d9e7e5330f1f",
        "type": "debug",
        "z": "47abba529caab914",
        "g": "df014b52f111839a",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "549b28dfb773b9c4",
        "type": "function",
        "z": "47abba529caab914",
        "g": "df014b52f111839a",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2bcedc01e0fddbdd",
        "type": "inject",
        "z": "47abba529caab914",
        "g": "df014b52f111839a",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 300,
        "y": 100,
        "wires": [
            [
                "549b28dfb773b9c4"
            ]
        ]
    },
    {
        "id": "ea6cc81fb7cbede1",
        "type": "plc_omron",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "PLC OMRON STAMPING MACHINE 1",
        "host": "192.168.2.190",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "80",
        "PLC_WordStartBitDisplay": "80",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "900",
        "PLC_WordStartWordAdjust": "1000",
        "PLC_LengthOfWordWordAdjust": "2",
        "PLC_WordStartDWordDisplay": "1000",
        "PLC_LengthOfWordDWordDisplay": "0",
        "PLC_WordStartDWordAdjust": "1000",
        "PLC_LengthOfWordDWordAdjust": "0",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6d9ae91acc83d195",
        "type": "inject",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "7f303d9dc2a2d3dc",
                "6697041fae8f824a"
            ]
        ]
    },
    {
        "id": "7f303d9dc2a2d3dc",
        "type": "function",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/KimNamThinh_Report.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "9631c1af9175002a"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "110aeadb6a69ac8c",
        "type": "function",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "PROCESS",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar ProjectVariables = global.get(\"ProjectVariable\");\nvar ProjectFunction = global.get(\"ProjectFunction\");\nvar count = 0\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nvar myInitial = setInterval(() => {\n    let a = new Date()\n    Variables.ListString[1][0] = ((a.getHours() < 10 ? \"0\" : '') + a.getHours() + ':' + (a.getMinutes() < 10 ? \"0\" : '') + a.getMinutes() + ':' + (a.getSeconds() < 10 ? \"0\" : '') + a.getSeconds())\n\n    count = count + 1\n    if (count > 99) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}, 1000);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Have Client Connected \" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n        socket.disconnect()\n    });\n    socket.on('initial', function () {\n\n    })\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data)\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'TestReport') {\n                ProjectFunction.ReportKNT();\n            }\n        }\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\n            }\n        }\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[1][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n// console.log('CLOSE NODE RED')\nvar VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.removeAllListeners()",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "6697041fae8f824a",
        "type": "Config_Web Begin",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "dc908b8bff0bade8"
            ]
        ]
    },
    {
        "id": "dc908b8bff0bade8",
        "type": "Config_Web Title",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "title": "SCADA PAGE",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "7859e039859b0f58"
            ]
        ]
    },
    {
        "id": "7859e039859b0f58",
        "type": "Config_Web Page",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name_page": "Giao Diện Điều Khiển",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1250",
        "height": "650",
        "backgroundColor": "4574b9",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "100",
        "x": 660,
        "y": 400,
        "wires": [
            [
                "fa7068b6bff907ae"
            ]
        ]
    },
    {
        "id": "fa7068b6bff907ae",
        "type": "Config_Web Title",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "title": "BÁO CÁO",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "f89ff9f30f48d7e4"
            ]
        ]
    },
    {
        "id": "f89ff9f30f48d7e4",
        "type": "Config_Web Page_Call",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name_page": "Báo Cáo Chi Tiết",
        "url": "/scada/ReportProjectKimNamThinh",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 650,
        "y": 460,
        "wires": [
            [
                "22dd6eb61db143ed"
            ]
        ]
    },
    {
        "id": "22dd6eb61db143ed",
        "type": "Config_Web Title",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "title": "USER MANAGER",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "af0e9b7fc1b539c0"
            ]
        ]
    },
    {
        "id": "af0e9b7fc1b539c0",
        "type": "Config_Web Page_Call",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 680,
        "y": 520,
        "wires": [
            [
                "9b42654ef6790b29"
            ]
        ]
    },
    {
        "id": "9b42654ef6790b29",
        "type": "Config_Web End",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "port": "8000",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "68118de93bf70bba",
                "dceaaae3282065e4"
            ]
        ]
    },
    {
        "id": "dceaaae3282065e4",
        "type": "file",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 720,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "68118de93bf70bba",
        "type": "file",
        "z": "47abba529caab914",
        "g": "a450a02c836c3635",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "67f7a338d82bc089",
        "type": "inject",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "f7690a19b554fbbe",
                "0d25c3e5ed96f52b"
            ]
        ]
    },
    {
        "id": "f7690a19b554fbbe",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name": "Config Project",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/ROS.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "2840967bb76950a0"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "0d25c3e5ed96f52b",
        "type": "Config_Web Begin",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "b1c90685a37c1727"
            ]
        ]
    },
    {
        "id": "b1c90685a37c1727",
        "type": "Config_Web Title",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "title": "SCADA PAGE",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "618181a769f8692e"
            ]
        ]
    },
    {
        "id": "618181a769f8692e",
        "type": "Config_Web Page",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name_page": "SCADA",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1200",
        "height": "700",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "99df56687aa8d43a"
            ]
        ]
    },
    {
        "id": "99df56687aa8d43a",
        "type": "Config_Web End",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "port": "8000",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "d79e247f7350c63f",
                "f5e664e70e4f268d"
            ]
        ]
    },
    {
        "id": "2840967bb76950a0",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar roslib = global.get(\"roslib\");\n\nVariable.Percent[1] = new Array(20).fill(0);\nVariable.BitAdjust[1] = new Array(20).fill(0);\nVariable.BitDisplay[1] = new Array(20).fill(0);\nVariable.WordAdjust[1] = new Array(20).fill(0);\nVariable.WordDisplay[1] = new Array(20).fill(0);\nVariable.DWordAdjust[1] = new Array(20).fill(0);\nVariable.DWordDisplay[1] = new Array(20).fill(0);\nVariable.ListString[1] = new Array(20).fill('---');\nVariable.TextField[1] = new Array(20).fill('---');\nVariable.TextFieldInput[1] = new Array(10).fill(0);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    node.warn(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variable.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\n            }\n        }\n    });\n    socket.on(\"Joystick-send-data\", function (data) {\n        if (data.NameCommand === 'JoystickForce' && !isNaN(data.tag)) {\n\n            if (data.tag !== '') {\n                if (data.type === \"move\") {\n                    var angle = -Number(Number(data.x*0.5).toFixed(2))\n                    var up_down = Number(Number(data.y.toFixed(2))*1)\n                    var twist = new roslib.Message({\n                        linear: {\n                            x: up_down,\n                            y: 0,\n                            z: 0\n                        },\n                        angular: {\n                            x: 0,\n                            y: 0,\n                            z: angle\n                        }\n                    });\n                }\n                if (data.type === \"stop\") {\n                    var twist = new roslib.Message({\n                        linear: {\n                            x: 0,\n                            y: 0,\n                            z: 0\n                        },\n                        angular: {\n                            x: 0,\n                            y: 0,\n                            z: 0\n                        }\n                    });\n                }\n\n                msg.payload = twist\n                node.send(msg);\n            }\n        }\n    });\n})\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "var VariableSystem = global.get(\"VariableSystem\");\nObject.keys(VariableSystem.IO.sockets.sockets).forEach(function (s) {\n    VariableSystem.IO.sockets.sockets[s].disconnect(true);\n});\nObject.values(VariableSystem.IO.sockets.sockets).forEach(socket => {\n    node.warn(socket.id);\n    socket.disconnect(true);\n});",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d79e247f7350c63f",
        "type": "file",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6eb33e01f4113560",
        "type": "inject",
        "z": "66f751f83d3177e2",
        "g": "d37655926d069fe5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "d99a57302e06a1e2"
            ]
        ]
    },
    {
        "id": "d99a57302e06a1e2",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "d37655926d069fe5",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "856aefc157b41b14"
            ]
        ]
    },
    {
        "id": "856aefc157b41b14",
        "type": "debug",
        "z": "66f751f83d3177e2",
        "g": "d37655926d069fe5",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 80,
        "wires": []
    },
    {
        "id": "d1455fc922ab3cef",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "d37655926d069fe5",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "80b42482218ec95d",
        "type": "inject",
        "z": "66f751f83d3177e2",
        "g": "d37655926d069fe5",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "d1455fc922ab3cef"
            ]
        ]
    },
    {
        "id": "17a928293b14e8af",
        "type": "comment",
        "z": "66f751f83d3177e2",
        "g": "7aaed6807de5b587",
        "name": "Publish",
        "info": "",
        "x": 130,
        "y": 840,
        "wires": []
    },
    {
        "id": "c1b80b24fc3cc949",
        "type": "comment",
        "z": "66f751f83d3177e2",
        "g": "1d2c2333252922aa",
        "name": "Service Server",
        "info": "",
        "x": 150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7d95f294c481dae9",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "1d2c2333252922aa",
        "name": "",
        "func": "\nnode.warn('Incoming request: ' + msg.payload.args.data);\n\nconst response = {\n success: true,\n message: 'node_red_response'\n};\n\nmsg.payload.msg = response;\nmsg.payload.id = msg.payload.id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "fb9a24bc265ee7c1",
        "type": "comment",
        "z": "66f751f83d3177e2",
        "g": "ca45f46128d7d755",
        "name": "Service Client",
        "info": "",
        "x": 140,
        "y": 1220,
        "wires": []
    },
    {
        "id": "3fd8f204cbdff060",
        "type": "inject",
        "z": "66f751f83d3177e2",
        "g": "ca45f46128d7d755",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "node-red",
        "payloadType": "str",
        "x": 160,
        "y": 1260,
        "wires": [
            [
                "4139a6f795a6307e"
            ]
        ]
    },
    {
        "id": "4139a6f795a6307e",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "ca45f46128d7d755",
        "name": "",
        "func": "msg.payload.data = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "7e931fa7a9a538b6",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "ca45f46128d7d755",
        "name": "",
        "func": "node.warn(msg.payload.message);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "8f72b5cea0564397",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "5478c0916880e91b",
        "name": "",
        "func": "let temp1 = msg.payload.topics\nlet myListString1 = \"\";\nif (Array.isArray(temp1)) {\n    for (let i = 0; i < temp1.length; i++) {\n        myListString1 += i + ': ' + temp1[i] + \"\\n\";\n    }\n}\n\nlet temp2 = msg.payload.types\nlet myListString2 = \"\";\nif (Array.isArray(temp2)) {\n    for (let i = 0; i < temp2.length; i++) {\n        myListString2 += i + ': ' + temp2[i] + \"\\n\";\n    }\n}\n\nvar msg1 = {}\nvar msg2 = {}\nmsg1 = { payload: myListString1 }\nmsg2 = { payload: myListString2 }\nreturn ([msg1, msg2]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f5e664e70e4f268d",
        "type": "file",
        "z": "66f751f83d3177e2",
        "g": "50fa822c5b2f79a1",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 760,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c5e4ec5222fda778",
        "type": "comment",
        "z": "66f751f83d3177e2",
        "g": "12dc62c874dfc812",
        "name": "Subscribe",
        "info": "",
        "x": 130,
        "y": 700,
        "wires": []
    },
    {
        "id": "2e44736b294dc65b",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "12dc62c874dfc812",
        "name": "",
        "func": "msg.payload=(JSON.stringify(msg.payload,null,2));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "06cd18ba89f1d401",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "7aaed6807de5b587",
        "name": "gazebo_learn",
        "func": "msg.payload = { \"data\": \"gazebo_learn\" }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "75f26f902c72f790",
        "type": "function",
        "z": "66f751f83d3177e2",
        "g": "7aaed6807de5b587",
        "name": "turn_off_gazebo_learn",
        "func": "msg.payload = { \"data\": \"turn_off_gazebo_learn\" }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "0b16d6c56afbb98e",
        "type": "inject",
        "z": "0977f05f928479b5",
        "g": "218663b2a5d19084",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "200d74971c076e4a"
            ]
        ]
    },
    {
        "id": "200d74971c076e4a",
        "type": "function",
        "z": "0977f05f928479b5",
        "g": "218663b2a5d19084",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "66ca7e52bfde0e22"
            ]
        ]
    },
    {
        "id": "66ca7e52bfde0e22",
        "type": "debug",
        "z": "0977f05f928479b5",
        "g": "218663b2a5d19084",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "168b4005123c2d3d",
        "type": "inject",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "45c69032a6583479",
                "eee6cce7114fce40"
            ]
        ]
    },
    {
        "id": "45c69032a6583479",
        "type": "function",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/MobileRobot_ATC.db\"\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "7091ba9bda1b4a4b",
                "ebdc351e778e18be"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "eee6cce7114fce40",
        "type": "Config_Web Begin",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "x": 400,
        "y": 380,
        "wires": [
            [
                "276d9e72023f5f7f"
            ]
        ]
    },
    {
        "id": "1c51d0a6891dd532",
        "type": "Config_Web End",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "port": "7000",
        "x": 390,
        "y": 660,
        "wires": [
            [
                "087fa0c404449fa9"
            ]
        ]
    },
    {
        "id": "866471ca136692ef",
        "type": "Config_Web Page",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "ATC",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "1010",
        "backgroundColor": "457b9d",
        "backgroundImage": "NoThing",
        "idPage": "Scada",
        "scale": "100",
        "x": 810,
        "y": 380,
        "wires": [
            [
                "b6bac4958a2a1b76"
            ]
        ]
    },
    {
        "id": "276d9e72023f5f7f",
        "type": "Config_Web Title",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "title": "SCADA PAGE",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "866471ca136692ef"
            ]
        ]
    },
    {
        "id": "087fa0c404449fa9",
        "type": "file",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "",
        "filename": "../Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1170,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ebdc351e778e18be",
        "type": "function",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\n// VariableSystem.IO.sockets.on('PositionMobile', function (data) { node.warn('Get Pos') })\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            let TempArr = data.tag.split('_')\n            if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n                node.warn('Mobile Robot:\\r\\n'+TempArr[1] + '\\r\\n')\n                VariableSystem.COMMUNICATION_MOBILE_ROBOT[1].write(TempArr[1] + '\\r\\n')\n            }\n        }\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "f1a599854fd75702"
            ]
        ]
    },
    {
        "id": "a4a16a6237095976",
        "type": "Omron Mobile Robot",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "",
        "host": "192.168.1.100",
        "password": "omron",
        "port": "7171",
        "indexPLC": "1",
        "x": 780,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b6bac4958a2a1b76",
        "type": "Config_Web Page",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "ConfigSystem",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "950",
        "backgroundColor": "457b9d",
        "backgroundImage": "abc",
        "idPage": "ConfigSystem",
        "scale": "100",
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "f7d6b9f3778dd26f"
            ]
        ]
    },
    {
        "id": "f7d6b9f3778dd26f",
        "type": "Config_Web Title",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "title": "MEMONIC VIBRATION",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "6d889ea24a77c21a"
            ]
        ]
    },
    {
        "id": "d8392a02a0e8b494",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - DWordAdjust",
        "indexPLC": "2",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1240,
        "y": 560,
        "wires": [
            [
                "1c51d0a6891dd532"
            ]
        ]
    },
    {
        "id": "6d889ea24a77c21a",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - BitDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 930,
        "y": 440,
        "wires": [
            [
                "c71df90ab3ee16d5"
            ]
        ]
    },
    {
        "id": "c71df90ab3ee16d5",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - BitAdjust",
        "indexPLC": "2",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1220,
        "y": 440,
        "wires": [
            [
                "a6f50ec5710fb86a"
            ]
        ]
    },
    {
        "id": "a6f50ec5710fb86a",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - WordDisplay",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 940,
        "y": 500,
        "wires": [
            [
                "4a1281615e3383d5"
            ]
        ]
    },
    {
        "id": "4a1281615e3383d5",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - WordAdjust",
        "indexPLC": "2",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1230,
        "y": 500,
        "wires": [
            [
                "0d73d215095e5e9f"
            ]
        ]
    },
    {
        "id": "0d73d215095e5e9f",
        "type": "Config_Web Memonic",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name_page": "Vibration - DWordDisplay",
        "indexPLC": "2",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 940,
        "y": 560,
        "wires": [
            [
                "d8392a02a0e8b494"
            ]
        ]
    },
    {
        "id": "f1a599854fd75702",
        "type": "plc_omron",
        "z": "0977f05f928479b5",
        "g": "08e8020462ea38cf",
        "name": "VIBRATION",
        "host": "192.168.1.10",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "720",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "0",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "0",
        "PLC_LengthOfWordString": "0",
        "PLC_NumberWordInString": "0",
        "x": 990,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "d67e0fd9.7b50c8",
        "type": "http in",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "url": "/my-page",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "d8aaba9864fa627a"
            ]
        ]
    },
    {
        "id": "c3b5e5a5.8b846",
        "type": "http response",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "d8aaba9864fa627a",
        "type": "template",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>My Page</title>\n  <script src=\"roslib.js\"></script>\n  <script type=\"text/javascript\">\n    var ros = new ROSLIB.Ros({\n      url : 'ws://tinh@tinh-VirtualBox:9090' \n    });\n  \n    ros.on('connection', function() {\n      console.log('Connected to websocket server.');\n    });\n  \n    ros.on('error', function(error) {\n      console.log('Error connecting to websocket server: ', error);\n    });\n  \n    ros.on('close', function() {\n      console.log('Connection to websocket server closed.');\n    });\n    // Publishing a Topic\n    // ------------------\n  \n    var cmdVel = new ROSLIB.Topic({\n      ros : ros,\n      name : '/cmd_vel',\n      messageType : 'geometry_msgs/Twist'\n    });\n  \n    var twist = new ROSLIB.Message({\n      linear : {\n        x : 0.1,\n        y : 0.2,\n        z : 0.3\n      },\n      angular : {\n        x : -0.1,\n        y : -0.2,\n        z : -0.3\n      }\n    });\n    cmdVel.publish(twist);\n  \n    // Subscribing to a Topic\n    // ----------------------\n  \n    var listener = new ROSLIB.Topic({\n      ros : ros,\n      name : '/listener',\n      messageType : 'std_msgs/String'\n    });\n  \n    listener.subscribe(function(message) {\n      console.log('Received message on ' + listener.name + ': ' + message.data);\n      listener.unsubscribe();\n    });\n  \n    // Calling a service\n    // -----------------\n  \n    var addTwoIntsClient = new ROSLIB.Service({\n      ros : ros,\n      name : '/add_two_ints',\n      serviceType : 'rospy_tutorials/AddTwoInts'\n    });\n  \n    var request = new ROSLIB.ServiceRequest({\n     a : 1,\n      b : 2\n    });\n  \n    addTwoIntsClient.callService(request, function(result) {\n      console.log('Result for service call on '\n        + addTwoIntsClient.name\n        + ': '\n        + result.sum);\n    });\n  \n    // Getting and setting a param value\n    // ---------------------------------\n  \n    ros.getTopics(function(params) {\n      console.log(params);\n    });\n    ros.getParams(function(params) {\n      console.log(params);\n    });\n  \n    var maxVelX = new ROSLIB.Param({\n      ros : ros,\n      name : 'max_vel_y'\n    });\n  \n    maxVelX.set(0.8);\n   maxVelX.get(function(value) {\n     console.log('MAX VAL: ' + value);\n   });\n  </script>\n</head>\n<body>\n  <h1>Simple roslib Example</h1>\n  <p>Check your Web Console for output.</p>\n</body>\n</html>",
        "output": "str",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "c3b5e5a5.8b846"
            ]
        ]
    },
    {
        "id": "54521c26a6521d4e",
        "type": "http in",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "url": "/my-page2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "371430ef417f3297"
            ]
        ]
    },
    {
        "id": "b47e2309ec86f359",
        "type": "http in",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "url": "assets/js/joystick.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "31c3eaaaf0f8afdb"
            ]
        ]
    },
    {
        "id": "31c3eaaaf0f8afdb",
        "type": "template",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "joystick",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.nipplejs = f()}})(function(){var define,module,exports;\n'use strict';\n\n// Constants\nvar isTouch = !!('ontouchstart' in window);\nvar isPointer = window.PointerEvent ? true : false;\nvar isMSPointer = window.MSPointerEvent ? true : false;\nvar events = {\n    touch: {\n        start: 'touchstart',\n        move: 'touchmove',\n        end: 'touchend, touchcancel'\n    },\n    mouse: {\n        start: 'mousedown',\n        move: 'mousemove',\n        end: 'mouseup'\n    },\n    pointer: {\n        start: 'pointerdown',\n        move: 'pointermove',\n        end: 'pointerup, pointercancel'\n    },\n    MSPointer: {\n        start: 'MSPointerDown',\n        move: 'MSPointerMove',\n        end: 'MSPointerUp'\n    }\n};\nvar toBind;\nvar secondBind = {};\nif (isPointer) {\n    toBind = events.pointer;\n} else if (isMSPointer) {\n    toBind = events.MSPointer;\n} else if (isTouch) {\n    toBind = events.touch;\n    secondBind = events.mouse;\n} else {\n    toBind = events.mouse;\n}\n\n///////////////////////\n///      UTILS      ///\n///////////////////////\n\nvar u = {};\nu.distance = function (p1, p2) {\n    var dx = p2.x - p1.x;\n    var dy = p2.y - p1.y;\n\n    return Math.sqrt((dx * dx) + (dy * dy));\n};\n\nu.angle = function(p1, p2) {\n    var dx = p2.x - p1.x;\n    var dy = p2.y - p1.y;\n\n    return u.degrees(Math.atan2(dy, dx));\n};\n\nu.findCoord = function(p, d, a) {\n    var b = {x: 0, y: 0};\n    a = u.radians(a);\n    b.x = p.x - d * Math.cos(a);\n    b.y = p.y - d * Math.sin(a);\n    return b;\n};\n\nu.radians = function(a) {\n    return a * (Math.PI / 180);\n};\n\nu.degrees = function(a) {\n    return a * (180 / Math.PI);\n};\n\nu.bindEvt = function (el, arg, handler) {\n    var types = arg.split(/[ ,]+/g);\n    var type;\n    for (var i = 0; i < types.length; i += 1) {\n        type = types[i];\n        if (el.addEventListener) {\n            el.addEventListener(type, handler, false);\n        } else if (el.attachEvent) {\n            el.attachEvent(type, handler);\n        }\n    }\n};\n\nu.unbindEvt = function (el, arg, handler) {\n    var types = arg.split(/[ ,]+/g);\n    var type;\n    for (var i = 0; i < types.length; i += 1) {\n        type = types[i];\n        if (el.removeEventListener) {\n            el.removeEventListener(type, handler);\n        } else if (el.detachEvent) {\n            el.detachEvent(type, handler);\n        }\n    }\n};\n\nu.trigger = function (el, type, data) {\n    var evt = new CustomEvent(type, data);\n    el.dispatchEvent(evt);\n};\n\nu.prepareEvent = function (evt) {\n    evt.preventDefault();\n    return evt.type.match(/^touch/) ? evt.changedTouches : evt;\n};\n\nu.getScroll = function () {\n    var x = (window.pageXOffset !== undefined) ?\n        window.pageXOffset :\n        (document.documentElement || document.body.parentNode || document.body)\n            .scrollLeft;\n\n    var y = (window.pageYOffset !== undefined) ?\n        window.pageYOffset :\n        (document.documentElement || document.body.parentNode || document.body)\n            .scrollTop;\n    return {\n        x: x,\n        y: y\n    };\n};\n\nu.applyPosition = function (el, pos) {\n    if (pos.top || pos.right || pos.bottom || pos.left) {\n        el.style.top = pos.top;\n        el.style.right = pos.right;\n        el.style.bottom = pos.bottom;\n        el.style.left = pos.left;\n    } else {\n        el.style.left = pos.x + 'px';\n        el.style.top = pos.y + 'px';\n    }\n};\n\nu.getTransitionStyle = function (property, values, time) {\n    var obj = u.configStylePropertyObject(property);\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (typeof values === 'string') {\n                obj[i] = values + ' ' + time;\n            } else {\n                var st = '';\n                for (var j = 0, max = values.length; j < max; j += 1) {\n                    st += values[j] + ' ' + time + ', ';\n                }\n                obj[i] = st.slice(0, -2);\n            }\n        }\n    }\n    return obj;\n};\n\nu.getVendorStyle = function (property, value) {\n    var obj = u.configStylePropertyObject(property);\n    for (var i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            obj[i] = value;\n        }\n    }\n    return obj;\n};\n\nu.configStylePropertyObject = function (prop) {\n    var obj = {};\n    obj[prop] = '';\n    var vendors = ['webkit', 'Moz', 'o'];\n    vendors.forEach(function (vendor) {\n        obj[vendor + prop.charAt(0).toUpperCase() + prop.slice(1)] = '';\n    });\n    return obj;\n};\n\nu.extend = function (objA, objB) {\n    for (var i in objB) {\n        if (objB.hasOwnProperty(i)) {\n            objA[i] = objB[i];\n        }\n    }\n    return objA;\n};\n\n// Overwrite only what's already present\nu.safeExtend = function (objA, objB) {\n    var obj = {};\n    for (var i in objA) {\n        if (objA.hasOwnProperty(i) && objB.hasOwnProperty(i)) {\n            obj[i] = objB[i];\n        } else if (objA.hasOwnProperty(i)) {\n            obj[i] = objA[i];\n        }\n    }\n    return obj;\n};\n\n// Map for array or unique item.\nu.map = function (ar, fn) {\n    if (ar.length) {\n        for (var i = 0, max = ar.length; i < max; i += 1) {\n            fn(ar[i]);\n        }\n    } else {\n        fn(ar);\n    }\n};\n\n///////////////////////\n///   SUPER CLASS   ///\n///////////////////////\n\nfunction Super () {};\n\n// Basic event system.\nSuper.prototype.on = function (arg, cb) {\n    var self = this;\n    var types = arg.split(/[ ,]+/g);\n    var type;\n    self._handlers_ = self._handlers_ || {};\n\n    for (var i = 0; i < types.length; i += 1) {\n        type = types[i];\n        self._handlers_[type] = self._handlers_[type] || [];\n        self._handlers_[type].push(cb);\n    }\n    return self;\n};\n\nSuper.prototype.off = function (type, cb) {\n    var self = this;\n    self._handlers_ = self._handlers_ || {};\n\n    if (type === undefined) {\n        self._handlers_ = {};\n    } else if (cb === undefined) {\n        self._handlers_[type] = null;\n    } else if (self._handlers_[type] &&\n            self._handlers_[type].indexOf(cb) >= 0) {\n        self._handlers_[type].splice(self._handlers_[type].indexOf(cb), 1);\n    }\n\n    return self;\n};\n\nSuper.prototype.trigger = function (arg, data) {\n    var self = this;\n    var types = arg.split(/[ ,]+/g);\n    var type;\n    self._handlers_ = self._handlers_ || {};\n\n    for (var i = 0; i < types.length; i += 1) {\n        type = types[i];\n        if (self._handlers_[type] && self._handlers_[type].length) {\n            self._handlers_[type].forEach(function (handler) {\n                handler.call(self, {\n                    type: type,\n                    target: self\n                }, data);\n            });\n        }\n    }\n};\n\n// Configuration\nSuper.prototype.config = function (options) {\n    var self = this;\n    self.options = self.defaults || {};\n    if (options) {\n        self.options = u.safeExtend(self.options, options);\n    }\n};\n\n// Bind internal events.\nSuper.prototype.bindEvt = function (el, type) {\n    var self = this;\n    self._domHandlers_ = self._domHandlers_ || {};\n\n    self._domHandlers_[type] = function () {\n        if (typeof self['on' + type] === 'function') {\n            self['on' + type].apply(self, arguments);\n        } else {\n            console.warn('[WARNING] : Missing \"on' + type + '\" handler.');\n        }\n    };\n\n    u.bindEvt(el, toBind[type], self._domHandlers_[type]);\n\n    if (secondBind[type]) {\n        // Support for both touch and mouse at the same time.\n        u.bindEvt(el, secondBind[type], self._domHandlers_[type]);\n    }\n\n    return self;\n};\n\n// Unbind dom events.\nSuper.prototype.unbindEvt = function (el, type) {\n    var self = this;\n    self._domHandlers_ = self._domHandlers_ || {};\n\n    u.unbindEvt(el, toBind[type], self._domHandlers_[type]);\n\n    if (secondBind[type]) {\n        // Support for both touch and mouse at the same time.\n        u.unbindEvt(el, secondBind[type], self._domHandlers_[type]);\n    }\n\n    delete self._domHandlers_[type];\n\n    return this;\n};\n\n///////////////////////\n///   THE NIPPLE    ///\n///////////////////////\n\nfunction Nipple (collection, options) {\n    this.identifier = options.identifier;\n    this.position = options.position;\n    this.frontPosition = options.frontPosition;\n    this.collection = collection;\n\n    // Defaults\n    this.defaults = {\n        size: 100,\n        threshold: 0.1,\n        color: 'white',\n        fadeTime: 250,\n        dataOnly: false,\n        restJoystick: true,\n        restOpacity: 0.5,\n        mode: 'dynamic',\n        zone: document.body,\n        lockX: false,\n        lockY: false\n    };\n\n    this.config(options);\n\n    // Overwrites\n    if (this.options.mode === 'dynamic') {\n        this.options.restOpacity = 0;\n    }\n\n    this.id = Nipple.id;\n    Nipple.id += 1;\n    this.buildEl()\n        .stylize();\n\n    // Nipple's API.\n    this.instance = {\n        el: this.ui.el,\n        on: this.on.bind(this),\n        off: this.off.bind(this),\n        show: this.show.bind(this),\n        hide: this.hide.bind(this),\n        add: this.addToDom.bind(this),\n        remove: this.removeFromDom.bind(this),\n        destroy: this.destroy.bind(this),\n        resetDirection: this.resetDirection.bind(this),\n        computeDirection: this.computeDirection.bind(this),\n        trigger: this.trigger.bind(this),\n        position: this.position,\n        frontPosition: this.frontPosition,\n        ui: this.ui,\n        identifier: this.identifier,\n        id: this.id,\n        options: this.options\n    };\n\n    return this.instance;\n};\n\nNipple.prototype = new Super();\nNipple.constructor = Nipple;\nNipple.id = 0;\n\n// Build the dom element of the Nipple instance.\nNipple.prototype.buildEl = function (options) {\n    this.ui = {};\n\n    if (this.options.dataOnly) {\n        return this;\n    }\n\n    this.ui.el = document.createElement('div');\n    this.ui.back = document.createElement('div');\n    this.ui.front = document.createElement('div');\n\n    this.ui.el.className = 'nipple collection_' + this.collection.id;\n    this.ui.back.className = 'back';\n    this.ui.front.className = 'front';\n\n    this.ui.el.setAttribute('id', 'nipple_' + this.collection.id +\n        '_' + this.id);\n\n    this.ui.el.appendChild(this.ui.back);\n    this.ui.el.appendChild(this.ui.front);\n\n    return this;\n};\n\n// Apply CSS to the Nipple instance.\nNipple.prototype.stylize = function () {\n    if (this.options.dataOnly) {\n        return this;\n    }\n    var animTime = this.options.fadeTime + 'ms';\n    var borderStyle = u.getVendorStyle('borderRadius', '50%');\n    var transitStyle = u.getTransitionStyle('transition', 'opacity', animTime);\n    var styles = {};\n    styles.el = {\n        position: 'absolute',\n        opacity: this.options.restOpacity,\n        display: 'block',\n        'zIndex': 999\n    };\n\n    styles.back = {\n        position: 'absolute',\n        display: 'block',\n        width: this.options.size + 'px',\n        height: this.options.size + 'px',\n        marginLeft: -this.options.size / 2 + 'px',\n        marginTop: -this.options.size / 2 + 'px',\n        background: this.options.color,\n        'opacity': '.5'\n    };\n\n    styles.front = {\n        width: this.options.size / 2 + 'px',\n        height: this.options.size / 2 + 'px',\n        position: 'absolute',\n        display: 'block',\n        marginLeft: -this.options.size / 4 + 'px',\n        marginTop: -this.options.size / 4 + 'px',\n        background: this.options.color,\n        'opacity': '.5'\n    };\n\n    u.extend(styles.el, transitStyle);\n    u.extend(styles.back, borderStyle);\n    u.extend(styles.front, borderStyle);\n\n    this.applyStyles(styles);\n\n    return this;\n};\n\nNipple.prototype.applyStyles = function (styles) {\n    // Apply styles\n    for (var i in this.ui) {\n        if (this.ui.hasOwnProperty(i)) {\n            for (var j in styles[i]) {\n                this.ui[i].style[j] = styles[i][j];\n            }\n        }\n    }\n\n    return this;\n};\n\n// Inject the Nipple instance into DOM.\nNipple.prototype.addToDom = function () {\n    // We're not adding it if we're dataOnly or already in dom.\n    if (this.options.dataOnly || document.body.contains(this.ui.el)) {\n        return this;\n    }\n    this.options.zone.appendChild(this.ui.el);\n    return this;\n};\n\n// Remove the Nipple instance from DOM.\nNipple.prototype.removeFromDom = function () {\n    if (this.options.dataOnly || !document.body.contains(this.ui.el)) {\n        return this;\n    }\n    this.options.zone.removeChild(this.ui.el);\n    return this;\n};\n\n// Entirely destroy this nipple\nNipple.prototype.destroy = function () {\n    clearTimeout(this.removeTimeout);\n    clearTimeout(this.showTimeout);\n    clearTimeout(this.restTimeout);\n    this.trigger('destroyed', this.instance);\n    this.removeFromDom();\n    this.off();\n};\n\n// Fade in the Nipple instance.\nNipple.prototype.show = function (cb) {\n    var self = this;\n\n    if (self.options.dataOnly) {\n        return self;\n    }\n\n    clearTimeout(self.removeTimeout);\n    clearTimeout(self.showTimeout);\n    clearTimeout(self.restTimeout);\n\n    self.addToDom();\n\n    self.restCallback();\n\n    setTimeout(function () {\n        self.ui.el.style.opacity = 1;\n    }, 0);\n\n    self.showTimeout = setTimeout(function () {\n        self.trigger('shown', self.instance);\n        if (typeof cb === 'function') {\n            cb.call(this);\n        }\n    }, self.options.fadeTime);\n\n    return self;\n};\n\n// Fade out the Nipple instance.\nNipple.prototype.hide = function (cb) {\n    var self = this;\n\n    if (self.options.dataOnly) {\n        return self;\n    }\n\n    self.ui.el.style.opacity = self.options.restOpacity;\n\n    clearTimeout(self.removeTimeout);\n    clearTimeout(self.showTimeout);\n    clearTimeout(self.restTimeout);\n\n    self.removeTimeout = setTimeout(\n        function () {\n            var display = self.options.mode === 'dynamic' ? 'none' : 'block';\n            self.ui.el.style.display = display;\n            if (typeof cb === 'function') {\n                cb.call(self);\n            }\n\n            self.trigger('hidden', self.instance);\n        },\n        self.options.fadeTime\n    );\n    if (self.options.restJoystick) {\n        self.restPosition();\n    }\n\n    return self;\n};\n\nNipple.prototype.restPosition = function (cb) {\n    var self = this;\n    self.frontPosition = {\n        x: 0,\n        y: 0\n    };\n    var animTime = self.options.fadeTime + 'ms';\n\n    var transitStyle = {};\n    transitStyle.front = u.getTransitionStyle('transition',\n        ['top', 'left'], animTime);\n\n    var styles = {front: {}};\n    styles.front = {\n        left: self.frontPosition.x + 'px',\n        top: self.frontPosition.y + 'px'\n    };\n\n    self.applyStyles(transitStyle);\n    self.applyStyles(styles);\n\n    self.restTimeout = setTimeout(\n        function () {\n            if (typeof cb === 'function') {\n                cb.call(self);\n            }\n            self.restCallback();\n        },\n        self.options.fadeTime\n    );\n};\n\nNipple.prototype.restCallback = function () {\n    var self = this;\n    var transitStyle = {};\n    transitStyle.front = u.getTransitionStyle('transition', 'none', '');\n    self.applyStyles(transitStyle);\n    self.trigger('rested', self.instance);\n};\n\nNipple.prototype.resetDirection = function () {\n    // Fully rebuild the object to let the iteration possible.\n    this.direction = {\n        x: false,\n        y: false,\n        angle: false\n    };\n};\n\nNipple.prototype.computeDirection = function (obj) {\n    var rAngle = obj.angle.radian;\n    var angle45 = Math.PI / 4;\n    var angle90 = Math.PI / 2;\n    var direction, directionX, directionY;\n\n    // Angular direction\n    //     \\  UP /\n    //      \\   /\n    // LEFT       RIGHT\n    //      /   \\\n    //     /DOWN \\\n    //\n    if (\n        rAngle > angle45 &&\n        rAngle < (angle45 * 3) &&\n        !obj.lockX\n    ) {\n        direction = 'up';\n    } else if (\n        rAngle > -angle45 &&\n        rAngle <= angle45 &&\n        !obj.lockY\n    ) {\n        direction = 'left';\n    } else if (\n        rAngle > (-angle45 * 3) &&\n        rAngle <= -angle45 &&\n        !obj.lockX\n    ) {\n        direction = 'down';\n    } else if (!obj.lockY) {\n        direction = 'right';\n    }\n\n    // Plain direction\n    //    UP                 |\n    // _______               | RIGHT\n    //                  LEFT |\n    //   DOWN                |\n    if (!obj.lockY) {\n        if (rAngle > -angle90 && rAngle < angle90) {\n            directionX = 'left';\n        } else {\n            directionX = 'right';\n        }\n    }\n\n    if (!obj.lockX) {\n        if (rAngle > 0) {\n            directionY = 'up';\n        } else {\n            directionY = 'down';\n        }\n    }\n\n    if (obj.force > this.options.threshold) {\n        var oldDirection = {};\n        for (var i in this.direction) {\n            if (this.direction.hasOwnProperty(i)) {\n                oldDirection[i] = this.direction[i];\n            }\n        }\n\n        var same = {};\n\n        this.direction = {\n            x: directionX,\n            y: directionY,\n            angle: direction\n        };\n\n        obj.direction = this.direction;\n\n        for (var i in oldDirection) {\n            if (oldDirection[i] === this.direction[i]) {\n                same[i] = true;\n            }\n        }\n\n        // If all 3 directions are the same, we don't trigger anything.\n        if (same.x && same.y && same.angle) {\n            return obj;\n        }\n\n        if (!same.x || !same.y) {\n            this.trigger('plain', obj);\n        }\n\n        if (!same.x) {\n            this.trigger('plain:' + directionX, obj);\n        }\n\n        if (!same.y) {\n            this.trigger('plain:' + directionY, obj);\n        }\n\n        if (!same.angle) {\n            this.trigger('dir dir:' + direction, obj);\n        }\n    }\n    return obj;\n};\n\n/* global Nipple, Super */\n\n///////////////////////////\n///   THE COLLECTION    ///\n///////////////////////////\n\nfunction Collection (manager, options) {\n    var self = this;\n    self.nipples = [];\n    self.idles = [];\n    self.actives = [];\n    self.ids = [];\n    self.pressureIntervals = {};\n    self.manager = manager;\n    self.id = Collection.id;\n    Collection.id += 1;\n\n    // Defaults\n    self.defaults = {\n        zone: document.body,\n        multitouch: false,\n        maxNumberOfNipples: 10,\n        mode: 'dynamic',\n        position: {top: 0, left: 0},\n        catchDistance: 200,\n        size: 100,\n        threshold: 0.1,\n        color: 'white',\n        fadeTime: 250,\n        dataOnly: false,\n        restJoystick: true,\n        restOpacity: 0.5,\n        lockX: false,\n        lockY: false\n    };\n\n    self.config(options);\n\n    // Overwrites\n    if (self.options.mode === 'static' || self.options.mode === 'semi') {\n        self.options.multitouch = false;\n    }\n\n    if (!self.options.multitouch) {\n        self.options.maxNumberOfNipples = 1;\n    }\n\n    self.updateBox();\n    self.prepareNipples();\n    self.bindings();\n    self.begin();\n\n    return self.nipples;\n}\n\nCollection.prototype = new Super();\nCollection.constructor = Collection;\nCollection.id = 0;\n\nCollection.prototype.prepareNipples = function () {\n    var self = this;\n    var nips = self.nipples;\n\n    // Public API Preparation.\n    nips.on = self.on.bind(self);\n    nips.off = self.off.bind(self);\n    nips.options = self.options;\n    nips.destroy = self.destroy.bind(self);\n    nips.ids = self.ids;\n    nips.id = self.id;\n    nips.processOnMove = self.processOnMove.bind(self);\n    nips.processOnEnd = self.processOnEnd.bind(self);\n    nips.get = function (id) {\n        if (id === undefined) {\n            return nips[0];\n        }\n        for (var i = 0, max = nips.length; i < max; i += 1) {\n            if (nips[i].identifier === id) {\n                return nips[i];\n            }\n        }\n        return false;\n    };\n};\n\nCollection.prototype.bindings = function () {\n    var self = this;\n    // Touch start event.\n    self.bindEvt(self.options.zone, 'start');\n    // Avoid native touch actions (scroll, zoom etc...) on the zone.\n    self.options.zone.style.touchAction = 'none';\n    self.options.zone.style.msTouchAction = 'none';\n};\n\nCollection.prototype.begin = function () {\n    var self = this;\n    var opts = self.options;\n\n    // We place our static nipple\n    // if needed.\n    if (opts.mode === 'static') {\n        var nipple = self.createNipple(\n            opts.position,\n            self.manager.getIdentifier()\n        );\n        // Add it to the dom.\n        nipple.add();\n        // Store it in idles.\n        self.idles.push(nipple);\n    }\n};\n\n// Nipple Factory\nCollection.prototype.createNipple = function (position, identifier) {\n    var self = this;\n    var scroll = u.getScroll();\n    var toPutOn = {};\n    var opts = self.options;\n\n    if (position.x && position.y) {\n        toPutOn = {\n            x: position.x -\n                (scroll.x + self.box.left),\n            y: position.y -\n                (scroll.y + self.box.top)\n        };\n    } else if (\n            position.top ||\n            position.right ||\n            position.bottom ||\n            position.left\n        ) {\n\n        // We need to compute the position X / Y of the joystick.\n        var dumb = document.createElement('DIV');\n        dumb.style.display = 'hidden';\n        dumb.style.top = position.top;\n        dumb.style.right = position.right;\n        dumb.style.bottom = position.bottom;\n        dumb.style.left = position.left;\n        dumb.style.position = 'absolute';\n\n        opts.zone.appendChild(dumb);\n        var dumbBox = dumb.getBoundingClientRect();\n        opts.zone.removeChild(dumb);\n\n        toPutOn = position;\n        position = {\n            x: dumbBox.left + scroll.x,\n            y: dumbBox.top + scroll.y\n        };\n    }\n\n    var nipple = new Nipple(self, {\n        color: opts.color,\n        size: opts.size,\n        threshold: opts.threshold,\n        fadeTime: opts.fadeTime,\n        dataOnly: opts.dataOnly,\n        restJoystick: opts.restJoystick,\n        restOpacity: opts.restOpacity,\n        mode: opts.mode,\n        identifier: identifier,\n        position: position,\n        zone: opts.zone,\n        frontPosition: {\n            x: 0,\n            y: 0\n        }\n    });\n\n    if (!opts.dataOnly) {\n        u.applyPosition(nipple.ui.el, toPutOn);\n        u.applyPosition(nipple.ui.front, nipple.frontPosition);\n    }\n    self.nipples.push(nipple);\n    self.trigger('added ' + nipple.identifier + ':added', nipple);\n    self.manager.trigger('added ' + nipple.identifier + ':added', nipple);\n\n    self.bindNipple(nipple);\n\n    return nipple;\n};\n\nCollection.prototype.updateBox = function () {\n    var self = this;\n    self.box = self.options.zone.getBoundingClientRect();\n};\n\nCollection.prototype.bindNipple = function (nipple) {\n    var self = this;\n    var type;\n    // Bubble up identified events.\n    var handler = function (evt, data) {\n        // Identify the event type with the nipple's id.\n        type = evt.type + ' ' + data.id + ':' + evt.type;\n        self.trigger(type, data);\n    };\n\n    // When it gets destroyed.\n    nipple.on('destroyed', self.onDestroyed.bind(self));\n\n    // Other events that will get bubbled up.\n    nipple.on('shown hidden rested dir plain', handler);\n    nipple.on('dir:up dir:right dir:down dir:left', handler);\n    nipple.on('plain:up plain:right plain:down plain:left', handler);\n};\n\nCollection.prototype.pressureFn = function (touch, nipple, identifier) {\n    var self = this;\n    var previousPressure = 0;\n    clearInterval(self.pressureIntervals[identifier]);\n    // Create an interval that will read the pressure every 100ms\n    self.pressureIntervals[identifier] = setInterval(function () {\n        var pressure = touch.force || touch.pressure ||\n            touch.webkitForce || 0;\n        if (pressure !== previousPressure) {\n            nipple.trigger('pressure', pressure);\n            self.trigger('pressure ' +\n                nipple.identifier + ':pressure', pressure);\n            previousPressure = pressure;\n        }\n    }.bind(self), 100);\n};\n\nCollection.prototype.onstart = function (evt) {\n    var self = this;\n    var opts = self.options;\n    evt = u.prepareEvent(evt);\n\n    // Update the box position\n    self.updateBox();\n\n    var process = function (touch) {\n        // If we can create new nipples\n        // meaning we don't have more active nipples than we should.\n        if (self.actives.length < opts.maxNumberOfNipples) {\n            self.processOnStart(touch);\n        }\n    };\n\n    u.map(evt, process);\n\n    // We ask upstream to bind the document\n    // on 'move' and 'end'\n    self.manager.bindDocument();\n    return false;\n};\n\nCollection.prototype.processOnStart = function (evt) {\n    var self = this;\n    var opts = self.options;\n    var indexInIdles;\n    var identifier = self.manager.getIdentifier(evt);\n    var pressure = evt.force || evt.pressure || evt.webkitForce || 0;\n    var position = {\n        x: evt.pageX,\n        y: evt.pageY\n    };\n\n    var nipple = self.getOrCreate(identifier, position);\n\n    // Update its touch identifier\n    if (nipple.identifier !== identifier) {\n        self.manager.removeIdentifier(nipple.identifier);\n    }\n    nipple.identifier = identifier;\n\n    var process = function (nip) {\n        // Trigger the start.\n        nip.trigger('start', nip);\n        self.trigger('start ' + nip.id + ':start', nip);\n\n        nip.show();\n        if (pressure > 0) {\n            self.pressureFn(evt, nip, nip.identifier);\n        }\n        // Trigger the first move event.\n        self.processOnMove(evt);\n    };\n\n    // Transfer it from idles to actives.\n    if ((indexInIdles = self.idles.indexOf(nipple)) >= 0) {\n        self.idles.splice(indexInIdles, 1);\n    }\n\n    // Store the nipple in the actives array\n    self.actives.push(nipple);\n    self.ids.push(nipple.identifier);\n\n    if (opts.mode !== 'semi') {\n        process(nipple);\n    } else {\n        // In semi we check the distance of the touch\n        // to decide if we have to reset the nipple\n        var distance = u.distance(position, nipple.position);\n        if (distance <= opts.catchDistance) {\n            process(nipple);\n        } else {\n            nipple.destroy();\n            self.processOnStart(evt);\n            return;\n        }\n    }\n\n    return nipple;\n};\n\nCollection.prototype.getOrCreate = function (identifier, position) {\n    var self = this;\n    var opts = self.options;\n    var nipple;\n\n    // If we're in static or semi, we might already have an active.\n    if (/(semi|static)/.test(opts.mode)) {\n        // Get the active one.\n        // TODO: Multi-touche for semi and static will start here.\n        // Return the nearest one.\n        nipple = self.idles[0];\n        if (nipple) {\n            self.idles.splice(0, 1);\n            return nipple;\n        }\n\n        if (opts.mode === 'semi') {\n            // If we're in semi mode, we need to create one.\n            return self.createNipple(position, identifier);\n        }\n\n        console.warn('Coudln\\'t find the needed nipple.');\n        return false;\n    }\n    // In dynamic, we create a new one.\n    nipple = self.createNipple(position, identifier);\n    return nipple;\n};\n\nCollection.prototype.processOnMove = function (evt) {\n    var self = this;\n    var opts = self.options;\n    var identifier = self.manager.getIdentifier(evt);\n    var nipple = self.nipples.get(identifier);\n\n    if (!nipple) {\n        // This is here just for safety.\n        // It shouldn't happen.\n        console.error('Found zombie joystick with ID ' + identifier);\n        self.manager.removeIdentifier(identifier);\n        return;\n    }\n\n    nipple.identifier = identifier;\n\n    var size = nipple.options.size / 2;\n    var pos = {\n        x: evt.pageX,\n        y: evt.pageY\n    };\n\n    var dist = u.distance(pos, nipple.position);\n    var angle = u.angle(pos, nipple.position);\n    var rAngle = u.radians(angle);\n    var force = dist / size;\n\n    // If distance is bigger than nipple's size\n    // we clamp the position.\n    if (dist > size) {\n        dist = size;\n        pos = u.findCoord(nipple.position, dist, angle);\n    }\n\n    var xPosition = pos.x - nipple.position.x\n    var yPosition = pos.y - nipple.position.y\n\n    if (opts.lockX){\n        yPosition = 0\n    }\n    if (opts.lockY) {\n        xPosition = 0\n    }\n\n    nipple.frontPosition = {\n        x: xPosition,\n        y: yPosition\n    };\n\n    if (!opts.dataOnly) {\n        u.applyPosition(nipple.ui.front, nipple.frontPosition);\n    }\n\n    // Prepare event's datas.\n    var toSend = {\n        identifier: nipple.identifier,\n        position: pos,\n        force: force,\n        pressure: evt.force || evt.pressure || evt.webkitForce || 0,\n        distance: dist,\n        angle: {\n            radian: rAngle,\n            degree: angle\n        },\n        instance: nipple,\n        lockX: opts.lockX,\n        lockY: opts.lockY\n    };\n\n    // Compute the direction's datas.\n    toSend = nipple.computeDirection(toSend);\n\n    // Offset angles to follow units circle.\n    toSend.angle = {\n        radian: u.radians(180 - angle),\n        degree: 180 - angle\n    };\n\n    // Send everything to everyone.\n    nipple.trigger('move', toSend);\n    self.trigger('move ' + nipple.id + ':move', toSend);\n};\n\nCollection.prototype.processOnEnd = function (evt) {\n    var self = this;\n    var opts = self.options;\n    var identifier = self.manager.getIdentifier(evt);\n    var nipple = self.nipples.get(identifier);\n    var removedIdentifier = self.manager.removeIdentifier(nipple.identifier);\n\n    if (!nipple) {\n        return;\n    }\n\n    if (!opts.dataOnly) {\n        nipple.hide(function () {\n            if (opts.mode === 'dynamic') {\n                nipple.trigger('removed', nipple);\n                self.trigger('removed ' + nipple.id + ':removed', nipple);\n                self.manager\n                    .trigger('removed ' + nipple.id + ':removed', nipple);\n                nipple.destroy();\n            }\n        });\n    }\n\n    // Clear the pressure interval reader\n    clearInterval(self.pressureIntervals[nipple.identifier]);\n\n    // Reset the direciton of the nipple, to be able to trigger a new direction\n    // on start.\n    nipple.resetDirection();\n\n    nipple.trigger('end', nipple);\n    self.trigger('end ' + nipple.id + ':end', nipple);\n\n    // Remove identifier from our bank.\n    if (self.ids.indexOf(nipple.identifier) >= 0) {\n        self.ids.splice(self.ids.indexOf(nipple.identifier), 1);\n    }\n\n    // Clean our actives array.\n    if (self.actives.indexOf(nipple) >= 0) {\n        self.actives.splice(self.actives.indexOf(nipple), 1);\n    }\n\n    if (/(semi|static)/.test(opts.mode)) {\n        // Transfer nipple from actives to idles\n        // if we're in semi or static mode.\n        self.idles.push(nipple);\n    } else if (self.nipples.indexOf(nipple) >= 0) {\n        // Only if we're not in semi or static mode\n        // we can remove the instance.\n        self.nipples.splice(self.nipples.indexOf(nipple), 1);\n    }\n\n    // We unbind move and end.\n    self.manager.unbindDocument();\n\n    // We add back the identifier of the idle nipple;\n    if (/(semi|static)/.test(opts.mode)) {\n        self.manager.ids[removedIdentifier.id] = removedIdentifier.identifier;\n    }\n};\n\n// Remove destroyed nipple from the lists\nCollection.prototype.onDestroyed = function(evt, nipple) {\n    var self = this;\n    if (self.nipples.indexOf(nipple) >= 0) {\n        self.nipples.splice(self.nipples.indexOf(nipple), 1);\n    }\n    if (self.actives.indexOf(nipple) >= 0) {\n        self.actives.splice(self.actives.indexOf(nipple), 1);\n    }\n    if (self.idles.indexOf(nipple) >= 0) {\n        self.idles.splice(self.idles.indexOf(nipple), 1);\n    }\n    if (self.ids.indexOf(nipple.identifier) >= 0) {\n        self.ids.splice(self.ids.indexOf(nipple.identifier), 1);\n    }\n\n    // Remove the identifier from our bank\n    self.manager.removeIdentifier(nipple.identifier);\n\n    // We unbind move and end.\n    self.manager.unbindDocument();\n};\n\n// Cleanly destroy the manager\nCollection.prototype.destroy = function () {\n    var self = this;\n    self.unbindEvt(self.options.zone, 'start');\n\n    // Destroy nipples.\n    self.nipples.forEach(function(nipple) {\n        nipple.destroy();\n    });\n\n    // Clean 3DTouch intervals.\n    for (var i in self.pressureIntervals) {\n        if (self.pressureIntervals.hasOwnProperty(i)) {\n            clearInterval(self.pressureIntervals[i]);\n        }\n    }\n\n    // Notify the manager passing the instance\n    self.trigger('destroyed', self.nipples);\n    // We unbind move and end.\n    self.manager.unbindDocument();\n    // Unbind everything.\n    self.off();\n};\n\n/* global u, Super, Collection */\n\n///////////////////////\n///     MANAGER     ///\n///////////////////////\n\nfunction Manager (options) {\n    var self = this;\n    self.ids = {};\n    self.index = 0;\n    self.collections = [];\n\n    self.config(options);\n    self.prepareCollections();\n\n    // Listen for resize, to reposition every joysticks\n    var resizeTimer;\n    u.bindEvt(window, 'resize', function (evt) {\n        clearTimeout(resizeTimer);\n        resizeTimer = setTimeout(function () {\n            var pos;\n            var scroll = u.getScroll();\n            self.collections.forEach(function (collection) {\n                collection.forEach(function (nipple) {\n                    pos = nipple.el.getBoundingClientRect();\n                    nipple.position = {\n                        x: scroll.x + pos.left,\n                        y: scroll.y + pos.top\n                    };\n                });\n            });\n        }, 100);\n    });\n\n    return self.collections;\n};\n\nManager.prototype = new Super();\nManager.constructor = Manager;\n\nManager.prototype.prepareCollections = function () {\n    var self = this;\n    // Public API Preparation.\n    self.collections.create = self.create.bind(self);\n    // Listen to anything\n    self.collections.on = self.on.bind(self);\n    // Unbind general events\n    self.collections.off = self.off.bind(self);\n    // Destroy everything\n    self.collections.destroy = self.destroy.bind(self);\n    // Get any nipple\n    self.collections.get = function (id) {\n        var nipple;\n        self.collections.every(function (collection) {\n            if (nipple = collection.get(id)) {\n                return false;\n            }\n            return true;\n        });\n        return nipple;\n    };\n};\n\nManager.prototype.create = function (options) {\n    return this.createCollection(options);\n};\n\n// Collection Factory\nManager.prototype.createCollection = function (options) {\n    var self = this;\n    var collection = new Collection(self, options);\n\n    self.bindCollection(collection);\n    self.collections.push(collection);\n\n    return collection;\n};\n\nManager.prototype.bindCollection = function (collection) {\n    var self = this;\n    var type;\n    // Bubble up identified events.\n    var handler = function (evt, data) {\n        // Identify the event type with the nipple's identifier.\n        type = evt.type + ' ' + data.id + ':' + evt.type;\n        self.trigger(type, data);\n    };\n\n    // When it gets destroyed we clean.\n    collection.on('destroyed', self.onDestroyed.bind(self));\n\n    // Other events that will get bubbled up.\n    collection.on('shown hidden rested dir plain', handler);\n    collection.on('dir:up dir:right dir:down dir:left', handler);\n    collection.on('plain:up plain:right plain:down plain:left', handler);\n};\n\nManager.prototype.bindDocument = function () {\n    var self = this;\n    // Bind only if not already binded\n    if (!self.binded) {\n        self.bindEvt(document, 'move')\n            .bindEvt(document, 'end');\n        self.binded = true;\n    }\n};\n\nManager.prototype.unbindDocument = function (force) {\n    var self = this;\n    // If there are no touch left\n    // unbind the document.\n    if (!Object.keys(self.ids).length || force === true) {\n        self.unbindEvt(document, 'move')\n            .unbindEvt(document, 'end');\n        self.binded = false;\n    }\n};\n\nManager.prototype.getIdentifier = function (evt) {\n    var id;\n    // If no event, simple increment\n    if (!evt) {\n        id = this.index;\n    } else {\n        // Extract identifier from event object.\n        // Unavailable in mouse events so replaced by latest increment.\n        id = evt.identifier === undefined ? evt.pointerId : evt.identifier;\n        if (id === undefined) {\n            id = this.latest || 0;\n        }\n    }\n\n    if (this.ids[id] === undefined) {\n        this.ids[id] = this.index;\n        this.index += 1;\n    }\n\n    // Keep the latest id used in case we're using an unidentified mouseEvent\n    this.latest = id;\n    return this.ids[id];\n};\n\nManager.prototype.removeIdentifier = function (identifier) {\n    var removed = {};\n    for (var id in this.ids) {\n        if (this.ids[id] === identifier) {\n            removed.id = id;\n            removed.identifier = this.ids[id];\n            delete this.ids[id];\n            break;\n        }\n    }\n    return removed;\n};\n\nManager.prototype.onmove = function (evt) {\n    var self = this;\n    self.onAny('move', evt);\n    return false;\n};\n\nManager.prototype.onend = function (evt) {\n    var self = this;\n    self.onAny('end', evt);\n    return false;\n};\n\nManager.prototype.oncancel = function (evt) {\n    var self = this;\n    self.onAny('end', evt);\n    return false;\n};\n\nManager.prototype.onAny = function (which, evt) {\n    var self = this;\n    var id;\n    var processFn = 'processOn' + which.charAt(0).toUpperCase() +\n        which.slice(1);\n    evt = u.prepareEvent(evt);\n    var processColl = function (e, id, coll) {\n        if (coll.ids.indexOf(id) >= 0) {\n            coll[processFn](e);\n            // Mark the event to avoid cleaning it later.\n            e._found_ = true;\n        }\n    };\n    var processEvt = function (e) {\n        id = self.getIdentifier(e);\n        u.map(self.collections, processColl.bind(null, e, id));\n        // If the event isn't handled by any collection,\n        // we need to clean its identifier.\n        if (!e._found_) {\n            self.removeIdentifier(id);\n        }\n    };\n\n    u.map(evt, processEvt);\n\n    return false;\n};\n\n// Cleanly destroy the manager\nManager.prototype.destroy = function () {\n    var self = this;\n    self.unbindDocument(true);\n    self.ids = {};\n    self.index = 0;\n    self.collections.forEach(function(collection) {\n        collection.destroy();\n    });\n    self.off();\n};\n\n// When a collection gets destroyed\n// we clean behind.\nManager.prototype.onDestroyed = function (evt, coll) {\n    var self = this;\n    if (self.collections.indexOf(coll) < 0) {\n        return false;\n    }\n    self.collections.splice(self.collections.indexOf(coll), 1);\n};\n\nvar factory = new Manager();\nreturn {\n    create: function (options) {\n        return factory.create(options);\n    },\n    factory: factory\n};\n\n});",
        "output": "str",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "5bb71f574750f411"
            ]
        ]
    },
    {
        "id": "b3a947ba6d40ea27",
        "type": "http response",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 160,
        "wires": []
    },
    {
        "id": "5bb71f574750f411",
        "type": "http response",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "371430ef417f3297",
        "type": "template",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "ROS INTERFACE",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <title>ROS Joystick Interface</title>\n\n    <!-- Fonts and icons -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/roboto.css\" />\n    <link rel=\"stylesheet\" href=\"/assets/css/font-awesome.min.css\">\n\n    <!-- Material Kit CSS -->\n    <link href=\"/assets/css/material-dashboard.css\" rel=\"stylesheet\"/>\n\n    <script src=\"/assets/js/roslib.min.js\"></script>\n    <script src=\"/assets/js/joystick.js\"></script>\n\n    <!--   Core JS Files   -->\n    <script src=\"/assets/js/core/jquery.min.js\"></script>\n    <script src=\"/assets/js/core/popper.min.js\"></script>\n    <script src=\"/assets/js/core/bootstrap-material-design.min.js\"></script>\n    <script src=\"/assets/js/plugins/default-passive-events.js\"></script>\n    <script src=\"/assets/js/plugins/perfect-scrollbar.jquery.min.js\"></script>\n    <!-- Place this tag in your head or just before your close body tag. -->\n    <script async defer src=\"/assets/js/buttons.js\"></script>\n    <!-- Chartist JS -->\n    <script src=\"/assets/js/plugins/chartist.min.js\"></script>\n    <!--  Notifications Plugin    -->\n    <script src=\"/assets/js/plugins/bootstrap-notify.js\"></script>\n    <!-- Control Center for Material Dashboard: parallax effects, scripts for the example pages etc -->\n    <script src=\"/assets/js/material-dashboard.js?v=2.1.0\"></script>\n    <!-- Material Dashboard DEMO methods, don't include it in your project! -->\n    <script src=\"/assets/demo/demo.js\"></script>\n    <!-- ROS libjs -->\n    <script src=\"/assets/js/eventemitter2.min.js\"></script>\n    <script src=\"/assets/js/roslib.min.js\"></script>\n\n    \n    <!-- Custom CSS -->\n    <style type=\"text/css\">\n      .green-light {\n        animation:\n          greenLight 1s infinite;\n      }\n    \n      @keyframes greenLight {\n        0% {\n          color: #303030;\n        }\n    \n        25% {\n          color: #303030;\n        }\n    \n        50% {\n          color: #4ea752;\n        }\n    \n        75% {\n          color: #303030;\n        }\n    \n        100% {\n          color: #303030;\n        }\n      }\n    \n      .red-light {\n        animation:\n          redLight 1s infinite;\n      }\n    \n      @keyframes redLight {\n        0% {\n          color: #303030;\n        }\n    \n        25% {\n          color: #303030;\n        }\n    \n        50% {\n          color: #da3a36;\n        }\n    \n        75% {\n          color: #303030;\n        }\n    \n        100% {\n          color: #303030;\n        }\n      }\n    \n      .dark-edition .card .danger-flashing .card-icon,\n      .dark-edition .card .danger-flashing .card-text,\n      .dark-edition .card .danger-flashing:not(.card-header-icon):not(.card-header-text),\n      .dark-edition .card.bg-danger,\n      .dark-edition .card.card-rotate.bg-danger .front,\n      .dark-edition .card.card-rotate.bg-danger .back {\n        animation:\n          dangerFlashing 0.75s infinite;\n      }\n    \n      @keyframes dangerFlashing {\n        0% {\n          background: #505050;\n        }\n    \n        25% {\n          background: #505050;\n        }\n    \n        50% {\n          background: #da3a36;\n        }\n    \n        75% {\n          background: #505050;\n        }\n    \n        100% {\n          background: #505050;\n        }\n      }\n    \n      .alert-flashing {\n        animation:\n          alertFlashing 0.5s infinite;\n      }\n    \n      @keyframes alertFlashing {\n        0% {\n          background-color: #1a1a1a;\n        }\n    \n        25% {\n          background-color: #1a1a1a;\n        }\n    \n        50% {\n          background-color: #da3a36;\n        }\n    \n        75% {\n          background-color: #1a1a1a;\n        }\n    \n        100% {\n          background-color: #1a1a1a;\n        }\n      }\n    </style>\n   \n  </head>\n\n  <body class=\"dark-edition\" id=\"main-background\">\n    <div>{{msg.payload}}ffff</div>\n    <div id=\"zone_joystick\" style=\"position: relative;top:100px\"></div>\n\n    <div class=\"wrapper\">\n      <div class=\"main-panel\">\n        <!-- Navbar -->\n        <nav class=\"navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top \">\n          <div class=\"container-fluid\">\n            <div class=\"navbar-wrapper\">\n              <a class=\"navbar-brand\" href=\"javascript:void(0)\">\n                <i id=\"cas-active\" class=\"material-icons red-light\">fiber_manual_record</i>\n                Collision Avoidance System Dashboard\n              </a>\n            </div>\n            <div>\n              <img style='width: 25%; object-fit: contain; float: right; padding-top: 1%; padding-right: 1%' src=\"/assets/img/DA-Logo-FINAL-01-Black-Alpha.png\">\n            </div>\n          </div>\n        </nav>\n        <!-- End Navbar -->\n        <div class=\"content\">\n          <div class=\"container-fluid\">\n            <!-- Main Content -->\n            <div class=\"row\">\n              <div class=\"col-xl-4 col-lg-12\">\n                <div class=\"card card-chart\">\n                  <div id=\"camera-status\" class=\"card-header card-header-warning\">\n                    <h4 class=\"card-title\">Camera Stream</h4>\n                  </div>\n                  <div class=\"card-body\" style=\"padding: 10px\">\n                    <!-- <p class=\"card-category\">Not Connected</p> -->\n                  </div>\n                  <div class=\"card-footer\">\n                    <div id=\"camera-status-desc\" class=\"stats\">\n                      <i class=\"material-icons\">error</i> Not Connected\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-xl-4 col-lg-12\">\n                <div class=\"card card-chart\">\n                  <div id=\"radar-status\" class=\"card-header card-header-warning\">\n                    <h4 class=\"card-title\">RADAR Stream</h4>\n                  </div>\n                  <div class=\"card-body\" style=\"padding: 10px\">\n                    <!-- <p class=\"card-category\">Not Connected</p> -->\n                  </div>\n                  <div class=\"card-footer\">\n                    <div id=\"radar-status-desc\" class=\"stats\">\n                      <i class=\"material-icons\">error</i> Not Connected\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-xl-4 col-lg-12\">\n                <div class=\"card card-chart\">\n                  <div id=\"system-status\" class=\"card-header card-header-warning\">\n                    <h4 class=\"card-title\">Collision Avoidance System</h4>\n                  </div>\n                  <div class=\"card-body\" style=\"padding: 10px\">\n                    <!-- <p class=\"card-category\">Not Connected</p> -->\n                  </div>\n                  <div class=\"card-footer\">\n                    <div id=\"system-status-desc\" class=\"stats\">\n                      <i class=\"material-icons\">error</i> Not Connected\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Pipeline status -->\n            <div class=\"row\">\n              <div class=\"col-xl-3 col-lg-6 col-md-6 col-sm-6\">\n                <div class=\"card card-stats\">\n                  <div id=\"perception_status\" class=\"card-header danger-flashing card-header-icon\">\n                    <div class=\"card-icon\">\n                      <i id=\"perception_icon\" class=\"material-icons\">cancel</i>\n                    </div>\n                    <p class=\"card-category\">Perception Pipeline</p>\n                    <h3 class=\"card-title\"><span id=\"perception_fps\">0</span><small> FPS</small></h3>\n                  </div>\n                  <div class=\"card-footer\">\n                    <div class=\"stats\">\n                      <!-- <i class=\"material-icons text-warning\">warning</i>\n                      <a href=\"#pablo\" class=\"warning-link\">FPS dropped below 0...</a> -->\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-xl-3 col-lg-6 col-md-6 col-sm-6\">\n                <div class=\"card card-stats\">\n                  <div id=\"tracking_fusion_status\" class=\"card-header danger-flashing card-header-icon\">\n                    <div class=\"card-icon\">\n                      <i id=\"tracking_fusion_icon\" class=\"material-icons\">cancel</i>\n                    </div>\n                    <p class=\"card-category\">Tracking and Sensor Fusion Pipeline</p>\n                    <h3 class=\"card-title\"><span id=\"tracking_fusion_fps\">0</span><small> FPS</small></h3>\n                  </div>\n                  <div class=\"card-footer\">\n                    <div class=\"stats\">\n                      <!-- <i class=\"material-icons\">update</i> Just Updated -->\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-xl-3 col-lg-6 col-md-6 col-sm-6\">\n                <div class=\"card card-stats\">\n                  <div id=\"prediction_status\" class=\"card-header danger-flashing card-header-icon\">\n                    <div class=\"card-icon\">\n                      <i id=\"prediction_icon\" class=\"material-icons\">cancel</i>\n                    </div>\n                    <p class=\"card-category\">Trajectory Prediction Pipeline</p>\n                    <h3 class=\"card-title\"><span id=\"prediction_fps\">0</span><small> FPS</small></h3>\n                  </div>\n                  <div class=\"card-footer\">\n                    <div class=\"stats\">\n                      <!-- <i class=\"material-icons text-danger\">error</i>\n                      <a href=\"#pablo\" class=\"danger-link\">Pipeline failure...</a> -->\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-xl-3 col-lg-6 col-md-6 col-sm-6\">\n                <div class=\"card card-stats\">\n                  <div id=\"planning_controls_status\" class=\"card-header danger-flashing card-header-icon\">\n                    <div class=\"card-icon\">\n                      <i id=\"planning_controls_icon\" class=\"material-icons\">cancel</i>\n                    </div>\n                    <p class=\"card-category\">Planning and Controls Pipeline</p>\n                    <h3 class=\"card-title\"><span id=\"planning_controls_fps\">0</span><small> FPS</small></h3>\n                  </div>\n                  <div class=\"card-footer\">\n                    <div class=\"stats\">\n                      <!-- <i class=\"material-icons\">update</i> Just Updated -->\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-lg-6 col-md-12\">\n                <div class=\"card\">\n                  <div class=\"card-header card-header-tabs card-header-success\">\n                    <div class=\"nav-tabs-navigation\">\n                      <div class=\"nav-tabs-wrapper\">\n                        <span class=\"nav-tabs-title\">Visualization</span>\n                        <ul class=\"nav nav-tabs\" data-tabs=\"tabs\">\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" href=\"#left_tab1\" data-toggle=\"tab\" onclick=\"left_tab1_onclick()\">\n                              <i class=\"material-icons\">filter_1</i> Front View\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"#left_tab2\" data-toggle=\"tab\" onclick=\"left_tab2_onclick()\">\n                              <i class=\"material-icons\">filter_2</i> Top View\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"#left_tab4\" data-toggle=\"tab\" onclick=\"left_tab4_onclick()\">\n                              <i class=\"material-icons\">filter_3</i> Left View\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"#left_tab3\" data-toggle=\"tab\" onclick=\"left_tab3_onclick()\">\n                              <i class=\"material-icons\">filter_4</i> Right View\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"card-body\">\n                    <div class=\"tab-content\">\n                      <div class=\"tab-pane active\" id=\"left_tab1\">\n                        <img id=\"left_stream1\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                          <!-- src=\"http://localhost:8080/stream_viewer?topic=/stream1/image\"> -->\n                      </div>\n                      <div class=\"tab-pane\" id=\"left_tab2\">\n                        <img id=\"left_stream2\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                          <!-- src=\"http://localhost:8080/stream_viewer?topic=/stream2/image\"> -->\n                      </div>\n                      <div class=\"tab-pane\" id=\"left_tab3\">\n                        <img id=\"left_stream3\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                          <!-- src=\"http://localhost:8080/stream_viewer?topic=/stream3/image\"> -->\n                      </div>\n                      <div class=\"tab-pane\" id=\"left_tab4\">\n                        <img id=\"left_stream4\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                          <!-- src=\"http://localhost:8080/stream_viewer?topic=/stream4/image\"> -->\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"col-lg-6 col-md-12\">\n                <div class=\"card\">\n                  <div class=\"card-header card-header-tabs card-header-success\">\n                    <div class=\"nav-tabs-navigation\">\n                      <div class=\"nav-tabs-wrapper\">\n                        <span class=\"nav-tabs-title\">Pipelines</span>\n                        <ul class=\"nav nav-tabs\" data-tabs=\"tabs\">\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link active\" href=\"#right_tab1\" data-toggle=\"tab\" onclick=\"right_tab1_onclick()\">\n                              <i class=\"material-icons\">filter_1</i> Perception\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"#right_tab2\" data-toggle=\"tab\" onclick=\"right_tab2_onclick()\">\n                              <i class=\"material-icons\">filter_2</i> Lane Detection\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                          <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"#right_tab3\" data-toggle=\"tab\" onclick=\"right_tab3_onclick()\">\n                              <i class=\"material-icons\">filter_3</i> Planning\n                              <div class=\"ripple-container\"></div>\n                            </a>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"card-body\">\n                    <div class=\"tab-content\">\n                      <div class=\"tab-pane active\" id=\"right_tab1\">\n                        <img id=\"right_stream1\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                      </div>\n                      <div class=\"tab-pane\" id=\"right_tab2\">\n                        <img id=\"right_stream2\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                      </div>\n                      <div class=\"tab-pane\" id=\"right_tab3\">\n                        <img id=\"right_stream3\" style='height: 100%; width: 100%; object-fit: contain'\n                          src=\"/assets/img/placeholder.png\">\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <footer class=\"footer\">\n          <div class=\"container-fluid\">\n            <div class=\"copyright\">\n              Collision Avoidance System Dashboard v1.0\n              <br/> &copy; 2019, Created by\n              <a href=\"https://www.deltaautonomy.github.io\" target=\"_blank\">Delta Autonomy</a>\n              <br/> Robotics Institute, Carnegie Mellon University\n            </div>\n          </div>\n        </footer>\n      </div>\n    </div>\n\n    <!-- ROS interface -->\n    <script type=\"text/javascript\" type=\"text/javascript\">\n\n      // ####################### Commons ########################\n\n      window.onload = function() {\n        console.log('Onload');\n      };\n\n      function duration_to_secs(stamp) {\n        return (stamp.secs * 1e9 + stamp.nsecs) * 1e-9;\n      }\n\n      var initial_date = new Date();\n      var initial_time = initial_date.getTime() / 1000;\n\n      // ################### Sound Alerts ###################\n\n      var audio_collision = new Audio('/assets/alerts/alert2.mp3');\n      var audio_failure = new Audio('/assets/alerts/ding.mp3');\n      var audio_login = new Audio('/assets/alerts/login.mp3');\n      var audio_logout = new Audio('/assets/alerts/logout.mp3');\n\n      function play_alert(audio) {\n        audio.addEventListener('ended', function() {\n          this.currentTime = 0;\n          this.play();\n        }, false);\n        //audio.play();\n      }\n\n      function pause_alert(audio) {\n          audio.pause();\n      }\n\n      // ################### Connecting to ROS ###################\n\n      var rosbridge_url = 'ws://tinh@tinh-VirtualBox:9090';\n      var first_close = true;\n\n      var ros = new ROSLIB.Ros({\n        url : rosbridge_url\n      });\n\n      ros.on('connection', function() {\n        document.getElementById('cas-active').classList.remove('red-light');\n        document.getElementById('cas-active').classList.add('green-light');\n        console.log('Connected to websocket server.');\n        //audio_login.play();\n        first_close = true;\n        left_tab1_onclick();\n        right_tab1_onclick();\n      });\n\n      ros.on('error', function(error) {\n        document.getElementById('cas-active').classList.remove('green-light');\n        document.getElementById('cas-active').classList.add('red-light');\n        console.log('Error connecting to websocket server: ', error);\n      });\n\n      ros.on('close', function() {\n        document.getElementById('cas-active').classList.remove('green-light');\n        document.getElementById('cas-active').classList.add('red-light');\n        console.log('Connection to websocket server closed.');\n        if (first_close) {\n          audio_logout.play();\n          first_close = false;\n        }\n        pause_alert(audio_collision);\n        pause_alert(audio_failure);\n      });\n\n      // Handle ROS connection\n      window.setInterval(function(){\n        if (ros.isConnected) return;\n        console.log(ros.isConnected);\n        ros.connect(rosbridge_url);\n      }, 1000);\n\n      // ##################### Define alerts topics #####################\n\n      var collision_topic = new ROSLIB.Topic({\n        ros: ros, name: '/delta/prediction/collision',\n        messageType: 'delta_msgs/CollisionDetection'\n      });\n\n      var camera_info_topic = new ROSLIB.Topic({\n        ros: ros, name: '/carla/ego_vehicle/camera/rgb/front/camera_info',\n        messageType: 'sensor_msgs/CameraInfo'\n      });\n\n      var radar_topic = new ROSLIB.Topic({\n        ros: ros, name: '/carla/ego_vehicle/radar/tracks',\n        messageType: 'radar_msgs/RadarTrackArray'\n      });\n\n      // ################### Subscribe to alerts topics ###################\n\n      var alerts = {\n        'collision': {'audio': audio_collision, 'last_time': 0.0, 'play_length': 3.0},\n        'failure': {'audio': audio_failure, 'last_time': 0.0, 'play_length': 2.0},\n        'camera': {'last_update_time': 0.0, 'last_time': 0.0, 'play_length': 0.5},\n        'radar': {'last_update_time': 0.0, 'last_time': 0.0, 'play_length': 0.5},\n        'system': {'last_update_time': 0.0, 'last_time': 0.0, 'play_length': 0.5}\n      }\n\n      function stream_success(key) {\n        document.getElementById(key + '-status').classList.remove('card-header-warning');\n        document.getElementById(key + '-status').classList.remove('card-header-danger');\n        document.getElementById(key + '-status').classList.add('card-header-success');\n        document.getElementById(key + '-status-desc').innerHTML = \n          '<i class=\"material-icons\">access_time</i> Running Successfully';\n      }\n\n      function stream_warn(key) {\n        document.getElementById(key + '-status').classList.remove('card-header-danger');\n        document.getElementById(key + '-status').classList.remove('card-header-success'); \n        document.getElementById(key + '-status').classList.add('card-header-warning');\n        document.getElementById(key + '-status-desc').innerHTML = \n          '<i class=\"material-icons\">error</i> Not Connected';\n      }\n\n      function stream_danger(key) {\n        document.getElementById(key + '-status').classList.remove('card-header-success');\n        document.getElementById(key + '-status').classList.remove('card-header-warning');\n        document.getElementById(key + '-status').classList.add('card-header-danger');\n        document.getElementById(key + '-status-desc').innerHTML = \n          '<i class=\"material-icons\">warning</i> Failure Detected';\n      }\n\n      function alerts_handler() {\n        var date = new Date();\n        var time_now = date.getTime() / 1000;\n\n        for (var key in alerts) {\n          time_stop = alerts[key]['last_time'] + alerts[key]['play_length'];\n          if (time_now > time_stop) {\n            switch (key) {\n              case 'collision':\n                document.getElementById('main-background').classList.remove('alert-flashing');\n              case 'failure':\n                pause_alert(alerts[key]['audio']);\n                break;\n              case 'camera':\n              case 'radar':\n              case 'system':\n                stream_success(key);\n                break;\n            }\n          } else {          \n            switch (key) {\n              case 'collision':\n                document.getElementById('main-background').classList.add('alert-flashing');\n              case 'failure':\n                if (ros.isConnected) play_alert(alerts[key]['audio']);\n                break;\n              case 'camera':\n              case 'radar':\n              case 'system':\n                if (!ros.isConnected) stream_warn(key);\n                else stream_danger(key);\n                break;\n            }\n          }\n        }\n      }\n\n      function collision_event(msg) {\n        var ttc = duration_to_secs(msg.time_to_impact);\n        var probability = msg.probability;\n        if (probability > 0.5) {\n          var date = new Date();\n          alerts['collision']['last_time'] = date.getTime() / 1000;\n        }\n      }\n\n      function stream_handler() {\n        var date = new Date();\n        var time_now = date.getTime() / 1000;\n\n        for (var key in alerts) {\n          if (key == 'camera' || key == 'radar') {\n            if (time_now - alerts[key]['last_update_time'] > 2.0) {\n              alerts[key]['last_time'] = time_now;\n              alerts['failure']['last_time'] = time_now;\n            }\n          }\n        }\n      }\n\n      function update_stream(msg, key) {\n        var date = new Date();\n        var time_now = date.getTime() / 1000;\n        alerts[key]['last_update_time'] = time_now;\n      }\n\n      camera_info_topic.subscribe(function(msg) { update_stream(msg, 'camera'); });\n      radar_topic.subscribe(function(msg) { update_stream(msg, 'radar'); });\n\n      // Handle alerts\n      window.setInterval(function(){\n        alerts_handler();\n      }, 500);\n\n      window.setInterval(function(){\n        stream_handler();\n      }, 100);\n\n      collision_topic.subscribe(function(msg) { collision_event(msg); });\n\n      // ################### Define diagnostics topics ###################\n\n      var perception_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/perception/object_detection/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      var lane_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/perception/lane_detection/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      var tracking_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/tracking_fusion/tracker/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      var prediction_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/prediction/ego_vehicle/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      var prediction_oncoming_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/prediction/oncoming_vehicle/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      var planning_diagnostics = new ROSLIB.Topic({\n        ros: ros, name: '/delta/planning_controls/ego_vehicle/diagnostics',\n        messageType: 'diagnostic_msgs/DiagnosticArray'\n      });\n\n      // ################### Subscribe to diagnostics topics ###################\n\n      var update_alpha = 0.75;\n\n      var fps_dict = {\n        'perception': {'limit': 10.0, 'last_time': initial_time, 'count': 0.0, 'delta': 0.0, 'fps': 0.0},\n        'prediction': {'limit': 10.0, 'last_time': initial_time, 'count': 0.0, 'delta': 0.0, 'fps': 0.0},\n        'tracking_fusion': {'limit': 10.0, 'last_time': initial_time, 'count': 0.0, 'delta': 0.0, 'fps': 0.0},\n        'planning_controls': {'limit': 10.0, 'last_time': initial_time, 'count': 0.0, 'delta': 0.0, 'fps': 0.0},\n      };\n\n      function update_fps(msg) {\n        var date = new Date();\n        var pipeline = msg.status[0].hardware_id;\n        for (var i = 0; i < msg.status.length; i++) {\n          fps_dict[pipeline]['delta'] += 1 / parseFloat(msg.status[i].message);\n        }\n        fps_dict[pipeline]['count'] += 1;\n        fps_dict[pipeline]['fps'] = update_alpha * fps_dict[pipeline]['fps'] + \n          (1 - update_alpha) * (fps_dict[pipeline]['count'] / fps_dict[pipeline]['delta']);\n        fps_dict[pipeline]['last_time'] = date.getTime() / 1000;\n        // fps_dict[pipeline]['last_time'] = (msg.header.stamp.secs * 10e9 + msg.header.stamp.nsecs) / 10e9;\n      }\n\n      perception_diagnostics.subscribe(function(msg) { update_fps(msg); });\n      lane_diagnostics.subscribe(function(msg) { update_fps(msg); });\n      tracking_diagnostics.subscribe(function(msg) { update_fps(msg); });\n      prediction_diagnostics.subscribe(function(msg) { update_fps(msg); });\n      prediction_oncoming_diagnostics.subscribe(function(msg) { update_fps(msg); });\n      planning_diagnostics.subscribe(function(msg) { update_fps(msg); });\n\n      // ################### Update FPS in GUI ###################\n\n      function update_status(pipeline, limit) {\n        var date = new Date();\n        var time_now = date.getTime() / 1000;\n        var update_dt = time_now - fps_dict[pipeline]['last_time'];\n        var status = document.getElementById(pipeline + '_status');\n        var icon = document.getElementById(pipeline + '_icon');\n        var fps = fps_dict[pipeline]['fps'];\n\n        if (fps < 2 || update_dt > 2.0) {\n          alerts['system']['last_time'] = time_now;\n          if (update_dt > 2.0) {\n            icon.innerHTML = 'cancel';\n            document.getElementById(pipeline + '_fps').innerHTML = 0;\n          } else {\n            alerts['failure']['last_time'] = time_now;\n            icon.innerHTML = 'error';\n          }\n\n          status.classList.remove('card-header-success');\n          status.classList.remove('card-header-warning');\n          status.classList.add('danger-flashing');\n        } else if (fps < fps_dict[pipeline]['limit']) {\n          status.classList.remove('danger-flashing');\n          status.classList.remove('card-header-success');\n          status.classList.add('card-header-warning');\n          icon.innerHTML = 'warning';\n        } else if (fps >= fps_dict[pipeline]['limit']) {\n          status.classList.remove('danger-flashing');\n          status.classList.remove('card-header-warning');\n          status.classList.add('card-header-success');\n          icon.innerHTML = 'check_circle';\n        }\n      }\n\n      // Update FPS in GUI\n      window.setInterval(function(){\n        const pipelines = Object.keys(fps_dict)\n        for (const pipeline of pipelines) {\n          document.getElementById(pipeline + '_fps').innerHTML = fps_dict[pipeline]['fps'].toFixed();\n          update_status(pipeline)\n        }\n      }, 100);\n\n      // ################### Define image topics ###################\n\n      var rviz_stream1 = new ROSLIB.Topic({\n        ros: ros, name: '/stream1/image/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      var rviz_stream2 = new ROSLIB.Topic({\n        ros: ros, name: '/stream2/image/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      var rviz_stream3 = new ROSLIB.Topic({\n        ros: ros, name: '/stream3/image/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      var rviz_stream4 = new ROSLIB.Topic({\n        ros: ros, name: '/stream4/image/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      var object_detection_topic = new ROSLIB.Topic({\n        ros: ros, name: '/delta/visualization/images/object_detection/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      var lane_detection_topic = new ROSLIB.Topic({\n        ros: ros, name: '/delta/visualization/images/lane_detection/compressed',\n        messageType: 'sensor_msgs/CompressedImage'\n      });\n\n      // ################### Subscribe to image topics ###################\n\n      var left_stream = undefined;\n      var right_stream = undefined;\n\n      function left_tab1_onclick() {\n        console.log('left tab 1');\n        if (left_stream != undefined) left_stream.unsubscribe();\n        left_stream = rviz_stream1;\n        rviz_stream1.subscribe(function(message) {\n          document.getElementById('left_stream1').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function left_tab2_onclick() {\n        console.log('left tab 2');\n        if (left_stream != undefined) left_stream.unsubscribe();\n        left_stream = rviz_stream2;\n        rviz_stream2.subscribe(function(message) {\n          document.getElementById('left_stream2').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function left_tab3_onclick() {\n        console.log('left tab 3');\n        if (left_stream != undefined) left_stream.unsubscribe();\n        left_stream = rviz_stream3;\n        rviz_stream3.subscribe(function(message) {\n          document.getElementById('left_stream3').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function left_tab4_onclick() {\n        console.log('left tab 4');\n        if (left_stream != undefined) left_stream.unsubscribe();\n        left_stream = rviz_stream4;\n        rviz_stream4.subscribe(function(message) {\n          document.getElementById('left_stream4').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function right_tab1_onclick() {\n        console.log('right tab 1');\n        if (right_stream != undefined) right_stream.unsubscribe();\n        right_stream = object_detection_topic;\n        object_detection_topic.subscribe(function(message) {\n          document.getElementById('right_stream1').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function right_tab2_onclick() {\n        console.log('right tab 2');\n        if (right_stream != undefined) right_stream.unsubscribe();\n        right_stream = lane_detection_topic;\n        lane_detection_topic.subscribe(function(message) {\n          document.getElementById('right_stream2').src = \"data:image/jpg;base64,\" + message.data;\n        });\n      }\n\n      function right_tab3_onclick() {\n        console.log('right tab 3');\n        if (right_stream != undefined) right_stream.unsubscribe();\n        // right_stream = object_detection_topic;\n        // object_detection_topic.subscribe(function(message) {\n        // // console.log('Received message on ' + object_detection_topic.name + ': ');\n        //   document.getElementById('right_stream3').src = \"data:image/jpg;base64,\" + message.data;\n        // });\n      }\n\n    </script>\n\n    <!-- UI stuff -->\n    <script>\n      $(document).ready(function() {\n        $().ready(function() {\n          $sidebar = $('.sidebar');\n          $sidebar_img_container = $sidebar.find('.sidebar-background');\n          $full_page = $('.full-page');\n          $sidebar_responsive = $('body > .navbar-collapse');\n          window_width = $(window).width();\n\n          $('.fixed-plugin a').click(function(event) {\n            // Alex if we click on switch, stop propagation of the event, so the dropdown will not be hide, otherwise we set the  section active\n            if ($(this).hasClass('switch-trigger')) {\n              if (event.stopPropagation) {\n                event.stopPropagation();\n              } else if (window.event) {\n                window.event.cancelBubble = true;\n              }\n            }\n          });\n\n          $('.fixed-plugin .active-color span').click(function() {\n            $full_page_background = $('.full-page-background');\n\n            $(this).siblings().removeClass('active');\n            $(this).addClass('active');\n\n            var new_color = $(this).data('color');\n\n            if ($sidebar.length != 0) {\n              $sidebar.attr('data-color', new_color);\n            }\n\n            if ($full_page.length != 0) {\n              $full_page.attr('filter-color', new_color);\n            }\n\n            if ($sidebar_responsive.length != 0) {\n              $sidebar_responsive.attr('data-color', new_color);\n            }\n          });\n\n          $('.fixed-plugin .background-color .badge').click(function() {\n            $(this).siblings().removeClass('active');\n            $(this).addClass('active');\n\n            var new_color = $(this).data('background-color');\n\n            if ($sidebar.length != 0) {\n              $sidebar.attr('data-background-color', new_color);\n            }\n          });\n\n          $('.fixed-plugin .img-holder').click(function() {\n            $full_page_background = $('.full-page-background');\n\n            $(this).parent('li').siblings().removeClass('active');\n            $(this).parent('li').addClass('active');\n\n\n            var new_image = $(this).find(\"img\").attr('src');\n\n            if ($sidebar_img_container.length != 0 && $('.switch-sidebar-image input:checked').length != 0) {\n              $sidebar_img_container.fadeOut('fast', function() {\n                $sidebar_img_container.css('background-image', 'url(\"' + new_image + '\")');\n                $sidebar_img_container.fadeIn('fast');\n              });\n            }\n\n            if ($full_page_background.length != 0 && $('.switch-sidebar-image input:checked').length != 0) {\n              var new_image_full_page = $('.fixed-plugin li.active .img-holder').find('img').data('src');\n\n              $full_page_background.fadeOut('fast', function() {\n                $full_page_background.css('background-image', 'url(\"' + new_image_full_page + '\")');\n                $full_page_background.fadeIn('fast');\n              });\n            }\n\n            if ($('.switch-sidebar-image input:checked').length == 0) {\n              var new_image = $('.fixed-plugin li.active .img-holder').find(\"img\").attr('src');\n              var new_image_full_page = $('.fixed-plugin li.active .img-holder').find('img').data('src');\n\n              $sidebar_img_container.css('background-image', 'url(\"' + new_image + '\")');\n              $full_page_background.css('background-image', 'url(\"' + new_image_full_page + '\")');\n            }\n\n            if ($sidebar_responsive.length != 0) {\n              $sidebar_responsive.css('background-image', 'url(\"' + new_image + '\")');\n            }\n          });\n\n          $('.switch-sidebar-image input').change(function() {\n            $full_page_background = $('.full-page-background');\n\n            $input = $(this);\n\n            if ($input.is(':checked')) {\n              if ($sidebar_img_container.length != 0) {\n                $sidebar_img_container.fadeIn('fast');\n                $sidebar.attr('data-image', '#');\n              }\n\n              if ($full_page_background.length != 0) {\n                $full_page_background.fadeIn('fast');\n                $full_page.attr('data-image', '#');\n              }\n\n              background_image = true;\n            } else {\n              if ($sidebar_img_container.length != 0) {\n                $sidebar.removeAttr('data-image');\n                $sidebar_img_container.fadeOut('fast');\n              }\n\n              if ($full_page_background.length != 0) {\n                $full_page.removeAttr('data-image', '#');\n                $full_page_background.fadeOut('fast');\n              }\n\n              background_image = false;\n            }\n          });\n\n          $('.switch-sidebar-mini input').change(function() {\n            $body = $('body');\n\n            $input = $(this);\n\n            if (md.misc.sidebar_mini_active == true) {\n              $('body').removeClass('sidebar-mini');\n              md.misc.sidebar_mini_active = false;\n\n              $('.sidebar .sidebar-wrapper, .main-panel').perfectScrollbar();\n\n            } else {\n\n              $('.sidebar .sidebar-wrapper, .main-panel').perfectScrollbar('destroy');\n\n              setTimeout(function() {\n                $('body').addClass('sidebar-mini');\n\n                md.misc.sidebar_mini_active = true;\n              }, 300);\n            }\n\n            // we simulate the window Resize so the charts will get updated in realtime.\n            var simulateWindowResize = setInterval(function() {\n              window.dispatchEvent(new Event('resize'));\n            }, 180);\n\n            // we stop the simulation of Window Resize after the animations are completed\n            setTimeout(function() {\n              clearInterval(simulateWindowResize);\n            }, 1000);\n\n          });\n        });\n      });\n    </script>\n\n    <script type=\"text/javascript\">\n      cmd_vel_listener = new ROSLIB.Topic({\n        ros : ros,\n        name : \"/cmd_vel\",\n        messageType : 'geometry_msgs/Twist'\n      });\n\n      move = function (linear, angular) {\n        var twist = new ROSLIB.Message({\n          linear: {\n            x: linear,\n            y: 0,\n            z: 0\n          },\n          angular: {\n            x: 0,\n            y: 0,\n            z: angular\n          }\n        });\n        cmd_vel_listener.publish(twist);\n      }\n\n\n      createJoystick = function () {\n      var options = {\n        zone: document.getElementById('zone_joystick'),\n        threshold: 0.1,\n        position: { left: 50 + '%' },\n        mode: 'static',\n        size: 150,\n        color: '#000000',\n      };\n      manager = nipplejs.create(options);\n\n      linear_speed = 0;\n      angular_speed = 0;\n\n      self.manager.on('start', function (event, nipple) {\n        console.log(\"Movement start\");\n      });\n\n      self.manager.on('move', function (event, nipple) {\n        console.log(\"Moving\");\n        //console.log(event)\n        //console.log(nipple)\n        max_linear = 0.5; // m/s\n        max_angular = 1.0; // rad/s\n        max_distance = 25.0; // pixels;\n        linear_speed = Math.sin(nipple.angle.radian) * max_linear * nipple.distance/max_distance;\n        angular_speed = -Math.cos(nipple.angle.radian) * max_angular * nipple.distance/max_distance;\n      \n        console.log(linear_speed)\n        console.log(angular_speed)\n        self.move(linear_speed, angular_speed)\n      });\n\n      self.manager.on('end', function () {\n        console.log(\"Movement end\");\n        self.move(0, 0);\n      });\n    }\n    window.onload = function () {\n      createJoystick();\n    }\n    </script>\n  </body>\n</html>\n",
        "output": "str",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "b3a947ba6d40ea27"
            ]
        ]
    },
    {
        "id": "4910a18205483eab",
        "type": "http in",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "url": "/alerts/logout.mp3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "f0645ab4d8eb770a"
            ]
        ]
    },
    {
        "id": "f0645ab4d8eb770a",
        "type": "file in",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "filename": "nodered/logout.mp3",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "binary",
        "allProps": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "baf1ce3facda4e1b"
            ]
        ]
    },
    {
        "id": "baf1ce3facda4e1b",
        "type": "http response",
        "z": "4af6b84a6d08816d",
        "d": true,
        "g": "3c7f51c94250a160",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 280,
        "wires": []
    },
    {
        "id": "f087f74ea8113b1e",
        "type": "function",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nVariableSystem.ProjectPalletizer=true;\n\nvar Sql_link = \"db/Palletizer_Design.db\"\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "d1023c457bb49408"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "785daea97e6a78be",
        "type": "inject",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "f087f74ea8113b1e",
                "15a2771c691c4cf2"
            ]
        ]
    },
    {
        "id": "d1023c457bb49408",
        "type": "function",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar Variables = global.get(\"Variable\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\n            }\n        }\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                node.warn(data.value);\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[1][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "15a2771c691c4cf2",
        "type": "Config_Web Begin",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "2905b528b17c4341"
            ]
        ]
    },
    {
        "id": "a5f09c78fc170262",
        "type": "plc_omron",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "PLC OMRON - PALLETIZER",
        "host": "192.168.251.5",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1020",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "true",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 840,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2905b528b17c4341",
        "type": "Config_Web Title",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "title": "SCADA PAGE",
        "x": 500,
        "y": 200,
        "wires": [
            [
                "3a184488f1993074"
            ]
        ]
    },
    {
        "id": "3a184488f1993074",
        "type": "Config_Web Page",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "457b9d",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "100",
        "x": 740,
        "y": 200,
        "wires": [
            [
                "95dc48788ac09ff6"
            ]
        ]
    },
    {
        "id": "8bee56e6e288c48f",
        "type": "Config_Web Title",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "title": "ALARM",
        "x": 480,
        "y": 240,
        "wires": [
            [
                "7e2429cc8657202a"
            ]
        ]
    },
    {
        "id": "7e2429cc8657202a",
        "type": "Config_Web Page_Call",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "5c538180fb669551"
            ]
        ]
    },
    {
        "id": "5c538180fb669551",
        "type": "Config_Web Page_Call",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 950,
        "y": 240,
        "wires": [
            [
                "c12e303cba35ded2"
            ]
        ]
    },
    {
        "id": "c12e303cba35ded2",
        "type": "Config_Web Title",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "title": "LOG REPORT",
        "x": 500,
        "y": 280,
        "wires": [
            [
                "6764c64d252fa77c"
            ]
        ]
    },
    {
        "id": "6764c64d252fa77c",
        "type": "Config_Web Page_Call",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "5b0b0abdb3fae841"
            ]
        ]
    },
    {
        "id": "5b0b0abdb3fae841",
        "type": "Config_Web Page_Call",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 940,
        "y": 280,
        "wires": [
            [
                "9b1f44e76ab5699d"
            ]
        ]
    },
    {
        "id": "9b1f44e76ab5699d",
        "type": "Config_Web Title",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "title": "USER MANAGER",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "e588074e5fdec97a"
            ]
        ]
    },
    {
        "id": "e588074e5fdec97a",
        "type": "Config_Web Page_Call",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 780,
        "y": 320,
        "wires": [
            [
                "04d6f17176df09ae"
            ]
        ]
    },
    {
        "id": "04d6f17176df09ae",
        "type": "Config_Web Title",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "title": "MEMONIC PALLETIZER",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "7b14152e0be266c2"
            ]
        ]
    },
    {
        "id": "7b14152e0be266c2",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 620,
        "y": 400,
        "wires": [
            [
                "b3d7c1ae8dc1eeab"
            ]
        ]
    },
    {
        "id": "b3d7c1ae8dc1eeab",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - BitAdjust",
        "indexPLC": "1",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 920,
        "y": 400,
        "wires": [
            [
                "4710db08cf145d23"
            ]
        ]
    },
    {
        "id": "4710db08cf145d23",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - WordDisplay",
        "indexPLC": "1",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "79976f9f80e8b242"
            ]
        ]
    },
    {
        "id": "79976f9f80e8b242",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - WordAdjust",
        "indexPLC": "1",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 950,
        "y": 440,
        "wires": [
            [
                "9656c064bce7d7f7"
            ]
        ]
    },
    {
        "id": "9656c064bce7d7f7",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 610,
        "y": 480,
        "wires": [
            [
                "5017c1ede6ee76da"
            ]
        ]
    },
    {
        "id": "5017c1ede6ee76da",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - DWordDisplay",
        "indexPLC": "1",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "179eb98a6ffd2e7f"
            ]
        ]
    },
    {
        "id": "179eb98a6ffd2e7f",
        "type": "Config_Web Memonic",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "PALLETIZER - DWordAdjust",
        "indexPLC": "1",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "bd7e56dcc9b950dd"
            ]
        ]
    },
    {
        "id": "bd7e56dcc9b950dd",
        "type": "Config_Web End",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "port": "8000",
        "x": 530,
        "y": 620,
        "wires": [
            [
                "6936879ffa70f5f5",
                "e7b319658c5a9ba8"
            ]
        ]
    },
    {
        "id": "6936879ffa70f5f5",
        "type": "file",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e7b319658c5a9ba8",
        "type": "file",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 880,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f16871e16c9ee91c",
        "type": "inject",
        "z": "6585409d00105523",
        "g": "cd22916470cf55ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "c8c79e3e5fc5a012"
            ]
        ]
    },
    {
        "id": "c8c79e3e5fc5a012",
        "type": "function",
        "z": "6585409d00105523",
        "g": "cd22916470cf55ce",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "3d3b54c2e8972963"
            ]
        ]
    },
    {
        "id": "3d3b54c2e8972963",
        "type": "debug",
        "z": "6585409d00105523",
        "g": "cd22916470cf55ce",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "95dc48788ac09ff6",
        "type": "Config_Web Page",
        "z": "6585409d00105523",
        "g": "2a96d360fec28a0d",
        "name_page": "3D",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Robot_3D",
        "scale": "100",
        "x": 940,
        "y": 200,
        "wires": [
            [
                "8bee56e6e288c48f"
            ]
        ]
    },
    {
        "id": "8093155592a73bd7",
        "type": "function",
        "z": "6585409d00105523",
        "name": "function 13",
        "func": "\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nVariable.WordAdjust[0][2]=90\nmsg.payload = Variable.WordAdjust\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 760,
        "wires": [
            [
                "6d46741b66da5016"
            ]
        ]
    },
    {
        "id": "8a64591dae89a29d",
        "type": "inject",
        "z": "6585409d00105523",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 760,
        "wires": [
            [
                "8093155592a73bd7"
            ]
        ]
    },
    {
        "id": "6d46741b66da5016",
        "type": "debug",
        "z": "6585409d00105523",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 760,
        "wires": []
    },
    {
        "id": "4cabc5d6cbf7223f",
        "type": "function",
        "z": "6585409d00105523",
        "name": "function 14",
        "func": "\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nVariable.WordAdjust[0][2]=180\nmsg.payload = Variable.WordAdjust\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "1165c900200d2edc"
            ]
        ]
    },
    {
        "id": "4570de6105f20a97",
        "type": "inject",
        "z": "6585409d00105523",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 820,
        "wires": [
            [
                "4cabc5d6cbf7223f"
            ]
        ]
    },
    {
        "id": "1165c900200d2edc",
        "type": "debug",
        "z": "6585409d00105523",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 820,
        "wires": []
    },
    {
        "id": "b6cef306e6035d21",
        "type": "function",
        "z": "6585409d00105523",
        "name": "function 15",
        "func": "if (parseInt('1')) {\n    node.warn('123123123');\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 960,
        "wires": [
            [
                "c2518066f1ce9298"
            ]
        ]
    },
    {
        "id": "0a961498664fe68a",
        "type": "inject",
        "z": "6585409d00105523",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 960,
        "wires": [
            [
                "b6cef306e6035d21"
            ]
        ]
    },
    {
        "id": "c2518066f1ce9298",
        "type": "debug",
        "z": "6585409d00105523",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "fea201fd84be0172",
        "type": "file in",
        "z": "6585409d00105523",
        "name": "",
        "filename": "config/default.json",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 1060,
        "wires": [
            [
                "d2fb7418865bc925"
            ]
        ]
    },
    {
        "id": "c191608f5de2c94a",
        "type": "inject",
        "z": "6585409d00105523",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1060,
        "wires": [
            [
                "fea201fd84be0172"
            ]
        ]
    },
    {
        "id": "30e96f4fb798191f",
        "type": "sqlite",
        "z": "6585409d00105523",
        "mydb": "89d1985a326c08dc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "3D",
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "85e0ee6c677e1ef7"
            ]
        ]
    },
    {
        "id": "d2fb7418865bc925",
        "type": "function",
        "z": "6585409d00105523",
        "name": "Write DB",
        "func": "let TempData = msg.payload\nmsg.topic = `INSERT INTO UploadFile (Name, Data) VALUES ($Name, $Data)`\nmsg.payload = [\"Data1\", TempData]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1060,
        "wires": [
            [
                "30e96f4fb798191f"
            ]
        ]
    },
    {
        "id": "85e0ee6c677e1ef7",
        "type": "debug",
        "z": "6585409d00105523",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1060,
        "wires": []
    },
    {
        "id": "766bf5e872620542",
        "type": "inject",
        "z": "6585409d00105523",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fbf70f22b52b67f6",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "name": "function 1",
        "func": "\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nVariable.WordAdjust[0][2]=90\nmsg.payload = Variable.WordAdjust\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1140,
        "wires": [
            [
                "a09e225d026bcd23"
            ]
        ]
    },
    {
        "id": "78a9199c379787b3",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 1140,
        "wires": [
            [
                "fbf70f22b52b67f6"
            ]
        ]
    },
    {
        "id": "a09e225d026bcd23",
        "type": "debug",
        "z": "d0e9f96fb74481c8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0e460a21f6b3d1d8",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "name": "GET API Y",
        "url": "/Chart_FH_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1420,
        "y": 240,
        "wires": [
            [
                "de98bb5bd64570e3"
            ]
        ]
    },
    {
        "id": "de98bb5bd64570e3",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 240,
        "wires": [
            [
                "690ec5fcc97899c1"
            ]
        ]
    },
    {
        "id": "690ec5fcc97899c1",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 240,
        "wires": []
    },
    {
        "id": "cd667a088f8c74c1",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "name": "GET API Distance",
        "url": "/Chart_FH_Distance",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1450,
        "y": 300,
        "wires": [
            [
                "44b82c1029f3737e"
            ]
        ]
    },
    {
        "id": "44b82c1029f3737e",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 300,
        "wires": [
            [
                "e9c2e2c8c3d56210"
            ]
        ]
    },
    {
        "id": "e9c2e2c8c3d56210",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 300,
        "wires": []
    },
    {
        "id": "66fa93956aaeade8",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "name": "GET API Pick Delay",
        "url": "/Chart_Speed_Pick_Delay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1450,
        "y": 680,
        "wires": [
            [
                "8a3288474f9deca0"
            ]
        ]
    },
    {
        "id": "8a3288474f9deca0",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Pick_Delay')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 680,
        "wires": [
            [
                "88222d30fd9c7745"
            ]
        ]
    },
    {
        "id": "88222d30fd9c7745",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 680,
        "wires": []
    },
    {
        "id": "8d5d877d5604c1f5",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "name": "GET API PLACE DELAY",
        "url": "/Chart_Speed_Place_Delay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 1000,
        "wires": [
            [
                "86ee65a0e3a9459e"
            ]
        ]
    },
    {
        "id": "3f4ea71428470d28",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0e4790e407e97a23",
        "type": "file in",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Read Config",
        "filename": "config/default_Sanofi_Line2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "3cf3a9f435b758ce",
                "a211d3e187f21bdb"
            ]
        ]
    },
    {
        "id": "3cf3a9f435b758ce",
        "type": "debug",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 200,
        "wires": []
    },
    {
        "id": "a211d3e187f21bdb",
        "type": "file",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 590,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "14762cf8aff0c1d0",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "ccd453da1d616fc6",
                "ac650ad9b88f8f7a"
            ]
        ]
    },
    {
        "id": "ccd453da1d616fc6",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HK_PG.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "eac05351215b2606",
                "dc6276328cba9bec"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "f109a5f22704f527",
        "type": "plc_omron",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "PLC OMRON - NX102",
        "host": "192.168.3.9",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "false",
        "PLC_Interval": "700",
        "PLC_Length_ReadWrite": "3000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "200",
        "PLC_WordStartBitDisplay": "200",
        "PLC_LengthOfWordBitDisplay": "50",
        "PLC_WordStartBitAdjust": "250",
        "PLC_LengthOfWordBitAdjust": "50",
        "PLC_WordStartWordDisplay": "300",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "500",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "700",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "750",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "03b3bed5c201745c"
            ]
        ]
    },
    {
        "id": "8ca2635ba246cbf7",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "eac05351215b2606"
            ]
        ]
    },
    {
        "id": "4ffe4a59cbdc03be",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 330,
        "y": 320,
        "wires": [
            [
                "eac05351215b2606"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "03b3bed5c201745c",
        "type": "debug",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "e602812e741bbf2c",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "eac05351215b2606"
            ]
        ]
    },
    {
        "id": "ac650ad9b88f8f7a",
        "type": "Config_Web Begin",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "x": 300,
        "y": 480,
        "wires": [
            [
                "8c30bc6704553758"
            ]
        ]
    },
    {
        "id": "8c30bc6704553758",
        "type": "Config_Web Title",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "title": "SCADA PAGE",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "7c2e30e931591f9a"
            ]
        ]
    },
    {
        "id": "7c2e30e931591f9a",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "SCADA",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 720,
        "y": 480,
        "wires": [
            [
                "88ad2a4a5a73957d"
            ]
        ]
    },
    {
        "id": "5d02ac71e75d294d",
        "type": "Config_Web End",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "port": "8000",
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "88c517e24e470974",
                "d3390266b239ecd4"
            ]
        ]
    },
    {
        "id": "962afab19a7329b6",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NEW PAGE",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Scada2",
        "scale": "100",
        "x": 1110,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "dc6276328cba9bec",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\n\nvar SetMaxElementChart = 45\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        if (data.NameCommand === 'VNC_Connect') {\n            VariableSystem.COMMUNICATION_VNC[data.value].connect = true\n            node.warn(VariableSystem.COMMUNICATION_VNC[data.value]);\n        }\n        if (data.NameCommand === 'VNC_Disconnect') {\n            VariableSystem.COMMUNICATION_VNC[data.value].disconnect = true\n        }\n        \n        //CHART=====================================================================\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ResetChartFH') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_FH', tempData.slice())\n                global.set('Chart_Index_FH', 0)\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n            }\n            if (data.tag === 'ResetChartSpeed') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        Value2: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Pick_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n                global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Place_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n                global.set('Chart_Data_Speed_IO', tempData.slice())\n                global.set('Chart_Index_Speed_IO', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n                global.set('Chart_Data_Speed_PP', tempData.slice())\n                global.set('Chart_Index_Speed_PP', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n                global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n                global.set('Chart_Index_Speed_PlacePick', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n\n                global.set('Chart_Data_Speed_Bag', tempData.slice())\n                global.set('Chart_Index_Speed_Bag', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n                global.set('Chart_Data_Speed_DelayPlace', tempData.slice())\n                global.set('Chart_Index_Speed_DelayPlace', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_DelayPlace', global.get('Chart_Data_Speed_DelayPlace'))\n            }\n            if (data.tag === 'ReSendChart') {\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n            }\n        };\n        //CHART=====================================================================\n\n    });\n\n    //VNC\n    for (let i = 0; i < 10; i++) {\n        socket.on('mouse_vnc_' + i, function (evnt) {\n            if (VariableSystem.COMMUNICATION_VNC[i]) {\n                VariableSystem.COMMUNICATION_VNC[i].vnc.sendPointerEvent(evnt.x, evnt.y, evnt.button);\n            }\n        });\n        // socket.on('keyboard_vnc_'+i, function (evnt) {\n        //     if (VariableSystem.COMMUNICATION_VNC[i]) {\n        //         VariableSystem.COMMUNICATION_VNC[i].sendKeyEvent(0, 1);\n        //     }\n        // });\n        socket.on('disconnect_vnc_' + i, function () {\n            // disconnectClient(socket);\n            node.warn('Client disconnected');\n        });\n    }\n})\n// //CHART=====================================================================\n// //Initial\n// let tempData = []\n// for (var i = 1; i <= SetMaxElementChart; i++) {\n//     tempData.push({\n//         Value: null,\n//         Value2: null,\n//         TimeCreate: ''\n//     });\n// }\n// global.set('Chart_Data', tempData.slice())\n// global.set('Chart_Index', 0)\n// VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n\n// global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Pick_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n// global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Place_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n// global.set('Chart_Data_Speed_IO', tempData.slice())\n// global.set('Chart_Index_Speed_IO', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n// global.set('Chart_Data_Speed_PP', tempData.slice())\n// global.set('Chart_Index_Speed_PP', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n// global.set('Chart_Data_Speed_Bag', tempData.slice())\n// global.set('Chart_Index_Speed_Bag', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n// var Old_FH_X = Variable.WordDisplay[1][4]\n// var Old_FH_Y = Variable.WordDisplay[1][5]\n// var Old_Distance = Variable.WordDisplay[1][43]\n\n// var Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n// var Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n// var Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n// var Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n// var Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n// var Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n// var Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n// var Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n// var count = 0\n// //SCAN\n// function fnTimer() {\n//     //FH\n//     if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n//         Old_FH_X = Variable.WordDisplay[1][4]\n//         Old_FH_Y = Variable.WordDisplay[1][5]\n\n//         let tempData = global.get('Chart_Data')\n//         let tempIndex = global.get('Chart_Index')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             FH_X: Old_FH_X,\n//             FH_Y: Old_FH_Y,\n//             Distance: Variable.WordDisplay[1][43],\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data', tempData.slice())\n//         global.set('Chart_Index', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_FH', tempData)\n//     }\n//     //Check Speed Pick Y\n//     if ((Variable.WordDisplay[1][49] !== Old_CheckSpeed_Pick_Y)) {\n//         Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n//         Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n\n//         let tempData = global.get('Chart_Data_Speed_Pick_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Pick_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Pick_Y,\n//             Value2: Old_CheckSpeed_DelayPick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Pick_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\n//     }\n//     //Check Speed Place Y + Delay At Place\n//     if ((Variable.WordDisplay[1][45] !== Old_CheckSpeed_Place_Y)) {\n//         Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n//         Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n\n//         let tempData = global.get('Chart_Data_Speed_Place_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Place_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Place_Y,\n//             Value2: Old_CheckSpeed_DelayPlace,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Place_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\n//     }\n//     //Check Speed IO\n//     if ((Variable.WordDisplay[1][46] !== Old_CheckSpeed_In_Out)) {\n//         Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n\n//         let tempData = global.get('Chart_Data_Speed_IO')\n//         let tempIndex = global.get('Chart_Index_Speed_IO')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_In_Out,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_IO', tempData.slice())\n//         global.set('Chart_Index_Speed_IO', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_IO', tempData)\n//     }\n//     //Check Speed PP\n//     if ((Variable.WordDisplay[1][48] !== Old_CheckSpeed_PP)) {\n//         Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n\n//         let tempData = global.get('Chart_Data_Speed_PP')\n//         let tempIndex = global.get('Chart_Index_Speed_PP')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PP,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PP', tempData.slice())\n//         global.set('Chart_Index_Speed_PP', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PP', tempData)\n//     }\n//     //Check Speed Place 2 Pick Bag 1\n//     if ((Variable.WordDisplay[1][50] !== Old_CheckSpeed_PlacePick)) {\n//         Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n\n//         let tempData = global.get('Chart_Data_Speed_PlacePick')\n//         let tempIndex = global.get('Chart_Index_Speed_PlacePick')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PlacePick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n//         global.set('Chart_Index_Speed_PlacePick', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', tempData)\n//     }\n\n//     //Check Speed Bag\n//     if ((Variable.WordDisplay[1][33] !== Old_CheckSpeed_Bag)) {\n//         Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n//         let tempData = global.get('Chart_Data_Speed_Bag')\n//         let tempIndex = global.get('Chart_Index_Speed_Bag')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Bag,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Bag', tempData.slice())\n//         global.set('Chart_Index_Speed_Bag', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Bag', tempData)\n//     }\n\n\n//     count = count + 1\n//     if (count > 99999) { count = 0 }\n//     node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n// }\n// var myInitial = setInterval(fnTimer, 300);\n// //CHART=====================================================================\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 420,
        "wires": [
            [
                "9c64ebb53ee08f73"
            ]
        ]
    },
    {
        "id": "f91882196a763cda",
        "type": "Config_Web Title",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "title": "ALARM",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "b4bedb3591d83f42"
            ]
        ]
    },
    {
        "id": "b4bedb3591d83f42",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 790,
        "y": 640,
        "wires": [
            [
                "200e9f7347678bc9"
            ]
        ]
    },
    {
        "id": "200e9f7347678bc9",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1050,
        "y": 640,
        "wires": [
            [
                "1d973259e3cf3e21"
            ]
        ]
    },
    {
        "id": "35d61efb44c4f025",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1040,
        "y": 700,
        "wires": [
            [
                "e9a2fe497a2350a2"
            ]
        ]
    },
    {
        "id": "dc2f9e04421e14e0",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 820,
        "y": 700,
        "wires": [
            [
                "35d61efb44c4f025"
            ]
        ]
    },
    {
        "id": "1d973259e3cf3e21",
        "type": "Config_Web Title",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "title": "LOG REPORT",
        "x": 580,
        "y": 700,
        "wires": [
            [
                "dc2f9e04421e14e0"
            ]
        ]
    },
    {
        "id": "e9a2fe497a2350a2",
        "type": "Config_Web Title",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "title": "USER MANAGER",
        "x": 590,
        "y": 760,
        "wires": [
            [
                "58f6b009566aada4"
            ]
        ]
    },
    {
        "id": "58f6b009566aada4",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 860,
        "y": 760,
        "wires": [
            [
                "f4c29e5f11ba2f69"
            ]
        ]
    },
    {
        "id": "8f8c834f5564da33",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "CHART FH",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "457b9d",
        "backgroundImage": "",
        "idPage": "Scada3",
        "scale": "100",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "b4f9f3c6554dad2b"
            ]
        ]
    },
    {
        "id": "e41b5bf1b715e631",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - BitAdjust",
        "indexPLC": "2",
        "word_start": "250",
        "length_word": "50",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "a94bf4746b41aa1a"
            ]
        ]
    },
    {
        "id": "f4c29e5f11ba2f69",
        "type": "Config_Web Title",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "title": "MEMONIC NJ",
        "x": 580,
        "y": 820,
        "wires": [
            [
                "448396e11bdd1194"
            ]
        ]
    },
    {
        "id": "448396e11bdd1194",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - BitDisplay",
        "indexPLC": "2",
        "word_start": "200",
        "length_word": "50",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 830,
        "y": 820,
        "wires": [
            [
                "e41b5bf1b715e631"
            ]
        ]
    },
    {
        "id": "a94bf4746b41aa1a",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - WordDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 840,
        "y": 880,
        "wires": [
            [
                "8b7bbce3617b6f7a"
            ]
        ]
    },
    {
        "id": "8b7bbce3617b6f7a",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - WordAdjust",
        "indexPLC": "2",
        "word_start": "500",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "1482af6a4a0f7760"
            ]
        ]
    },
    {
        "id": "1482af6a4a0f7760",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - DWordDisplay",
        "indexPLC": "2",
        "word_start": "700",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 840,
        "y": 940,
        "wires": [
            [
                "a4e6c17b6176f318"
            ]
        ]
    },
    {
        "id": "a4e6c17b6176f318",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - DWordAdjust",
        "indexPLC": "2",
        "word_start": "750",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1140,
        "y": 940,
        "wires": [
            [
                "e4d7dea5ca506a80"
            ]
        ]
    },
    {
        "id": "d9322098ac175f68",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "CHART SPEED",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1700",
        "height": "1000",
        "backgroundColor": "rgb(92 189 210)",
        "backgroundImage": "",
        "idPage": "Scada4",
        "scale": "100",
        "x": 300,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "b4f9f3c6554dad2b",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "CHART SPEED YY",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1700",
        "height": "1000",
        "backgroundColor": "457b9d",
        "backgroundImage": "",
        "idPage": "Scada5",
        "scale": "100",
        "x": 1170,
        "y": 540,
        "wires": [
            [
                "f91882196a763cda"
            ]
        ]
    },
    {
        "id": "9c64ebb53ee08f73",
        "type": "link out",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "99d9d2036841d7d8"
        ],
        "x": 855,
        "y": 420,
        "wires": []
    },
    {
        "id": "88ad2a4a5a73957d",
        "type": "Config_Web Page",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "ROBOTS",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Robot1",
        "scale": "100",
        "x": 920,
        "y": 480,
        "wires": [
            [
                "8f8c834f5564da33"
            ]
        ]
    },
    {
        "id": "786e43c013a3d5b6",
        "type": "vnc_setup",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "",
        "host": "192.168.3.10",
        "port": 5900,
        "password": "123456",
        "indexVNC": "1",
        "fps": 1,
        "checkbox_copyRect": true,
        "checkbox_zrle": true,
        "checkbox_hextile": true,
        "checkbox_raw": true,
        "checkbox_pseudoDesktopSize": false,
        "checkbox_pseudoCursor": false,
        "checkbox_corre": false,
        "checkbox_pseudoQemuAudio": false,
        "checkbox_pseudoQemuPointerMotionChange": false,
        "checkbox_rre": false,
        "checkbox_tight": false,
        "x": 690,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e4d7dea5ca506a80",
        "type": "Config_Web Memonic",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "NJ - Word_Timer",
        "indexPLC": "2",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 840,
        "y": 1000,
        "wires": [
            [
                "ee71915b87509cd1"
            ]
        ]
    },
    {
        "id": "8af113a0b64f8c62",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "g": "794b9132d61db2a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 375,
        "y": 60,
        "wires": [
            [
                "1bc7c69831d072a7"
            ]
        ]
    },
    {
        "id": "1bc7c69831d072a7",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "794b9132d61db2a9",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 60,
        "wires": [
            [
                "f1b2b553ba6c8688"
            ]
        ]
    },
    {
        "id": "f1b2b553ba6c8688",
        "type": "debug",
        "z": "d0e9f96fb74481c8",
        "g": "794b9132d61db2a9",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 855,
        "y": 60,
        "wires": []
    },
    {
        "id": "b42404b94bb46800",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "GET API X",
        "url": "/Chart_FH_X",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1420,
        "y": 180,
        "wires": [
            [
                "a851658eef1395b6"
            ]
        ]
    },
    {
        "id": "a851658eef1395b6",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_X')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 180,
        "wires": [
            [
                "6b9f7e163f8f5661"
            ]
        ]
    },
    {
        "id": "6b9f7e163f8f5661",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 180,
        "wires": []
    },
    {
        "id": "56f61e799b994c95",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "PUT RESET X",
        "url": "/Chart_FH_X/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1440,
        "y": 360,
        "wires": [
            [
                "e41abedb1167caf9"
            ]
        ]
    },
    {
        "id": "e41abedb1167caf9",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "RESET",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nvar SetMaxElementChart = 100\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_FH_X', tempData.slice())\nglobal.set('Chart_FH_Y', tempData.slice())\nglobal.set('Chart_FH_Distance', tempData.slice())\nglobal.set('Chart_FH_Index', 0)\n\nVariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 400,
        "wires": [
            [
                "da5ce3add6d8d3bb"
            ]
        ]
    },
    {
        "id": "da5ce3add6d8d3bb",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 400,
        "wires": []
    },
    {
        "id": "8c4789cc6c60db85",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 100\nvar count=0\n\n// let tempData = global.get('Chart_Data_Speed_PP')\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n\nvar Old_FH_X = Variable.WordDisplay[1][4]\nvar Old_FH_Y = Variable.WordDisplay[1][5]\nvar Old_Distance = Variable.WordDisplay[1][43]\n\nfunction fnTimer() {\n    //FH\n    if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n        Old_FH_X = Variable.WordDisplay[1][4]\n        Old_FH_Y = Variable.WordDisplay[1][5]\n        //FH_X\n        tempData = global.get('Chart_FH_X')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_X,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_X', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\n        //FH_Y\n        tempData = global.get('Chart_FH_Y')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\n\n        //FH_Distance\n        tempData = global.get('Chart_FH_Distance')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Variable.WordDisplay[1][43],\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Distance', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_FH_Index', tempIndex)\n    }\n\n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a965194ab4f903b1",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "PUT RESET Y",
        "url": "/Chart_FH_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1440,
        "y": 400,
        "wires": [
            [
                "e41abedb1167caf9"
            ]
        ]
    },
    {
        "id": "9a879fa9871f6049",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "PUT RESET Distance",
        "url": "/Chart_FH_Distance/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 440,
        "wires": [
            [
                "e41abedb1167caf9"
            ]
        ]
    },
    {
        "id": "99d9d2036841d7d8",
        "type": "link in",
        "z": "d0e9f96fb74481c8",
        "g": "8a2a8c0c54d5b290",
        "name": "link in 1",
        "links": [
            "9c64ebb53ee08f73"
        ],
        "x": 1425,
        "y": 520,
        "wires": [
            [
                "8c4789cc6c60db85"
            ]
        ]
    },
    {
        "id": "1f8cb1e945d0d7a3",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "GET API PICK Y",
        "url": "/Chart_Speed_Pick_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1440,
        "y": 620,
        "wires": [
            [
                "39a81fe5297c6804"
            ]
        ]
    },
    {
        "id": "39a81fe5297c6804",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Pick_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 620,
        "wires": [
            [
                "59866dad0eb0ddd2"
            ]
        ]
    },
    {
        "id": "59866dad0eb0ddd2",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 620,
        "wires": []
    },
    {
        "id": "3573eba30adf7cf0",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "PUT RESET Pick Y",
        "url": "/Chart_Speed_Pick_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1450,
        "y": 740,
        "wires": [
            [
                "077cad6da5bc6a68"
            ]
        ]
    },
    {
        "id": "077cad6da5bc6a68",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "RESET",
        "func": "var SetMaxElementChart = 50\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_Speed_Pick_Y', tempData.slice())\nglobal.set('Chart_Speed_Pick_Delay', tempData.slice())\nglobal.set('Chart_Speed_Pick_Index', 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 760,
        "wires": [
            [
                "333ace1f828c4740"
            ]
        ]
    },
    {
        "id": "333ace1f828c4740",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 760,
        "wires": []
    },
    {
        "id": "26da11d4de13e640",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 50\nvar count=0\n\n// let tempData = global.get('Chart_Data_Speed_PP')\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_Speed_Pick_Delay', tempData)\n\nvar Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\nvar Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\nfunction fnTimer() {\n    //Check Speed Pick Y\n    if ((Variable.WordDisplay[1][49] !== Old_CheckSpeed_Pick_Y)) {\n        Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n        Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n        \n        //Check Speed Pick Y\n        tempData = global.get('Chart_Speed_Pick_Y')\n        tempIndex = global.get('Chart_Speed_Pick_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_Pick_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Pick_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\n\n        //Check Speed Pick Delay\n        tempData = global.get('Chart_Speed_Pick_Delay')\n        tempIndex = global.get('Chart_Speed_Pick_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_DelayPick,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Pick_Delay', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Delay', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_Speed_Pick_Index', tempIndex)\n    }\n\n  \n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "ff94e7f64733f201",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "PUT RESET Pick Delay",
        "url": "/Chart_Speed_Pick_Delay/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 780,
        "wires": [
            [
                "077cad6da5bc6a68"
            ]
        ]
    },
    {
        "id": "ab3d7b8368871aef",
        "type": "link in",
        "z": "d0e9f96fb74481c8",
        "g": "3c69f9fa4c371e5a",
        "name": "link in 2",
        "links": [],
        "x": 1435,
        "y": 840,
        "wires": [
            [
                "26da11d4de13e640"
            ]
        ]
    },
    {
        "id": "93b4405a6f3596c6",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "GET API PLACE Y",
        "url": "/Chart_Speed_Place_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1450,
        "y": 940,
        "wires": [
            [
                "e7a1eb8f7e6b3048"
            ]
        ]
    },
    {
        "id": "e7a1eb8f7e6b3048",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Place_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 940,
        "wires": [
            [
                "b0199decd5707d91"
            ]
        ]
    },
    {
        "id": "b0199decd5707d91",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 940,
        "wires": []
    },
    {
        "id": "677571ef50f4e4f8",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "PUT RESET PLACE Y",
        "url": "/Chart_Speed_Place_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 1060,
        "wires": [
            [
                "f3100f2c2d7bdcad"
            ]
        ]
    },
    {
        "id": "f3100f2c2d7bdcad",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "RESET",
        "func": "var SetMaxElementChart = 50\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_Speed_Place_Y', tempData.slice())\nglobal.set('Chart_Speed_Place_Delay', tempData.slice())\nglobal.set('Chart_Speed_Place_Index', 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1080,
        "wires": [
            [
                "06170f95dff9300e"
            ]
        ]
    },
    {
        "id": "06170f95dff9300e",
        "type": "http response",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 1080,
        "wires": []
    },
    {
        "id": "0d3b6c4f6685481b",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 50\nvar count=0\n\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_Speed_Place_Delay', tempData)\n\nvar Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\nvar Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n\nfunction fnTimer() {\n    //Check Speed Place Y\n    if ((Variable.WordDisplay[1][45] !== Old_CheckSpeed_Place_Y)) {\n        Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n        Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n        \n        //Check Speed Place Y\n        tempData = global.get('Chart_Speed_Place_Y')\n        tempIndex = global.get('Chart_Speed_Place_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_Place_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Place_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\n\n        //Check Speed Place Delay\n        tempData = global.get('Chart_Speed_Place_Delay')\n        tempIndex = global.get('Chart_Speed_Place_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_DelayPlace,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Place_Delay', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Place_Delay', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_Speed_Place_Index', tempIndex)\n    }\n\n  \n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "53e082478178c3c3",
        "type": "http in",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "PUT RESET PLACE DELAY",
        "url": "/Chart_Speed_Place_Delay/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1480,
        "y": 1100,
        "wires": [
            [
                "f3100f2c2d7bdcad"
            ]
        ]
    },
    {
        "id": "672d413b96767abb",
        "type": "link in",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "link in 3",
        "links": [],
        "x": 1435,
        "y": 1160,
        "wires": [
            [
                "0d3b6c4f6685481b"
            ]
        ]
    },
    {
        "id": "86ee65a0e3a9459e",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "g": "028939c6ca6b3391",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Place_Delay')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1000,
        "wires": [
            [
                "3f4ea71428470d28"
            ]
        ]
    },
    {
        "id": "88c517e24e470974",
        "type": "file",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "d3390266b239ecd4",
        "type": "file",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 630,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "ee71915b87509cd1",
        "type": "Config_Web Page_Call",
        "z": "d0e9f96fb74481c8",
        "g": "a3fd25c506986fc3",
        "name_page": "3D Page",
        "url": "/scada/SanofiWebGL",
        "icon": "cui-dashboard",
        "scale": "",
        "nodered_port": "9000",
        "name_api": "",
        "x": 1120,
        "y": 1020,
        "wires": [
            [
                "5d02ac71e75d294d"
            ]
        ]
    },
    {
        "id": "f722044e2eeacb48",
        "type": "function",
        "z": "d0e9f96fb74481c8",
        "name": "function 12",
        "func": "\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nVariable.WordAdjust[0][2]=180\nmsg.payload = Variable.WordAdjust\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1200,
        "wires": [
            [
                "0eb6fd36ec7990b5"
            ]
        ]
    },
    {
        "id": "e91d68fdaf9b2f80",
        "type": "inject",
        "z": "d0e9f96fb74481c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1200,
        "wires": [
            [
                "f722044e2eeacb48"
            ]
        ]
    },
    {
        "id": "0eb6fd36ec7990b5",
        "type": "debug",
        "z": "d0e9f96fb74481c8",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e37cde06cae022a6",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "name": "function 2",
        "func": "\nvar VariableSystem = global.get(\"VariableSystem\");\nmsg.payload = VariableSystem.COMMUNICATION_PLC_OMRON[1]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "c6babd8fabc23a77"
            ]
        ]
    },
    {
        "id": "4776016f45670e32",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 1140,
        "wires": [
            [
                "e37cde06cae022a6"
            ]
        ]
    },
    {
        "id": "c6babd8fabc23a77",
        "type": "debug",
        "z": "f510f1f7ca822efb",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1140,
        "wires": []
    },
    {
        "id": "21450312b29b5811",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "name": "GET API Y",
        "url": "/Chart_FH_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1440,
        "y": 240,
        "wires": [
            [
                "d384da215d546283"
            ]
        ]
    },
    {
        "id": "d384da215d546283",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 240,
        "wires": [
            [
                "90030448510c8c0d"
            ]
        ]
    },
    {
        "id": "90030448510c8c0d",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 240,
        "wires": []
    },
    {
        "id": "1d3d85bd0b361d09",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "name": "GET API Distance",
        "url": "/Chart_FH_Distance",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 300,
        "wires": [
            [
                "c210c9cc3d5102c7"
            ]
        ]
    },
    {
        "id": "c210c9cc3d5102c7",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 300,
        "wires": [
            [
                "be3fac1c818c95cd"
            ]
        ]
    },
    {
        "id": "be3fac1c818c95cd",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 300,
        "wires": []
    },
    {
        "id": "7ece1d9d6b4dba38",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "name": "GET API Pick Delay",
        "url": "/Chart_Speed_Pick_Delay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 680,
        "wires": [
            [
                "67f52f54d166df9b"
            ]
        ]
    },
    {
        "id": "67f52f54d166df9b",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Pick_Delay')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 680,
        "wires": [
            [
                "62dfe3dbd9de6514"
            ]
        ]
    },
    {
        "id": "62dfe3dbd9de6514",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 680,
        "wires": []
    },
    {
        "id": "64318aa4fb53b59d",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "name": "GET API PLACE DELAY",
        "url": "/Chart_Speed_Place_Delay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1490,
        "y": 1000,
        "wires": [
            [
                "acd48cc77e341e14"
            ]
        ]
    },
    {
        "id": "58bb62a3fcda1150",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 1000,
        "wires": []
    },
    {
        "id": "bf4b7a484f402017",
        "type": "file in",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Read Config",
        "filename": "config/default_Sanofi_Line2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "7f43d1fa24a7caa8",
                "63b3cc0f0e3ca403"
            ]
        ]
    },
    {
        "id": "7f43d1fa24a7caa8",
        "type": "debug",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "63b3cc0f0e3ca403",
        "type": "file",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 610,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bef969a0aae1da6c",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "1ca473ce5e8994fd",
                "9c8604d636fb82ae"
            ]
        ]
    },
    {
        "id": "1ca473ce5e8994fd",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HK_PG_Old.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            [
                "482871725db15514",
                "55e854e05eb56bee"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "13c6a29e60d14dfb",
        "type": "plc_omron",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "PLC OMRON - NX102",
        "host": "192.168.250.1",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "true",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "200",
        "PLC_WordStartBitDisplay": "200",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "210",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "300",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "500",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "760",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "810",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "25",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "false",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "20",
        "x": 760,
        "y": 300,
        "wires": [
            [
                "f9812a85106088da"
            ]
        ]
    },
    {
        "id": "639cae4fbd30488c",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "482871725db15514"
            ]
        ]
    },
    {
        "id": "7b92fcd21d04b459",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "482871725db15514"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "f9812a85106088da",
        "type": "debug",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "02617e83bdbc9ea0",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 330,
        "y": 340,
        "wires": [
            [
                "482871725db15514"
            ]
        ]
    },
    {
        "id": "9c8604d636fb82ae",
        "type": "Config_Web Begin",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "4708383adcb810dc"
            ]
        ]
    },
    {
        "id": "4708383adcb810dc",
        "type": "Config_Web Title",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "title": "SCADA PAGE",
        "x": 520,
        "y": 460,
        "wires": [
            [
                "f94a0b8f8eeb6a42"
            ]
        ]
    },
    {
        "id": "f94a0b8f8eeb6a42",
        "type": "Config_Web Page",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "SCADA",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1800",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticScada.png",
        "idPage": "Scada",
        "scale": "100",
        "x": 740,
        "y": 460,
        "wires": [
            [
                "a5460e4cf1eeee2c"
            ]
        ]
    },
    {
        "id": "f4a16c8cb6b8d9b7",
        "type": "Config_Web End",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "port": "8000",
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "8502bff12ee58673"
            ]
        ]
    },
    {
        "id": "8502bff12ee58673",
        "type": "file",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "",
        "filename": "../Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "228d50a78efb1c8a",
        "type": "Config_Web Page",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NEW PAGE",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "blue",
        "backgroundImage": "Scada_Sanofi.png",
        "idPage": "Scada2",
        "scale": "100",
        "x": 1130,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "55e854e05eb56bee",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\n\nvar SetMaxElementChart = 45\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //CHART=====================================================================\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ResetChartFH') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_FH', tempData.slice())\n                global.set('Chart_Index_FH', 0)\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n            }\n            if (data.tag === 'ResetChartSpeed') {\n                let tempData = []\n                for (var i = 1; i <= SetMaxElementChart; i++) {\n                    tempData.push({\n                        Value: null,\n                        Value2: null,\n                        TimeCreate: ''\n                    });\n                }\n                global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Pick_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n                global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n                global.set('Chart_Index_Speed_Place_Y', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n                global.set('Chart_Data_Speed_IO', tempData.slice())\n                global.set('Chart_Index_Speed_IO', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n                global.set('Chart_Data_Speed_PP', tempData.slice())\n                global.set('Chart_Index_Speed_PP', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n                global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n                global.set('Chart_Index_Speed_PlacePick', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n\n                global.set('Chart_Data_Speed_Bag', tempData.slice())\n                global.set('Chart_Index_Speed_Bag', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n                global.set('Chart_Data_Speed_DelayPlace', tempData.slice())\n                global.set('Chart_Index_Speed_DelayPlace', 0)\n                VariableSystem.IO.sockets.emit('Chart_Speed_DelayPlace', global.get('Chart_Data_Speed_DelayPlace'))\n            }\n            if (data.tag === 'ReSendChart') {\n                VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', global.get('Chart_Data_Speed_PlacePick'))\n                VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n            }\n        };\n        //CHART=====================================================================\n\n    });\n})\n// //CHART=====================================================================\n// //Initial\n// let tempData = []\n// for (var i = 1; i <= SetMaxElementChart; i++) {\n//     tempData.push({\n//         Value: null,\n//         Value2: null,\n//         TimeCreate: ''\n//     });\n// }\n// global.set('Chart_Data', tempData.slice())\n// global.set('Chart_Index', 0)\n// VariableSystem.IO.sockets.emit('Chart_FH', global.get('Chart_Data_FH'))\n\n// global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Pick_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', global.get('Chart_Data_Speed_Pick_Y'))\n\n// global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n// global.set('Chart_Index_Speed_Place_Y', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', global.get('Chart_Data_Speed_Place_Y'))\n\n// global.set('Chart_Data_Speed_IO', tempData.slice())\n// global.set('Chart_Index_Speed_IO', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_IO', global.get('Chart_Data_Speed_IO'))\n\n// global.set('Chart_Data_Speed_PP', tempData.slice())\n// global.set('Chart_Index_Speed_PP', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_PP', global.get('Chart_Data_Speed_PP'))\n\n// global.set('Chart_Data_Speed_Bag', tempData.slice())\n// global.set('Chart_Index_Speed_Bag', 0)\n// VariableSystem.IO.sockets.emit('Chart_Speed_Bag', global.get('Chart_Data_Speed_Bag'))\n\n// var Old_FH_X = Variable.WordDisplay[1][4]\n// var Old_FH_Y = Variable.WordDisplay[1][5]\n// var Old_Distance = Variable.WordDisplay[1][43]\n\n// var Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n// var Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n// var Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n// var Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n// var Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n// var Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n// var Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n// var Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n// var count = 0\n// //SCAN\n// function fnTimer() {\n//     //FH\n//     if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n//         Old_FH_X = Variable.WordDisplay[1][4]\n//         Old_FH_Y = Variable.WordDisplay[1][5]\n\n//         let tempData = global.get('Chart_Data')\n//         let tempIndex = global.get('Chart_Index')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             FH_X: Old_FH_X,\n//             FH_Y: Old_FH_Y,\n//             Distance: Variable.WordDisplay[1][43],\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data', tempData.slice())\n//         global.set('Chart_Index', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_FH', tempData)\n//     }\n//     //Check Speed Pick Y\n//     if ((Variable.WordDisplay[1][49] !== Old_CheckSpeed_Pick_Y)) {\n//         Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n//         Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n\n//         let tempData = global.get('Chart_Data_Speed_Pick_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Pick_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Pick_Y,\n//             Value2: Old_CheckSpeed_DelayPick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Pick_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Pick_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\n//     }\n//     //Check Speed Place Y + Delay At Place\n//     if ((Variable.WordDisplay[1][45] !== Old_CheckSpeed_Place_Y)) {\n//         Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n//         Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n\n//         let tempData = global.get('Chart_Data_Speed_Place_Y')\n//         let tempIndex = global.get('Chart_Index_Speed_Place_Y')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Place_Y,\n//             Value2: Old_CheckSpeed_DelayPlace,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Place_Y', tempData.slice())\n//         global.set('Chart_Index_Speed_Place_Y', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\n//     }\n//     //Check Speed IO\n//     if ((Variable.WordDisplay[1][46] !== Old_CheckSpeed_In_Out)) {\n//         Old_CheckSpeed_In_Out = Variable.WordDisplay[1][46]\n\n//         let tempData = global.get('Chart_Data_Speed_IO')\n//         let tempIndex = global.get('Chart_Index_Speed_IO')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_In_Out,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_IO', tempData.slice())\n//         global.set('Chart_Index_Speed_IO', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_IO', tempData)\n//     }\n//     //Check Speed PP\n//     if ((Variable.WordDisplay[1][48] !== Old_CheckSpeed_PP)) {\n//         Old_CheckSpeed_PP = Variable.WordDisplay[1][48]\n\n//         let tempData = global.get('Chart_Data_Speed_PP')\n//         let tempIndex = global.get('Chart_Index_Speed_PP')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PP,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PP', tempData.slice())\n//         global.set('Chart_Index_Speed_PP', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PP', tempData)\n//     }\n//     //Check Speed Place 2 Pick Bag 1\n//     if ((Variable.WordDisplay[1][50] !== Old_CheckSpeed_PlacePick)) {\n//         Old_CheckSpeed_PlacePick = Variable.WordDisplay[1][50]\n\n//         let tempData = global.get('Chart_Data_Speed_PlacePick')\n//         let tempIndex = global.get('Chart_Index_Speed_PlacePick')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_PlacePick,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_PlacePick', tempData.slice())\n//         global.set('Chart_Index_Speed_PlacePick', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_PlacePick', tempData)\n//     }\n\n//     //Check Speed Bag\n//     if ((Variable.WordDisplay[1][33] !== Old_CheckSpeed_Bag)) {\n//         Old_CheckSpeed_Bag = Variable.WordDisplay[1][33]\n\n//         let tempData = global.get('Chart_Data_Speed_Bag')\n//         let tempIndex = global.get('Chart_Index_Speed_Bag')\n//         let currDate = new Date();\n//         let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n//         tempData[tempIndex] = {\n//             Value: Old_CheckSpeed_Bag,\n//             TimeCreate: ConvertTime\n//         }\n//         tempIndex = tempIndex + 1;\n//         if (tempIndex > SetMaxElementChart) tempIndex = 0\n//         global.set('Chart_Data_Speed_Bag', tempData.slice())\n//         global.set('Chart_Index_Speed_Bag', tempIndex)\n//         VariableSystem.IO.sockets.emit('Chart_Speed_Bag', tempData)\n//     }\n\n\n//     count = count + 1\n//     if (count > 99999) { count = 0 }\n//     node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n// }\n// var myInitial = setInterval(fnTimer, 300);\n// //CHART=====================================================================\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 400,
        "wires": [
            [
                "957e8603b1bd8061"
            ]
        ]
    },
    {
        "id": "aa9133c1d1ea84ba",
        "type": "Config_Web Title",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "title": "ALARM",
        "x": 580,
        "y": 620,
        "wires": [
            [
                "7984628c0ed3c7cd"
            ]
        ]
    },
    {
        "id": "7984628c0ed3c7cd",
        "type": "Config_Web Page_Call",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 810,
        "y": 620,
        "wires": [
            [
                "61693a014d238a63"
            ]
        ]
    },
    {
        "id": "61693a014d238a63",
        "type": "Config_Web Page_Call",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "589e71e83603d281"
            ]
        ]
    },
    {
        "id": "cd4637fe56eef535",
        "type": "Config_Web Page_Call",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "1691638b7b3f806a"
            ]
        ]
    },
    {
        "id": "14e70cf2de976ad9",
        "type": "Config_Web Page_Call",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 840,
        "y": 680,
        "wires": [
            [
                "cd4637fe56eef535"
            ]
        ]
    },
    {
        "id": "589e71e83603d281",
        "type": "Config_Web Title",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "title": "LOG REPORT",
        "x": 600,
        "y": 680,
        "wires": [
            [
                "14e70cf2de976ad9"
            ]
        ]
    },
    {
        "id": "1691638b7b3f806a",
        "type": "Config_Web Title",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "title": "USER MANAGER",
        "x": 610,
        "y": 740,
        "wires": [
            [
                "63db9c1f2c9c99f3"
            ]
        ]
    },
    {
        "id": "63db9c1f2c9c99f3",
        "type": "Config_Web Page_Call",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 880,
        "y": 740,
        "wires": [
            [
                "438d8044a7e44953"
            ]
        ]
    },
    {
        "id": "a5460e4cf1eeee2c",
        "type": "Config_Web Page",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "CHART FH",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1500",
        "height": "950",
        "backgroundColor": "rgb(92 189 210)",
        "backgroundImage": "",
        "idPage": "Scada3",
        "scale": "100",
        "x": 750,
        "y": 520,
        "wires": [
            [
                "2165e67518be9262"
            ]
        ]
    },
    {
        "id": "3f86bc027e16654d",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - BitAdjust",
        "indexPLC": "2",
        "word_start": "210",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1150,
        "y": 800,
        "wires": [
            [
                "ee6b580c8b9b7750"
            ]
        ]
    },
    {
        "id": "438d8044a7e44953",
        "type": "Config_Web Title",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "title": "MEMONIC NJ",
        "x": 600,
        "y": 800,
        "wires": [
            [
                "0f421d7a1fc58086"
            ]
        ]
    },
    {
        "id": "0f421d7a1fc58086",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - BitDisplay",
        "indexPLC": "2",
        "word_start": "200",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 850,
        "y": 800,
        "wires": [
            [
                "3f86bc027e16654d"
            ]
        ]
    },
    {
        "id": "ee6b580c8b9b7750",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - WordDisplay",
        "indexPLC": "2",
        "word_start": "300",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 860,
        "y": 860,
        "wires": [
            [
                "bb8676fb287b45d5"
            ]
        ]
    },
    {
        "id": "bb8676fb287b45d5",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - WordAdjust",
        "indexPLC": "2",
        "word_start": "500",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1150,
        "y": 860,
        "wires": [
            [
                "39a73c51715cda66"
            ]
        ]
    },
    {
        "id": "39a73c51715cda66",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - DWordDisplay",
        "indexPLC": "2",
        "word_start": "700",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 860,
        "y": 920,
        "wires": [
            [
                "290df3a26771a8f5"
            ]
        ]
    },
    {
        "id": "290df3a26771a8f5",
        "type": "Config_Web Memonic",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "NJ - DWordAdjust",
        "indexPLC": "2",
        "word_start": "750",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1160,
        "y": 920,
        "wires": [
            [
                "f4a16c8cb6b8d9b7"
            ]
        ]
    },
    {
        "id": "844f5c25d614024e",
        "type": "Config_Web Page",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "CHART SPEED",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1700",
        "height": "1000",
        "backgroundColor": "rgb(92 189 210)",
        "backgroundImage": "",
        "idPage": "Scada4",
        "scale": "100",
        "x": 320,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2165e67518be9262",
        "type": "Config_Web Page",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name_page": "CHART SPEED YY",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1700",
        "height": "1000",
        "backgroundColor": "rgb(92 189 210)",
        "backgroundImage": "",
        "idPage": "Scada5",
        "scale": "100",
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "aa9133c1d1ea84ba"
            ]
        ]
    },
    {
        "id": "957e8603b1bd8061",
        "type": "link out",
        "z": "f510f1f7ca822efb",
        "g": "a755a7804c5d6e44",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "f88d8f62786b711b",
            "3f6d45ccc2b134bd",
            "81067c8fe3506263"
        ],
        "x": 875,
        "y": 400,
        "wires": []
    },
    {
        "id": "22b01f967e75e448",
        "type": "inject",
        "z": "f510f1f7ca822efb",
        "g": "9dcf8f3eb6385c27",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 395,
        "y": 60,
        "wires": [
            [
                "b63e87db2d7a88dd"
            ]
        ]
    },
    {
        "id": "b63e87db2d7a88dd",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "9dcf8f3eb6385c27",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 60,
        "wires": [
            [
                "e5abb99b3dc31fd6"
            ]
        ]
    },
    {
        "id": "e5abb99b3dc31fd6",
        "type": "debug",
        "z": "f510f1f7ca822efb",
        "g": "9dcf8f3eb6385c27",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 875,
        "y": 60,
        "wires": []
    },
    {
        "id": "dbe9ecb07340e2a0",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "GET API X",
        "url": "/Chart_FH_X",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1440,
        "y": 180,
        "wires": [
            [
                "bcf6f414f25d06da"
            ]
        ]
    },
    {
        "id": "bcf6f414f25d06da",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_FH_X')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 180,
        "wires": [
            [
                "bff1b13e0a9d0f27"
            ]
        ]
    },
    {
        "id": "bff1b13e0a9d0f27",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 180,
        "wires": []
    },
    {
        "id": "37ac10d42f70225c",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "PUT RESET X",
        "url": "/Chart_FH_X/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "d005365093b23373"
            ]
        ]
    },
    {
        "id": "d005365093b23373",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "RESET",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nvar SetMaxElementChart = 100\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_FH_X', tempData.slice())\nglobal.set('Chart_FH_Y', tempData.slice())\nglobal.set('Chart_FH_Distance', tempData.slice())\nglobal.set('Chart_FH_Index', 0)\n\nVariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 400,
        "wires": [
            [
                "319587df28071a3a"
            ]
        ]
    },
    {
        "id": "319587df28071a3a",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 400,
        "wires": []
    },
    {
        "id": "40716a3e342c0cc9",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 100\nvar count=0\n\n// let tempData = global.get('Chart_Data_Speed_PP')\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n\nvar Old_FH_X = Variable.WordDisplay[1][4]\nvar Old_FH_Y = Variable.WordDisplay[1][5]\nvar Old_Distance = Variable.WordDisplay[1][43]\n\nfunction fnTimer() {\n    //FH\n    if ((Variable.WordDisplay[1][4] !== Old_FH_X) || (Variable.WordDisplay[1][5] !== Old_FH_Y)) {\n        Old_FH_X = Variable.WordDisplay[1][4]\n        Old_FH_Y = Variable.WordDisplay[1][5]\n        //FH_X\n        tempData = global.get('Chart_FH_X')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_X,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_X', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_X', tempData)\n\n        //FH_Y\n        tempData = global.get('Chart_FH_Y')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_FH_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Y', tempData)\n\n        //FH_Distance\n        tempData = global.get('Chart_FH_Distance')\n        tempIndex = global.get('Chart_FH_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Variable.WordDisplay[1][43],\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_FH_Distance', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_FH_Distance', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_FH_Index', tempIndex)\n    }\n\n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e183138f7df267e0",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "PUT RESET Y",
        "url": "/Chart_FH_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 400,
        "wires": [
            [
                "d005365093b23373"
            ]
        ]
    },
    {
        "id": "5c5bd555db56c9ff",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "PUT RESET Distance",
        "url": "/Chart_FH_Distance/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1480,
        "y": 440,
        "wires": [
            [
                "d005365093b23373"
            ]
        ]
    },
    {
        "id": "f88d8f62786b711b",
        "type": "link in",
        "z": "f510f1f7ca822efb",
        "g": "64591c1d722c40d8",
        "name": "link in 4",
        "links": [
            "957e8603b1bd8061"
        ],
        "x": 1445,
        "y": 520,
        "wires": [
            [
                "40716a3e342c0cc9"
            ]
        ]
    },
    {
        "id": "f44b519026660ccf",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "GET API PICK Y",
        "url": "/Chart_Speed_Pick_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1460,
        "y": 620,
        "wires": [
            [
                "8838508c9bbb53b0"
            ]
        ]
    },
    {
        "id": "8838508c9bbb53b0",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Pick_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 620,
        "wires": [
            [
                "64cf8ba4f98b649e"
            ]
        ]
    },
    {
        "id": "64cf8ba4f98b649e",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 620,
        "wires": []
    },
    {
        "id": "f833b22ef3b3fa09",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "PUT RESET Pick Y",
        "url": "/Chart_Speed_Pick_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 740,
        "wires": [
            [
                "e0ca2f620b3731a9"
            ]
        ]
    },
    {
        "id": "e0ca2f620b3731a9",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "RESET",
        "func": "var SetMaxElementChart = 50\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_Speed_Pick_Y', tempData.slice())\nglobal.set('Chart_Speed_Pick_Delay', tempData.slice())\nglobal.set('Chart_Speed_Pick_Index', 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 760,
        "wires": [
            [
                "698833e6af6f61ae"
            ]
        ]
    },
    {
        "id": "698833e6af6f61ae",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 760,
        "wires": []
    },
    {
        "id": "6ae99af1a075e31d",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 50\nvar count=0\n\n// let tempData = global.get('Chart_Data_Speed_PP')\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_Speed_Pick_Delay', tempData)\n\nvar Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\nvar Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\nfunction fnTimer() {\n    //Check Speed Pick Y\n    if ((Variable.WordDisplay[1][49] !== Old_CheckSpeed_Pick_Y)) {\n        Old_CheckSpeed_Pick_Y = Variable.WordDisplay[1][49]\n        Old_CheckSpeed_DelayPick = Variable.WordDisplay[1][52]\n        \n        //Check Speed Pick Y\n        tempData = global.get('Chart_Speed_Pick_Y')\n        tempIndex = global.get('Chart_Speed_Pick_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_Pick_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Pick_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Y', tempData)\n\n        //Check Speed Pick Delay\n        tempData = global.get('Chart_Speed_Pick_Delay')\n        tempIndex = global.get('Chart_Speed_Pick_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_DelayPick,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Pick_Delay', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Pick_Delay', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_Speed_Pick_Index', tempIndex)\n    }\n\n  \n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "1104d1c4f0c773ad",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "PUT RESET Pick Delay",
        "url": "/Chart_Speed_Pick_Delay/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1480,
        "y": 780,
        "wires": [
            [
                "e0ca2f620b3731a9"
            ]
        ]
    },
    {
        "id": "3f6d45ccc2b134bd",
        "type": "link in",
        "z": "f510f1f7ca822efb",
        "g": "75888af0ef86d8f0",
        "name": "link in 5",
        "links": [
            "957e8603b1bd8061"
        ],
        "x": 1455,
        "y": 840,
        "wires": [
            [
                "6ae99af1a075e31d"
            ]
        ]
    },
    {
        "id": "fa035a5ef6f2e7be",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "GET API PLACE Y",
        "url": "/Chart_Speed_Place_Y",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1470,
        "y": 940,
        "wires": [
            [
                "785d75ba3b5ff41e"
            ]
        ]
    },
    {
        "id": "785d75ba3b5ff41e",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Place_Y')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 940,
        "wires": [
            [
                "6832581c1d99a83f"
            ]
        ]
    },
    {
        "id": "6832581c1d99a83f",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 940,
        "wires": []
    },
    {
        "id": "edd01e19a8aec9b6",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "PUT RESET PLACE Y",
        "url": "/Chart_Speed_Place_Y/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1480,
        "y": 1060,
        "wires": [
            [
                "2f0550697f6e1848"
            ]
        ]
    },
    {
        "id": "2f0550697f6e1848",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "RESET",
        "func": "var SetMaxElementChart = 50\nlet tempData = []\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,\n        TimeCreate: ''\n    });\n}\nmsg.payload = tempData\nglobal.set('Chart_Speed_Place_Y', tempData.slice())\nglobal.set('Chart_Speed_Place_Delay', tempData.slice())\nglobal.set('Chart_Speed_Place_Index', 0)\nnode.status({ fill: \"blue\", shape: \"dot\", text: 'RESET CHART' });\n\nmsg.payload = tempData\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1080,
        "wires": [
            [
                "1cd3bf560df1994f"
            ]
        ]
    },
    {
        "id": "1cd3bf560df1994f",
        "type": "http response",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1840,
        "y": 1080,
        "wires": []
    },
    {
        "id": "84ac291da52ada9e",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "Function",
        "func": "// node.status({ fill: \"blue\", shape: \"dot\", text: 'TEST CHART' });\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 50\nvar count=0\n\nlet tempData = []\nlet tempIndex = []\nlet currDate = new Date();\nlet ConvertTime = null\n\nfor (var i = 1; i <= SetMaxElementChart; i++) {\n    let currDate = new Date();\n    let ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n    tempData.push({\n        Value: null,//Math.random()*1000,\n        TimeCreate: ''\n    });\n}\nVariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\nVariableSystem.IO.sockets.emit('Chart_Speed_Place_Delay', tempData)\n\nvar Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\nvar Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n\nfunction fnTimer() {\n    //Check Speed Place Y\n    if ((Variable.WordDisplay[1][45] !== Old_CheckSpeed_Place_Y)) {\n        Old_CheckSpeed_Place_Y = Variable.WordDisplay[1][45]\n        Old_CheckSpeed_DelayPlace = Variable.WordDisplay[1][51]\n        \n        //Check Speed Place Y\n        tempData = global.get('Chart_Speed_Place_Y')\n        tempIndex = global.get('Chart_Speed_Place_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_Place_Y,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Place_Y', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Place_Y', tempData)\n\n        //Check Speed Place Delay\n        tempData = global.get('Chart_Speed_Place_Delay')\n        tempIndex = global.get('Chart_Speed_Place_Index')\n        currDate = new Date();\n        ConvertTime = (currDate.getHours() < 10 ? \"0\" : '') + currDate.getHours() + ':' + (currDate.getMinutes() < 10 ? \"0\" : '') + currDate.getMinutes() + ':' + (currDate.getSeconds() < 10 ? \"0\" : '') + currDate.getSeconds()\n        tempData[tempIndex] = {\n            Value: Old_CheckSpeed_DelayPlace,\n            TimeCreate: ConvertTime\n        }\n        global.set('Chart_Speed_Place_Delay', tempData.slice())\n        VariableSystem.IO.sockets.emit('Chart_Speed_Place_Delay', tempData)\n\n        tempIndex = tempIndex + 1;\n        if (tempIndex > SetMaxElementChart) tempIndex = 0\n        global.set('Chart_Speed_Place_Index', tempIndex)\n    }\n\n  \n    count = count + 1\n    if (count > 99999) { count = 0 }\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n}\nvar myInitial = setInterval(fnTimer, 300);\n\nmsg.payload = tempData\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "35ae3048494c893a",
        "type": "http in",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "PUT RESET PLACE DELAY",
        "url": "/Chart_Speed_Place_Delay/Reset",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1500,
        "y": 1100,
        "wires": [
            [
                "2f0550697f6e1848"
            ]
        ]
    },
    {
        "id": "81067c8fe3506263",
        "type": "link in",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "link in 6",
        "links": [
            "957e8603b1bd8061"
        ],
        "x": 1455,
        "y": 1160,
        "wires": [
            [
                "84ac291da52ada9e"
            ]
        ]
    },
    {
        "id": "acd48cc77e341e14",
        "type": "function",
        "z": "f510f1f7ca822efb",
        "g": "570fcd84b209c251",
        "name": "GET",
        "func": "node.status({ fill: \"blue\", shape: \"dot\", text: 'GET CHART' });\n\nmsg.payload = global.get('Chart_Speed_Place_Delay')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1000,
        "wires": [
            [
                "58bb62a3fcda1150"
            ]
        ]
    },
    {
        "id": "c36be3a9f84b5f06",
        "type": "inject",
        "z": "779da15b8c7ae2d1",
        "g": "f416411d832df525",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "f207c801cda55263"
            ]
        ]
    },
    {
        "id": "f207c801cda55263",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "f416411d832df525",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "e24c5f092fc7a1b6"
            ]
        ]
    },
    {
        "id": "e24c5f092fc7a1b6",
        "type": "debug",
        "z": "779da15b8c7ae2d1",
        "g": "f416411d832df525",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "9f962b23e78316b4",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "709ecdfb8f6371a6",
        "name": "LHT65",
        "func": "if (!msg.payload.status) {\n    let MYpacket = msg.payload.MYpacket\n    let NwkSKeySource = msg.payload.NwkSKeySource\n    let AppSKeySource = msg.payload.AppSKeySource\n\n    let NwkSKey = new Buffer(NwkSKeySource, 'hex');\n    let AppSKey = new Buffer(AppSKeySource, 'hex');\n    let MYdec = MYpacket.decryptWithKeys(AppSKey, NwkSKey);\n    //Battery,units:V\n    console.log(\"BatV: \" + (((MYdec.readUInt8(0) << 8 | MYdec.readUInt8(1)) & 0x3FFF) / 1000).toString());\n    //SHT20,temperature,units:\n    console.log(\"TempC_SHT: \" + ((MYdec.readUInt8(2) << 24 >> 16 | MYdec.readUInt8(3)) / 100).toFixed(2));\n    //SHT20,Humidity,units:%\n    console.log(\"Hum_SHT: \" + ((MYdec.readUInt8(4) << 8 | MYdec.readUInt8(5)) / 10).toFixed(1))\n    //DS18B20,temperature,units:â„ƒ\n    console.log(\"TempC_DS: \" + ((MYdec.readUInt8(7) << 24 >> 16 | MYdec.readUInt8(8)) / 100).toFixed(2))\n    //Exti pin level,PA4\n    console.log(\"Exti_pin_level: \" + (MYdec.readUInt8(7) ? \"High\" : \"Low\"))\n    //Exit pin status,PA4\n    console.log(\"Exti_status: \" + (MYdec.readUInt8(8) ? \"True\" : \"False\"))\n    //ADC,PA4,units:V\n    console.log(\"ADC_V: \" + (MYdec.readUInt8(7) << 8 | MYdec.readUInt8(8)) / 1000)\n    let RealTemperature1 = (((MYdec.readUInt8(0) << 8 | MYdec.readUInt8(1)) & 0x3FFF) / 1000).toString();\n    let RealTemperature2 = ((MYdec.readUInt8(2) << 24 >> 16 | MYdec.readUInt8(3)) / 100).toFixed(2)\n    let RealTemperature3 = ((MYdec.readUInt8(4) << 8 | MYdec.readUInt8(5)) / 10).toFixed(1)\n    let RealTemperature4 = 0\n    let RealTemperature5 = 0\n    let RealTemperature6 = 0\n    let temp_Tem = {\n        Battery: RealTemperature1,\n        Temperature_In: RealTemperature2,\n        Humidity: RealTemperature3,\n        TimeCreate: Date.now()\n    }\n    msg.payload = temp_Tem\n    return msg;\n} else {\n    // node.warn(msg.payload.status)\n}\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "10572c1026e5300c",
                "0ad9a1f2dad5a639"
            ]
        ]
    },
    {
        "id": "d8104d5b6cbf5a63",
        "type": "sqlite",
        "z": "779da15b8c7ae2d1",
        "g": "709ecdfb8f6371a6",
        "mydb": "89d1985a326c08dc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "LORA",
        "x": 690,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6f0f72d7253430d3",
        "type": "sqlite",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "mydb": "89d1985a326c08dc",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM (\n    SELECT * FROM Lora\n    ORDER BY TimeCreate DESC\n    LIMIT 100\n) AS T\nORDER BY TimeCreate ASC;\n",
        "name": "LORA",
        "x": 330,
        "y": 420,
        "wires": [
            [
                "e3d0c950a8f4df62"
            ]
        ]
    },
    {
        "id": "7b279a7add5fa35f",
        "type": "http response",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 620,
        "y": 420,
        "wires": []
    },
    {
        "id": "e3d0c950a8f4df62",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "GET",
        "func": "const updatedTimeCreate = msg.payload.map(element => {\n    element.TimeCreate = new Date(parseInt(element.TimeCreate))\n    let ConvertTime = (element.TimeCreate.getHours() < 10 ? \"0\" : '') + element.TimeCreate.getHours() + ':' + (element.TimeCreate.getMinutes() < 10 ? \"0\" : '') + element.TimeCreate.getMinutes() + ':' + (element.TimeCreate.getSeconds() < 10 ? \"0\" : '') + element.TimeCreate.getSeconds()\n    return { ...element, TimeCreate: ConvertTime }; // Changing the age property\n});\n\nglobal.set('Lora', updatedTimeCreate.slice())\n\nmsg.payload = updatedTimeCreate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "7b279a7add5fa35f"
            ]
        ]
    },
    {
        "id": "542f4e7c6658c269",
        "type": "http in",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "GET API LORA 1",
        "url": "/lora1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "6f0f72d7253430d3"
            ]
        ]
    },
    {
        "id": "0ad9a1f2dad5a639",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "709ecdfb8f6371a6",
        "name": "Function",
        "func": "let RealTemperature1 = msg.payload.Battery\nlet RealTemperature2 = msg.payload.Temperature_In\nlet RealTemperature3 = msg.payload.Humidity\nlet TimeCreate = new Date(msg.payload.TimeCreate).toLocaleString(\"en-US\", { timeZone: \"Asia/Jakarta\" })\n\nvar VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\nvar SubFunction = global.get(\"SubFunction\");\nvar SetMaxElementChart = 100\n\nVariables.WordDisplay[1][1] = RealTemperature1;\nVariables.WordDisplay[1][2] = RealTemperature2;\nVariables.WordDisplay[1][3] = RealTemperature3;\n\nVariables.ListString[1][1] = TimeCreate;\n\nlet Lora_Table = global.get('Lora')\nLora_Table.shift();\n\nlet TempDate = new Date(msg.payload.TimeCreate)\nlet ConvertTime = (TempDate.getHours() < 10 ? \"0\" : '') + TempDate.getHours() + ':' + (TempDate.getMinutes() < 10 ? \"0\" : '') + TempDate.getMinutes() + ':' + (TempDate.getSeconds() < 10 ? \"0\" : '') + TempDate.getSeconds()\n\nlet tempData={\n    Battery: msg.payload.Battery,\n    Temperature_In: msg.payload.Temperature_In,\n    Humidity: msg.payload.Humidity,\n    TimeCreate: ConvertTime\n}\n\nLora_Table.push(tempData)\nglobal.set('Lora', Lora_Table.slice())\nVariableSystem.IO.sockets.emit('lora1', Lora_Table)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": []
    },
    {
        "id": "822a854143aa8325",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "Config Project",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nVariableSystem.ProjectPalletizer=true;\n\nvar Sql_link = \"db/Lora_Scada.db\"\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "d961bfea2af6ce98"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "36d4abc3cee943ae",
        "type": "inject",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "822a854143aa8325",
                "e36a2d2ea24edb94"
            ]
        ]
    },
    {
        "id": "d961bfea2af6ce98",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "PROCESS CLIENT",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data);\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n        SubFunction.ProcessSocketIO_Modbus_Server(data)\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e36a2d2ea24edb94",
        "type": "Config_Web Begin",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "x": 300,
        "y": 580,
        "wires": [
            [
                "164d5fe388fe14e4"
            ]
        ]
    },
    {
        "id": "164d5fe388fe14e4",
        "type": "Config_Web Title",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "title": "SCADA PAGE",
        "x": 500,
        "y": 580,
        "wires": [
            [
                "272d7a86cdde4419"
            ]
        ]
    },
    {
        "id": "272d7a86cdde4419",
        "type": "Config_Web Page",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name_page": "SCREEN",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1400",
        "height": "700",
        "backgroundColor": "323435",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "100",
        "x": 720,
        "y": 580,
        "wires": [
            [
                "eb65671ae6ef78ca"
            ]
        ]
    },
    {
        "id": "eb65671ae6ef78ca",
        "type": "Config_Web Title",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "title": "REPORT",
        "x": 480,
        "y": 640,
        "wires": [
            [
                "f9c6a45c45904237"
            ]
        ]
    },
    {
        "id": "f9c6a45c45904237",
        "type": "Config_Web Page_Call",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name_page": "Report",
        "url": "/scada/reportproject",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "lora1_report",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "59538971be8d8b9b"
            ]
        ]
    },
    {
        "id": "59538971be8d8b9b",
        "type": "Config_Web End",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "port": "8000",
        "x": 430,
        "y": 740,
        "wires": [
            [
                "511c027dd56aed12",
                "6471d086a0682f75"
            ]
        ]
    },
    {
        "id": "511c027dd56aed12",
        "type": "file",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 750,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "6471d086a0682f75",
        "type": "file",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "10572c1026e5300c",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "709ecdfb8f6371a6",
        "name": "Write DB",
        "func": "let RealTemperature1 = msg.payload.Battery\nlet RealTemperature2 = msg.payload.Temperature_In\nlet RealTemperature3 = msg.payload.Humidity\n\nmsg.topic = `INSERT INTO Lora (Battery, Temperature_In, Humidity,TimeCreate) VALUES ($Battery, $Temperature_In,$Humidity,$TimeCreate)`\nmsg.payload = [RealTemperature1, RealTemperature2, RealTemperature3, Date.now()]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "d8104d5b6cbf5a63"
            ]
        ]
    },
    {
        "id": "a41c074a1e410004",
        "type": "http in",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "GET API LORA REPORT",
        "url": "/lora1_report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "aecc59ef79626635"
            ]
        ]
    },
    {
        "id": "2ae7e397abe7595f",
        "type": "http response",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "2978138f2405a274",
        "type": "sqlite",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "mydb": "89d1985a326c08dc",
        "sqlquery": "msg.topic",
        "sql": "SELECT * FROM Lora\nWHERE TimeCreate BETWEEN (1484086810000) AND (1684986810000)\n",
        "name": "LORA",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "2ae7e397abe7595f"
            ]
        ]
    },
    {
        "id": "aecc59ef79626635",
        "type": "function",
        "z": "779da15b8c7ae2d1",
        "g": "01d106b766472626",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nmsg.topic = `SELECT * FROM Lora WHERE TimeCreate BETWEEN($start_time) AND($stop_time)`\nmsg.payload = [start_time, stop_time]\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "2978138f2405a274"
            ]
        ]
    },
    {
        "id": "4c6114d72eb42c57",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "g": "8ba581d1f5cc3587",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 40,
        "wires": [
            [
                "e77d63c3f95572be"
            ]
        ]
    },
    {
        "id": "e77d63c3f95572be",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8ba581d1f5cc3587",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 40,
        "wires": [
            [
                "bbae8bbe4c20fa54"
            ]
        ]
    },
    {
        "id": "bbae8bbe4c20fa54",
        "type": "debug",
        "z": "1b7ad694981eabe7",
        "g": "8ba581d1f5cc3587",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "2d8ea667c2f1670b",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/Onsemi.db\"\nnode.warn(JSON.stringify(Sql_link))\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nvar global_functions = {};\n\nflow.set(\"global_functions\", global_functions);\nglobal.set(\"check_store\", 1);\nglobal.set(\"check_store_line_select\", 1);\nglobal.set(\"check_store_warehouse_prepare\", 1);\nglobal.set(\"check_store_warehouse_delivery\", 1);\nglobal.set(\"timer_delete_data\", 0);\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "601719ecbcc94b31",
                "1be241831e56d9f6",
                "321817ac5eee12c8"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "fa8a1d9198f43e65",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "7f0278bd80cf96af",
                "a00f9e7f04565e6c",
                "2d8ea667c2f1670b"
            ]
        ]
    },
    {
        "id": "a00f9e7f04565e6c",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "PROCESS CLIENT",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nVariables.ListString[0][11] = '40 Kg'\nVariables.WordAdjust[0][1] = 1 //Số lượng\n\nasync function DeleteStorePrepareWarehouse(id) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").DeleteStorePrepareWarehouse(id, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve('Delete Success');\n            }\n        })\n    });\n}\nasync function InsertStorePrepareWarehouse(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\n\n\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.idDevice)) {\n            if (data.idDevice == 'goal') {\n                Variables.ListString[0][5] = data.tag;\n                if (Variables.BitAdjust[0][1]){\n                    VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write('goto ' + data.tag + '\\r\\n')\n                }\n            }\n            if (data.idDevice == 'line' && data.tag == 'confirm') {\n                if (parseInt(data.levelUser) > 0) {\n                    if (Variables.ListString[0][1] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Sản Phẩm' })\n                    } else if (Variables.ListString[0][5] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Vị Trí Giao' })\n                    } else if (parseInt(Variables.WordAdjust[0][1]) == 0) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Nhập Số Lượng' })\n                    } else if ((parseInt(Variables.ListString[0][3])) < parseInt(Variables.WordAdjust[0][1])) {\n                        // } else if ((parseInt(Variables.ListString[0][3]) - parseInt(Variables.ListString[0][6])) < parseInt(Variables.WordAdjust[0][1])) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Số Lượng Vượt Quá Trong Kho' })\n                    } else {\n\n                        var temp_Insert = {\n                            id: Variables.ListString[0][0],\n                            LotId: Variables.ListString[0][1],\n                            Product: Variables.ListString[0][2],\n                            Destination: Variables.ListString[0][5],\n                            Quantity: Variables.WordAdjust[0][1],\n                            Unit: Variables.ListString[0][4],\n                            Remark: Variables.ListString[0][7],\n                            Package: Variables.ListString[0][13],\n                            Weight: parseInt(Variables.ListString[0][12]),\n                            Table_Name: 'SelectLine',\n                            User: data.currentUser,\n                            LevelUser: data.levelUser,\n                            SaveReport: true\n                        }\n\n                        flow.get(\"global_functions\").InsertStoreSelected(temp_Insert, (result, err) => {\n                            if (err) {\n                                node.warn('MyError: '+err)\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                            } else {\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Tạo Yêu Cầu Thành Công' })\n                                Variables.ListString[0][0] = '---'\n                                Variables.ListString[0][1] = '---'\n                                Variables.ListString[0][2] = '---'\n                                Variables.ListString[0][5] = '---'\n                                Variables.ListString[0][3] = '---'\n                                Variables.ListString[0][4] = '---'\n                                Variables.ListString[0][6] = '---'\n                                Variables.ListString[0][7] = '---'\n                                Variables.ListString[0][12] = '---'\n                                Variables.ListString[0][13] = '---'\n                                Variables.WordAdjust[0][1] = 1\n\n                                flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                    if (err) {\n                                        node.warn(err)\n                                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                                    } else {\n                                        global.set(\"check_store_line_select\", global.get(\"check_store_line_select\") + 1);\n                                        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                    }\n                                })\n                            }\n                        })\n                    }\n                } else {\n                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Chưa Đăng Nhập' })\n\n                }\n            }\n            if (data.idDevice == 'warehouse' && data.tag == 'manual_delivery') {\n                try {\n                    VariableSystem.LocalDB.serialize(() => {\n                        VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                            if (err) {\n                                node.warn(err)\n                            } else {\n                                if (rows.length > 0) {\n                                    flow.get(\"global_functions\").UpdateStore({\n                                        _id: Variables.ListString[0][14],\n                                        Status: 'STOCK',\n                                        Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                                    }, (result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                            flow.get(\"global_functions\").GetStore((result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                        _id: Variables.ListString[0][19],\n                                                        User: data.currentUser,\n                                                        LevelUser: data.levelUser,\n                                                    }, (result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                                                if (err) {\n                                                                    node.warn(err)\n                                                                } else {\n                                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                                                }\n                                                            })\n                                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                        }\n                                                    })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            }\n\n                        })\n                    })\n                } catch (err) {\n                    node.warn(err)\n                }\n            }\n           \n        }\n\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            let TempArr = data.tag.split('_')\n            if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n                node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n                VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write(TempArr[1] + '\\r\\n')\n            }\n        }\n\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n\n\n});\nreturn msg;\n\n\n // if (data.idDevice == 'warehouse' && data.tag == 'confirm') {\n            //     flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //         if (err) {\n            //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //         } else {\n\n            //             var promises = result.map(async (item) => {\n            //                 await DeleteStorePrepareWarehouse(item._id);\n            //             });\n            //             Promise.all(promises)\n            //                 .then(() => {\n            //                     node.warn('delete success all')\n            //                     // All async operations are complete\n            //                     var TempSelectWarehouse = global.get(\"TempSelectWarehouse\");\n\n            //                     var promises_insert = TempSelectWarehouse.selectedRowsData.map(async (item) => {\n            //                         await InsertStorePrepareWarehouse(item);\n            //                     });\n            //                     Promise.all(promises_insert)\n            //                         .then(() => {\n            //                             node.warn('ok get new table');\n            //                             flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //                                 if (err) {\n            //                                     VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                                 } else {\n            //                                     node.warn(result);\n            //                                     VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Prepare_Warehouse', result)\n            //                                 }\n            //                             })\n            //                         })\n            //                         .catch((error) => {\n            //                             // Handle any errors that occurred during async operations\n            //                             console.error(error);\n            //                         });\n\n            //                     // TempSelectWarehouse.selectedRowsData.forEach(function (element) {\n            //                     //     if (element.id !== undefined) {\n            //                     //         // flow.get(\"global_functions\").DeleteStoreSelected(element._id, (result, err) => {\n            //                     //         //     if (err) {\n            //                     //         //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //         //     }\n            //                     //         // })\n            //                     //         flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            //                     //             if (err) {\n            //                     //                 VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //             } else {\n            //                     //                 node.warn('insert data ');\n            //                     //             }\n            //                     //         })\n            //                     //     }\n            //                     // });\n\n            //                 })\n            //                 .catch((error) => {\n            //                     // Handle any errors that occurred during async operations\n            //                     console.error(error);\n            //                 });\n\n            //             // result.forEach(function (element) {\n            //             //     flow.get(\"global_functions\").DeleteStorePrepareWarehouse(element._id, (result, err) => {\n            //             //         if (err) {\n            //             //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //             //         }else{\n            //             //             node.warn(element._id);\n            //             //         }\n            //             //     })\n            //             // });\n            //             // node.warn('finish for');\n\n            //         }\n            //     })\n            //     node.warn('finish delete');\n\n            //     // flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n            //     //     if (err) {\n            //     //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //     //     } else {\n            //     //         VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            //     //     }\n            //     // })\n            // }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "7f0278bd80cf96af",
        "type": "Config_Web Begin",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "x": 300,
        "y": 1200,
        "wires": [
            [
                "3fbf872d38fbde7d"
            ]
        ]
    },
    {
        "id": "3fbf872d38fbde7d",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "MÀN HÌNH",
        "x": 490,
        "y": 1200,
        "wires": [
            [
                "c841317756936609"
            ]
        ]
    },
    {
        "id": "c841317756936609",
        "type": "Config_Web Page",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "MÀN HÌNH LINE",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "87",
        "header_hide": "0",
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "fc0db50c136a8b8e"
            ]
        ]
    },
    {
        "id": "e2d93d181b15d559",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "STORE MANAGE",
        "x": 510,
        "y": 1340,
        "wires": [
            [
                "b430b6a8f3637013"
            ]
        ]
    },
    {
        "id": "b430b6a8f3637013",
        "type": "Config_Web Page_Call",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "STORE",
        "url": "/scada/StoreProjectSanofi",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "onsemi",
        "x": 760,
        "y": 1340,
        "wires": [
            [
                "7b9b99e359f4421a"
            ]
        ]
    },
    {
        "id": "6a6db89724329972",
        "type": "Config_Web End",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "port": "8000",
        "x": 470,
        "y": 1840,
        "wires": [
            [
                "2a1ee6d3eb2a8ecd",
                "7f2d68b4895d115b"
            ]
        ]
    },
    {
        "id": "2a1ee6d3eb2a8ecd",
        "type": "file",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 750,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "7f2d68b4895d115b",
        "type": "file",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "1be241831e56d9f6",
        "type": "Omron Mobile Robot",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "",
        "host": "192.168.1.100",
        "password": "omron",
        "port": "7171",
        "indexPLC": "2",
        "x": 800,
        "y": 1100,
        "wires": [
            [
                "ec42fb12c40655a5"
            ]
        ]
    },
    {
        "id": "4ee20260664e7ea9",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "MEMONIC TAG SYSTEM",
        "x": 530,
        "y": 1580,
        "wires": [
            [
                "f255aae464aff54e"
            ]
        ]
    },
    {
        "id": "f255aae464aff54e",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "100",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 800,
        "y": 1580,
        "wires": [
            [
                "bf661f757f45f0df"
            ]
        ]
    },
    {
        "id": "bf661f757f45f0df",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - BitAdjust",
        "indexPLC": "1",
        "word_start": "400",
        "length_word": "100",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1100,
        "y": 1580,
        "wires": [
            [
                "154d0fd7d0f030c6"
            ]
        ]
    },
    {
        "id": "154d0fd7d0f030c6",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - WordDisplay",
        "indexPLC": "2",
        "word_start": "500",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 810,
        "y": 1620,
        "wires": [
            [
                "a2171060a0139adc"
            ]
        ]
    },
    {
        "id": "a2171060a0139adc",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - WordAdjust",
        "indexPLC": "2",
        "word_start": "700",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1110,
        "y": 1620,
        "wires": [
            [
                "890b11abed38340f"
            ]
        ]
    },
    {
        "id": "890b11abed38340f",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - DWordDisplay",
        "indexPLC": "2",
        "word_start": "900",
        "length_word": "503",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 820,
        "y": 1660,
        "wires": [
            [
                "e26c4ca0845677fa"
            ]
        ]
    },
    {
        "id": "e26c4ca0845677fa",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - DWordAdjust",
        "indexPLC": "2",
        "word_start": "920",
        "length_word": "10",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1110,
        "y": 1660,
        "wires": [
            [
                "8c9726027d11d166"
            ]
        ]
    },
    {
        "id": "cb35f3aac7ae5195",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1980,
        "wires": [
            [
                "5cc3311e094e3882"
            ]
        ]
    },
    {
        "id": "5cc3311e094e3882",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "function 16",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nflow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n    _id: Variables.ListString[0][19],\n    User: 'Auto',\n    LevelUser: 0,\n}, (result, err) => {\n    if (err) {\n        node.warn(err)\n    }\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1980,
        "wires": [
            [
                "785ce3e44c42c958"
            ]
        ]
    },
    {
        "id": "785ce3e44c42c958",
        "type": "debug",
        "z": "1b7ad694981eabe7",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1980,
        "wires": []
    },
    {
        "id": "fc0db50c136a8b8e",
        "type": "Config_Web Page",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "MÀN HÌNH KHO",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada2",
        "scale": "87",
        "header_hide": "0",
        "x": 990,
        "y": 1200,
        "wires": [
            [
                "a78d7ebe4aca8f9f"
            ]
        ]
    },
    {
        "id": "5feea87067702117",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "USER MANAGER",
        "x": 510,
        "y": 1520,
        "wires": [
            [
                "06d163de7318ad77"
            ]
        ]
    },
    {
        "id": "06d163de7318ad77",
        "type": "Config_Web Page_Call",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 760,
        "y": 1520,
        "wires": [
            [
                "4ee20260664e7ea9"
            ]
        ]
    },
    {
        "id": "601719ecbcc94b31",
        "type": "link out",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "83662695725f9e4c",
            "a43b225f45d0a4b1",
            "80f78f4592b6d4ee",
            "f50aac8ed7b2ac19",
            "0e58c65cb08b085c",
            "7019b2cc50909a2b",
            "eb8d1eec9dd40b38",
            "15aa5def3b3c81c0",
            "9200a3ee62030db7",
            "d175505ceee4d7f3",
            "9a2a695a6bc2d508",
            "39b4cf44b60ed1d1"
        ],
        "x": 715,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8c9726027d11d166",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "NJ - Word_Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 800,
        "y": 1700,
        "wires": [
            [
                "34c41670ae601ee0"
            ]
        ]
    },
    {
        "id": "34c41670ae601ee0",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - String",
        "indexPLC": "2",
        "word_start": "1500",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 1090,
        "y": 1700,
        "wires": [
            [
                "f850357e24d88b5d"
            ]
        ]
    },
    {
        "id": "112bbe05c35cad45",
        "type": "Config_Web Memonic",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "System - MOBILE - BITADJUST",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "100",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 840,
        "y": 1760,
        "wires": [
            [
                "6a6db89724329972"
            ]
        ]
    },
    {
        "id": "f850357e24d88b5d",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "MEMONIC MOBILE",
        "x": 520,
        "y": 1760,
        "wires": [
            [
                "112bbe05c35cad45"
            ]
        ]
    },
    {
        "id": "7b9b99e359f4421a",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "REPORT",
        "x": 1000,
        "y": 1340,
        "wires": [
            [
                "8d10e50e1359a8ea"
            ]
        ]
    },
    {
        "id": "2d4602dec1e1475f",
        "type": "Config_Web Page_Report",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "STORE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_store",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Location\",\"capture\":\"Location\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 690,
        "y": 1460,
        "wires": [
            [
                "5feea87067702117"
            ]
        ]
    },
    {
        "id": "79be234428acc1bb",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"150\"},{\"dataField\":\"Location\",\"capture\":\"Location\",\"width\":\"auto\"},{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"auto\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"auto\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 2460,
        "wires": [
            [
                "de561ab3982f934e"
            ]
        ]
    },
    {
        "id": "de561ab3982f934e",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "function 17",
        "func": "// let b = new Date(Date.parse(1690095087833)).toLocaleString('en-GB')\nlet b = new Date(1690095087833).toLocaleString('en-GB')\nnode.warn(b);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2460,
        "wires": [
            [
                "cae37a7aa08b1dbe"
            ]
        ]
    },
    {
        "id": "cae37a7aa08b1dbe",
        "type": "debug",
        "z": "1b7ad694981eabe7",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 2460,
        "wires": []
    },
    {
        "id": "967c0138f04e50f7",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "7f0278bd80cf96af"
            ]
        ]
    },
    {
        "id": "cfb0ef9521eaad03",
        "type": "Config_Web Page_Report",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "DELIVERY",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_delivery_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Location\",         \"capture\": \"Location\",         \"width\": \"auto\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 1020,
        "y": 1420,
        "wires": [
            [
                "2d4602dec1e1475f"
            ]
        ]
    },
    {
        "id": "8d10e50e1359a8ea",
        "type": "Config_Web Page_Report",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "REQUEST LINES",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_select_line",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 720,
        "y": 1380,
        "wires": [
            [
                "d373ae1e27ac4218"
            ]
        ]
    },
    {
        "id": "d373ae1e27ac4218",
        "type": "Config_Web Page_Report",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "PREPARE WARESHOUSE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_prepare_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Destination\",         \"capture\": \"Destination\",         \"width\": \"100\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 750,
        "y": 1420,
        "wires": [
            [
                "cfb0ef9521eaad03"
            ]
        ]
    },
    {
        "id": "3c2dd97e0413fd41",
        "type": "Config_Web Page",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "MÀN HÌNH LINE - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada",
        "scale": "87",
        "header_hide": "1",
        "x": 770,
        "y": 1260,
        "wires": [
            [
                "809582dc70f1d859"
            ]
        ]
    },
    {
        "id": "809582dc70f1d859",
        "type": "Config_Web Page",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name_page": "MÀN HÌNH KHO - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada2",
        "scale": "87",
        "header_hide": "1",
        "x": 1050,
        "y": 1260,
        "wires": [
            [
                "e2d93d181b15d559"
            ]
        ]
    },
    {
        "id": "a78d7ebe4aca8f9f",
        "type": "Config_Web Title",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "title": "FULL SCREEN",
        "x": 500,
        "y": 1260,
        "wires": [
            [
                "3c2dd97e0413fd41"
            ]
        ]
    },
    {
        "id": "0426d01d2c56646b",
        "type": "inject",
        "z": "1b7ad694981eabe7",
        "g": "8ba581d1f5cc3587",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "999a572daa0af581"
            ]
        ]
    },
    {
        "id": "999a572daa0af581",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8ba581d1f5cc3587",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "88dbbeae4a04b11a",
        "type": "plc_omron",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "PLC-Onsemi",
        "host": "192.168.0.10",
        "port": "9600",
        "indexPLC": "1",
        "topic": "Topic",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": 500,
        "PLC_Length_ReadWrite": "3000",
        "PLC_Word_Start_ReadWrite": 0,
        "PLC_WordStartElement": 0,
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "100",
        "PLC_WordStartBitAdjust": "400",
        "PLC_LengthOfWordBitAdjust": "100",
        "PLC_WordStartWordDisplay": "500",
        "PLC_LengthOfWordWordDisplay": 200,
        "PLC_WordStartWordAdjust": "700",
        "PLC_LengthOfWordWordAdjust": 200,
        "PLC_WordStartDWordDisplay": "900",
        "PLC_LengthOfWordDWordDisplay": "10",
        "PLC_WordStartDWordAdjust": "920",
        "PLC_LengthOfWordDWordAdjust": "10",
        "PLC_WordStartComPC": 1000,
        "PLC_LengthOfWordComPC": 50,
        "PLC_IntervalWriteData": 500,
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": 20,
        "x": 1070,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "321817ac5eee12c8",
        "type": "plc_omron",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "Vibration",
        "host": "192.168.1.10",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "2500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 780,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "71c97021b6945382",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "SubFunc Get Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStore = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store', (err, rows) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb({\n                        check: global.get(\"check_store\"),\n                        data:rows\n                    })\n                }\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 260,
        "wires": []
    },
    {
        "id": "9a2a695a6bc2d508",
        "type": "link in",
        "z": "1b7ad694981eabe7",
        "name": "link in 12",
        "links": [
            "355ae0dc15e4ea9b",
            "601719ecbcc94b31"
        ],
        "x": 2585,
        "y": 320,
        "wires": [
            [
                "71c97021b6945382",
                "dbe1f246029f9548",
                "93be5d5b52115c02",
                "0f0f2fec0beb8ce3"
            ]
        ]
    },
    {
        "id": "dbe1f246029f9548",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "SubFunc Insert Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'LotId text UNIQUE NOT NULL,'\n                tempText = tempText + 'Product text NOT NULL,'\n                tempText = tempText + 'Quantity int NOT NULL,'\n                tempText = tempText + 'QuantityOrdering int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Location text,'\n                tempText = tempText + 'State text,'\n                tempText = tempText + 'Package text NOT NULL,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'TimeCreate Date,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store(' + newTempText + ')', (err) => {\n                    if (err) {\n                        cb(null, err)\n                    } else {\n                        let command = `INSERT INTO Store(_id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${LotId}',\n                            '${Product }',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${Location ? Location : ''}',\n                            '${'STOCK'}',\n                            '${Package}',\n                            '${Remark ? Remark : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${new Date()}'\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                            }\n                        });\n                    }\n\n                })\n            })\n\n            // //Save Report\n            // if (SaveReport) {\n            //     VariableSystem.LocalDB.serialize(() => {\n            //         let tempText = ''\n            //         tempText = tempText + '_id text PRIMARY KEY,'\n            //         tempText = tempText + 'id text,'\n            //         tempText = tempText + 'LotId text,'\n            //         tempText = tempText + 'Product text,'\n            //         tempText = tempText + 'Quantity int,'\n            //         tempText = tempText + 'QuantityOrdering int,'\n            //         tempText = tempText + 'Unit text,'\n            //         tempText = tempText + 'Location text,'\n            //         tempText = tempText + 'State text,'\n            //         tempText = tempText + 'Package text,'\n            //         tempText = tempText + 'Remark text,'\n            //         tempText = tempText + 'Weight int,'\n            //         tempText = tempText + 'TimeCreate Date,'\n            //         tempText = tempText + 'User text,'\n            //         tempText = tempText + 'LevelUser text,'\n            //         tempText = tempText + 'TypeReport text,'\n\n            //         let newTempText = tempText.substring(0, tempText.length - 1);\n            //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n            //             if (err) {\n            //                 cb(null, err)\n            //             } else {\n            //                 let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n            //                 '${'a' + Math.random().toString(36)}',\n            //                 '_',\n            //                 '${LotId ? LotId : ''}',\n            //                 '${Product ? Product : ''}',\n            //                 '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n            //                 '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n            //                 '${Unit ? Unit : ''}',\n            //                 '${Location ? Location : ''}',\n            //                 '${State ? State : ''}',\n            //                 '${Package ? Package : ''}',\n            //                 '${Remark ? Remark : ''}',\n            //                 '${parseInt(Weight) ? parseInt(Weight) : 0}',\n            //                 '${Date.now()}',\n            //                 '${User ? User : '_'}',\n            //                 '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n            //                 'INSERT'\n            //                 )`\n            //                 VariableSystem.LocalDB.run(command, (err) => {\n            //                     if (err) {\n            //                         cb(null, err)\n            //                     } else {\n            //                         cb('success')\n            //                     }\n            //                 });\n            //             }\n\n            //         })\n            //     })\n            // }\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 300,
        "wires": []
    },
    {
        "id": "93be5d5b52115c02",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "SubFunc Delete Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\n\nglobal_functions.DeleteStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id !== undefined) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            //Save Report\n                            if (SaveReport) {\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'QuantityOrdering int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Location text,'\n                                    tempText = tempText + 'State text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser text,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            node.warn(err);\n                                            cb(null, err)\n                                        } else {\n                                            cb('success')\n                                            let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${_id}',\n                            '${element.LotId ? element.LotId : ''}',\n                            '${element.Product ? element.Product : ''}',\n                            '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                            '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                            '${element.Unit ? element.Unit : ''}',\n                            '${element.Location ? element.Location : ''}',\n                            '${element.State ? element.State : ''}',\n                            '${element.Package ? element.Package : ''}',\n                            '${element.Remark ? element.Remark : ''}',\n                            '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                            '${Date.now()}',\n                            '${User ? User : '_'}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            'DELETE'\n                            )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n\n                                    })\n                                })\n                            }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 340,
        "wires": []
    },
    {
        "id": "0f0f2fec0beb8ce3",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "SubFunc Update Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.UpdateStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n\n\n        if (_id) {\n            try {\n                let newValue = '';\n                if (typeof (LotId) !== 'undefined') { newValue = newValue + 'LotId=\"' + LotId + '\",' }\n                if (typeof (Product) !== 'undefined') { newValue = newValue + 'Product=\"' + Product + '\",' }\n                if (typeof (Quantity) !== 'undefined') { newValue = newValue + 'Quantity=' + Quantity + ',' }\n                if (typeof (QuantityOrdering) !== 'undefined') { newValue = newValue + 'QuantityOrdering=' + QuantityOrdering + ',' }\n                if (typeof (Unit) !== 'undefined') { newValue = newValue + 'Unit=\"' + Unit + '\",' }\n                if (typeof (Location) !== 'undefined') { newValue = newValue + 'Location=\"' + Location + '\",' }\n                if (typeof (State) !== 'undefined') { newValue = newValue + 'State=\"' + State + '\",' }\n                if (typeof (Package) !== 'undefined') { newValue = newValue + 'Package=\"' + Package + '\",' }\n                if (typeof (Remark) !== 'undefined') { newValue = newValue + 'Remark=\"' + Remark + '\",' }\n                if (typeof (Weight) !== 'undefined') { newValue = newValue + 'Weight=\"' + Weight + '\",' }\n\n                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                VariableSystem.LocalDB.serialize(() => {\n                    let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + _id + '\"'\n                    VariableSystem.LocalDB.run(temp, function (err) {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            cb('success')\n                            VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                                if (err) {\n                                    cb(null, err)\n                                } else {\n                                    //Save Report\n                                    if (SaveReport) {\n                                        VariableSystem.LocalDB.serialize(() => {\n                                            let tempText = ''\n                                            tempText = tempText + '_id text PRIMARY KEY,'\n                                            tempText = tempText + 'id text,'\n                                            tempText = tempText + 'LotId text,'\n                                            tempText = tempText + 'Product text,'\n                                            tempText = tempText + 'Quantity int,'\n                                            tempText = tempText + 'QuantityOrdering int,'\n                                            tempText = tempText + 'Unit text,'\n                                            tempText = tempText + 'Location text,'\n                                            tempText = tempText + 'State text,'\n                                            tempText = tempText + 'Package text,'\n                                            tempText = tempText + 'Remark text,'\n                                            tempText = tempText + 'Weight int,'\n                                            tempText = tempText + 'TimeCreate Date,'\n                                            tempText = tempText + 'User text,'\n                                            tempText = tempText + 'LevelUser text,'\n                                            tempText = tempText + 'TypeReport text,'\n\n                                            let newTempText = tempText.substring(0, tempText.length - 1);\n                                            let element = rows[0]\n                                            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                                if (err) {\n                                                    cb(null, err)\n                                                } else {\n                                                    let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                                                    '${'a' + Math.random().toString(36)}',\n                                                    '${_id}',\n                                                    '${element.LotId ? element.LotId : ''}',\n                                                    '${element.Product ? element.Product : ''}',\n                                                    '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                                                    '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                                                    '${element.Unit ? element.Unit : ''}',\n                                                    '${element.Location ? element.Location : ''}',\n                                                    '${element.State ? element.State : ''}',\n                                                    '${element.Package ? element.Package : ''}',\n                                                    '${element.Remark ? element.Remark : ''}',\n                                                    '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                                    '${Date.now()}',\n                                                    '${User ? User : '_'}',\n                                                    '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                                    'UPDATE'\n                                                    )`\n                                                    VariableSystem.LocalDB.run(command, (err) => {\n                                                        if (err) {\n                                                            node.warn('Update Report Err: ' + err);\n                                                        }\n                                                    });\n                                                }\n\n                                            })\n                                        })\n                                    }\n                                }\n                            })\n                        }\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 380,
        "wires": []
    },
    {
        "id": "e2102b90014159fb",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "SubFunc Get Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\n\n\nglobal_functions.GetStoreSelected = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Process ORDER BY Order_Item ASC' , (err, rows) => { // \n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb({\n                        check: global.get(\"check_store_line_select\"),\n                        data: rows\n                    })\n                }\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "d175505ceee4d7f3",
        "type": "link in",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "link in 13",
        "links": [
            "355ae0dc15e4ea9b",
            "601719ecbcc94b31"
        ],
        "x": 1065,
        "y": 340,
        "wires": [
            [
                "e2102b90014159fb",
                "44c1c35336206a95",
                "99ea6b7990777126"
            ]
        ]
    },
    {
        "id": "44c1c35336206a95",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "SubFunc Insert Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n        let Table_Name = data.Table_Name\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'id text,'\n                tempText = tempText + 'LotId text,'\n                tempText = tempText + 'Product text,'\n                tempText = tempText + 'Destination text,'\n                tempText = tempText + 'Quantity int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Package text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'User text,'\n                tempText = tempText + 'LevelUser int,'\n                tempText = tempText + 'Table_Name text,'\n                tempText = tempText + 'Order_Item Date,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n\n\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Process(' + newTempText + ')', (err) => {\n                    if (err) {\n                        node.warn(err)\n                        cb(null, err)\n                    } else {\n                        let order_value=0\n                        let command = `INSERT INTO Store_Process(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, Table_Name, Order_Item)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${id}',\n                            '${LotId}',\n                            '${Product}',\n                            '${Destination}',\n                            '${parseInt(Quantity)}',\n                            '${Unit}',\n                            '${Remark ? Remark : ''}',\n                            '${Package ? Package : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${User ? User : ''}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            '${Table_Name}',\n                            0\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                                //Update Store Status\n                                try {\n                                    let newValue = '';\n                                    newValue = newValue + 'State=\"UNDER ORDER\",'\n                                    let tempNewValue = newValue.substring(0, newValue.length - 1);\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + id + '\"'\n                                        VariableSystem.LocalDB.run(temp, function (err) {\n                                            if (err) {\n                                                node.warn('Update Store Status Err:' + err)\n                                            } else {\n                                                flow.get(\"global_functions\").GetStore((result, err) => {\n                                                    if (err) {\n                                                        node.warn('Get Store Err:' + err)\n                                                    } else {\n                                                        VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    }\n                                                })\n                                            }\n                                        });\n                                    })\n\n                                } catch (err) {\n                                    cb(null, err)\n                                }\n                                //Save Report\n                                if (SaveReport) {\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let tempText = ''\n                                        tempText = tempText + '_id text PRIMARY KEY,'\n                                        tempText = tempText + 'id text,'\n                                        tempText = tempText + 'LotId text,'\n                                        tempText = tempText + 'Product text,'\n                                        tempText = tempText + 'Destination text,'\n                                        tempText = tempText + 'Quantity int,'\n                                        tempText = tempText + 'Unit text,'\n                                        tempText = tempText + 'Remark text,'\n                                        tempText = tempText + 'Package text,'\n                                        tempText = tempText + 'Weight int,'\n                                        tempText = tempText + 'User text,'\n                                        tempText = tempText + 'LevelUser int,'\n                                        tempText = tempText + 'TimeCreate Date,'\n                                        tempText = tempText + 'TypeReport text,'\n\n                                        let newTempText = tempText.substring(0, tempText.length - 1);\n                                        VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                                            if (err) {\n                                                cb(null, err)\n                                            } else {\n                                                let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${id}',\n                                            '${LotId}',\n                                            '${Product}',\n                                            '${Destination}',\n                                            '${parseInt(Quantity)}',\n                                            '${Unit}',\n                                            '${Remark ? Remark : ''}',\n                                            '${Package ? Package : ''}',\n                                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                                            '${User ? User : ''}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            '${Date.now()}',\n                                            'INSERT'\n                                            )`\n                                                VariableSystem.LocalDB.run(command, (err) => {\n                                                    if (err) {\n                                                        node.warn(err)\n                                                    }\n                                                });\n                                            }\n\n                                        })\n                                    })\n                                }\n                            }\n                        });\n                    }\n                })\n            })\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 340,
        "wires": []
    },
    {
        "id": "99ea6b7990777126",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "2852a10f602f4efb",
        "name": "SubFunc Delete Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        //} else {\n                            // //Save Report\n                            // if (SaveReport) {\n                            //     VariableSystem.LocalDB.serialize(() => {\n                            //         let tempText = ''\n                            //         tempText = tempText + '_id text PRIMARY KEY,'\n                            //         tempText = tempText + 'id text,'\n                            //         tempText = tempText + 'LotId text,'\n                            //         tempText = tempText + 'Product text,'\n                            //         tempText = tempText + 'Destination text,'\n                            //         tempText = tempText + 'Quantity int,'\n                            //         tempText = tempText + 'Unit text,'\n                            //         tempText = tempText + 'Remark text,'\n                            //         tempText = tempText + 'Package text,'\n                            //         tempText = tempText + 'Weight int,'\n                            //         tempText = tempText + 'User text,'\n                            //         tempText = tempText + 'LevelUser int,'\n                            //         tempText = tempText + 'TimeCreate Date,'\n                            //         tempText = tempText + 'TypeReport text,'\n\n                            //         let newTempText = tempText.substring(0, tempText.length - 1);\n                            //         let element = rows[0]\n                            //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                            //             if (err) {\n                            //                 cb(null, err)\n                            //             } else {\n                            //                 let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                            //                 '${'a' + Math.random().toString(36)}',\n                            //                 '${_id}',\n                            //                 '${element.LotId}',\n                            //                 '${element.Product}',\n                            //                 '${element.Destination}',\n                            //                 '${parseInt(element.Quantity)}',\n                            //                 '${element.Unit}',\n                            //                 '${element.Remark ? element.Remark : ''}',\n                            //                 '${element.Package ? element.Package : ''}',\n                            //                 '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                            //                 '${User ? User : ''}',\n                            //                 '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            //                 '${Date.now()}',\n                            //                 'DELETE'\n                            //                 )`\n                            //                 VariableSystem.LocalDB.run(command, (err) => {\n                            //                     if (err) {\n                            //                         node.warn('Update Report Err: ' + err);\n                            //                     }\n                            //                 });\n                            //             }\n\n                            //         })\n                            //     })\n                            // }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store_Process WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "9200a3ee62030db7",
        "type": "link in",
        "z": "1b7ad694981eabe7",
        "g": "3fefec37553d17cc",
        "name": "link in 14",
        "links": [
            "355ae0dc15e4ea9b",
            "601719ecbcc94b31"
        ],
        "x": 945,
        "y": 540,
        "wires": [
            [
                "f49ed4e59db9890a",
                "6c529453d89dd9d2"
            ]
        ]
    },
    {
        "id": "f49ed4e59db9890a",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "3fefec37553d17cc",
        "name": "SubFunc Insert Store Prepare Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStorePrepareWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n\n        if (data._id !== undefined) {\n            try {\n                let newValue = '';\n                newValue = newValue + 'Table_Name=\"' + 'Prepare' + '\",'\n                newValue = newValue + 'Order_Item=\"' + Date.now() + '\",'\n\n                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Prepare\" ORDER BY Order_Item ASC', (err, rows) => {\n                        if (err) {\n                            node.warn(err);\n                            cb(null, err)\n                        } else {\n                            rows.forEach(function (element) {\n                                if (LotId == element.LotId) {\n                                    node.warn('Trùng Lot ID')\n                                    cb(null, 'Trùng LotID')\n                                    return\n                                }\n                            });\n                        }\n\n                    })\n                    node.warn('check123123123')\n                    let temp = 'UPDATE Store_Process SET ' + tempNewValue + ' WHERE _id = \"' + data._id + '\"'\n                    VariableSystem.LocalDB.run(temp, function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                        // //Save Report\n                        // if (SaveReport) {\n                        //     VariableSystem.LocalDB.serialize(() => {\n                        //         let tempText = ''\n                        //         tempText = tempText + '_id text PRIMARY KEY,'\n                        //         tempText = tempText + 'id text,'\n                        //         tempText = tempText + 'LotId text,'\n                        //         tempText = tempText + 'Product text,'\n                        //         tempText = tempText + 'Destination text,'\n                        //         tempText = tempText + 'Quantity int,'\n                        //         tempText = tempText + 'Unit text,'\n                        //         tempText = tempText + 'Remark text,'\n                        //         tempText = tempText + 'Package text,'\n                        //         tempText = tempText + 'Weight int,'\n                        //         tempText = tempText + 'User text,'\n                        //         tempText = tempText + 'LevelUser int,'\n                        //         tempText = tempText + 'TimeCreate Date,'\n                        //         tempText = tempText + 'TypeReport text,'\n\n                        //         let newTempText = tempText.substring(0, tempText.length - 1);\n                        //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Prepare_Warehouse_Report(' + newTempText + ')', (err) => {\n                        //             if (err) {\n                        //                 cb(null, err)\n                        //             } else {\n                        //                 let command = `INSERT INTO Store_Prepare_Warehouse_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                        //                     '${'a' + Math.random().toString(36)}',\n                        //                     '${id}',\n                        //                     '${LotId}',\n                        //                     '${Product}',\n                        //                     '${Destination}',\n                        //                     '${parseInt(Quantity)}',\n                        //                     '${Unit}',\n                        //                     '${Remark ? Remark : ''}',\n                        //                     '${Package ? Package : ''}',\n                        //                     '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                        //                     '${User ? User : ''}',\n                        //                     '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                        //                     '${Date.now()}',\n                        //                     'INSERT'\n                        //                     )`\n                        //                 VariableSystem.LocalDB.run(command, (err) => {\n                        //                     if (err) {\n                        //                         node.warn(err)\n                        //                     }\n                        //                 });\n                        //             }\n                        //         })\n                        //     })\n                        // }\n                    });\n                })\n\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 520,
        "wires": []
    },
    {
        "id": "15aa5def3b3c81c0",
        "type": "link in",
        "z": "1b7ad694981eabe7",
        "g": "47a7f0bc2181bb0c",
        "name": "link in 15",
        "links": [
            "355ae0dc15e4ea9b",
            "601719ecbcc94b31"
        ],
        "x": 945,
        "y": 780,
        "wires": [
            [
                "27fad634b9fb2a8e",
                "cf206efa74978fc6",
                "c5e0330a3b2d3261"
            ]
        ]
    },
    {
        "id": "27fad634b9fb2a8e",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "47a7f0bc2181bb0c",
        "name": "SubFunc Get Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStoreDeliveryWarehouse = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Delivery\" ORDER BY Order_Item ASC', (err, rows) => {\n                if (err) {\n                    node.warn(err);\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                }\n\n            })\n        })\n    } catch (err) {\n        node.warn(err);\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 740,
        "wires": []
    },
    {
        "id": "cf206efa74978fc6",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "47a7f0bc2181bb0c",
        "name": "SubFunc Delete Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreDeliveryWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    // if (SaveReport) {\n                    //     VariableSystem.LocalDB.all('SELECT * FROM Store_Process' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                    //         if (err) {\n                    //             cb(null, err)\n                    //         } else {\n                    //             //Save Report\n                    //             VariableSystem.LocalDB.serialize(() => {\n                    //                 let tempText = ''\n                    //                 tempText = tempText + '_id text PRIMARY KEY,'\n                    //                 tempText = tempText + 'id text,'\n                    //                 tempText = tempText + 'LotId text,'\n                    //                 tempText = tempText + 'Product text,'\n                    //                 tempText = tempText + 'Quantity int,'\n                    //                 tempText = tempText + 'QuantityOrdering int,'\n                    //                 tempText = tempText + 'Unit text,'\n                    //                 tempText = tempText + 'Location text,'\n                    //                 tempText = tempText + 'State text,'\n                    //                 tempText = tempText + 'Package text,'\n                    //                 tempText = tempText + 'Remark text,'\n                    //                 tempText = tempText + 'Weight int,'\n                    //                 tempText = tempText + 'TimeCreate Date,'\n                    //                 tempText = tempText + 'User text,'\n                    //                 tempText = tempText + 'LevelUser text,'\n                    //                 tempText = tempText + 'TypeReport text,'\n\n                    //                 let newTempText = tempText.substring(0, tempText.length - 1);\n                    //                 let element = rows[0]\n                    //                 VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Delivery_Warehouse_Report(' + newTempText + ')', (err) => {\n                    //                     if (err) {\n                    //                         node.warn(err);\n                    //                     } else {\n                    //                         let command = `INSERT INTO Store_Delivery_Warehouse_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                    //                         '${'a' + Math.random().toString(36)}',\n                    //                         '${_id}',\n                    //                         '${element.LotId ? element.LotId : ''}',\n                    //                         '${element.Product ? element.Product : ''}',\n                    //                         '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                    //                         '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                    //                         '${element.Unit ? element.Unit : ''}',\n                    //                         '${element.Location ? element.Location : ''}',\n                    //                         '${element.State ? element.State : ''}',\n                    //                         '${element.Package ? element.Package : ''}',\n                    //                         '${element.Remark ? element.Remark : ''}',\n                    //                         '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                    //                         '${Date.now()}',\n                    //                         '${User ? User : '_'}',\n                    //                         '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                    //                         'DELETE'\n                    //                         )`\n                    //                         VariableSystem.LocalDB.run(command, (err) => {\n                    //                             if (err) {\n                    //                                 node.warn('Update Report Err: ' + err);\n                    //                             }\n                    //                         });\n                    //                     }\n\n                    //                 })\n                    //             })\n                    //         }\n                    //     })\n                    // }\n                    VariableSystem.LocalDB.run('DELETE from Store_Process WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            node.warn('err' + err);\n                            cb(null, err)\n                        }else{\n                            cb('success')\n                        }\n                    });\n                })\n            } catch (err) {\n                node.warn('err' + err);\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 820,
        "wires": []
    },
    {
        "id": "9a41774ce7565c7e",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "API DELETE",
        "url": "/onsemi/delete",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "3ffe9238e3c4e744"
            ]
        ]
    },
    {
        "id": "3ffe9238e3c4e744",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 360,
        "wires": [
            [
                "f0943326675db96d"
            ]
        ]
    },
    {
        "id": "99648eba8bb4ee0f",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "API UPDATE",
        "url": "/onsemi/update",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1670,
        "y": 400,
        "wires": [
            [
                "8f671c540b704de2"
            ]
        ]
    },
    {
        "id": "8f671c540b704de2",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Update DB",
        "func": "flow.get(\"global_functions\").UpdateStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 400,
        "wires": [
            [
                "2bb95a4348f139f6"
            ]
        ]
    },
    {
        "id": "c5fdb1fef9342516",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "API INSERT",
        "url": "/onsemi/insert",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1670,
        "y": 280,
        "wires": [
            [
                "8cabe6bee9a3e899"
            ]
        ]
    },
    {
        "id": "4fbe626ee77432aa",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "API GET DATA",
        "url": "/onsemi/getdata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1680,
        "y": 240,
        "wires": [
            [
                "fa6605db0a3ab9c1"
            ]
        ]
    },
    {
        "id": "fa6605db0a3ab9c1",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStore((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 240,
        "wires": [
            [
                "d93bf42dc67dafe2"
            ]
        ]
    },
    {
        "id": "eacfa62fea2b14fd",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2440,
        "y": 340,
        "wires": []
    },
    {
        "id": "8cabe6bee9a3e899",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStore(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload = {}\n        msg.payload.error=err\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 280,
        "wires": [
            [
                "dcbcbbaaf3e3eb53"
            ]
        ]
    },
    {
        "id": "b0fd3ec07532025a",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "SocketOI",
        "func": "if (msg.payload.error) {\n    node.warn(msg.payload.error);\n    node.send(msg);\n    node.warn(msg.payload);\n} else {\n    var VariableSystem = global.get(\"VariableSystem\");\n    global.set(\"check_store\", global.get(\"check_store\") + 1);\n    VariableSystem.IO.sockets.emit('UpdateOnsemi', msg.payload)\n    node.send('success')\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 340,
        "wires": [
            [
                "eacfa62fea2b14fd"
            ]
        ]
    },
    {
        "id": "d93bf42dc67dafe2",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2040,
        "y": 240,
        "wires": []
    },
    {
        "id": "6c3d1be22b773f37",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Get DB",
        "func": "\nif (msg.payload.error) {\n    node.warn(msg.payload.error);\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").GetStore((result, err) => {\n        if (err) {\n            msg.payload = {}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            msg.payload = result;\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 340,
        "wires": [
            [
                "b0fd3ec07532025a"
            ]
        ]
    },
    {
        "id": "ebb5dc0e437ee002",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "API IMPORT",
        "url": "/onsemi/import",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "e0955777c6666f02"
            ]
        ]
    },
    {
        "id": "e0955777c6666f02",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1d3c3684a3d5afc4",
        "name": "Import DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar counterErr = 0\n\nasync function InsertStoreAsync(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStore(element, (result, err) => {\n            if (err) {\n                counterErr = counterErr + 1;\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\nvar promises = msg.payload.map(async (item) => {\n    await InsertStoreAsync(item);\n});\nPromise.all(promises)\n    .then(() => {\n        if (counterErr > 0) {\n            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Have ' + counterErr + \"lines cannot import\" })\n        }\n        node.send(msg)\n    })",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 320,
        "wires": [
            [
                "6027c85f55d2d316"
            ]
        ]
    },
    {
        "id": "e2094d16e4f1c763",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "512f48bf5bda8a0f",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "262d78baf232bc3a",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "512f48bf5bda8a0f",
        "name": "Select Row",
        "func": "var Variables = global.get(\"Variable\");\n\nVariables.ListString[0][0] = msg.payload.id;\nVariables.ListString[0][1] = msg.payload.LotId;\nVariables.ListString[0][2] = msg.payload.Product;\nVariables.ListString[0][3] = msg.payload.Quantity;\n// Variables.ListString[0][4] = msg.payload.Unit;\n// Variables.ListString[0][6] = msg.payload.QuantityOrdering;\n// Variables.ListString[0][12] = msg.payload.Weight;\nVariables.ListString[0][13] = msg.payload.Package;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "e2094d16e4f1c763"
            ]
        ]
    },
    {
        "id": "2924396c0f82d933",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "512f48bf5bda8a0f",
        "name": "API SELECT ROW",
        "url": "/onsemi/select",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "262d78baf232bc3a"
            ]
        ]
    },
    {
        "id": "eaf5b60edfbe717e",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "API SELECT UPDATE",
        "url": "/onsemi/select_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "b93b04becbb85e23"
            ]
        ]
    },
    {
        "id": "a10259f97b6267f5",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "Insert Prepare Warehouse",
        "func": "var Variables = global.get(\"Variable\");\nif (msg.payload.error) {\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").InsertStorePrepareWarehouse(msg.payload, (result, err) => {\n        if (err) {\n            msg.payload={}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            node.send(msg);\n        }\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 620,
        "wires": [
            [
                "349b05ca4a8871a0"
            ]
        ]
    },
    {
        "id": "f4d44ec01558e29c",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 760,
        "y": 560,
        "wires": []
    },
    {
        "id": "a83d0ba50dc1a7e2",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "Get Temp Select Warehouse Check Weight",
        "func": "var Variables = global.get(\"Variable\");\n\nglobal.set('TempSelectWarehouse',msg.payload)\n\nlet currentWeight=0\nmsg.payload.selectedRowsData.forEach(function(element) {\n    currentWeight = currentWeight+parseInt(element.Weight)*parseInt(element.Quantity)\n});\n\nVariables.ListString[0][10] = parseFloat(currentWeight)/1000 +' kg';\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "349b05ca4a8871a0",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nif (msg.payload.error) {\n    node.send(msg);\n    node.warn(msg);\n} else {\n    flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n        if (err) {\n            msg.payload={}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            global.set(\"check_store_line_select\", global.get(\"check_store_line_select\") + 1);\n            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            [
                "f4d44ec01558e29c"
            ]
        ]
    },
    {
        "id": "5ad66b277afaa5fc",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "API DELETE",
        "url": "/onsemi/delete_delivery_warehouse",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "7a57b417ffc24473"
            ]
        ]
    },
    {
        "id": "7a57b417ffc24473",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "9a95d95fd8ea0f38"
            ]
        ]
    },
    {
        "id": "533ef46d1ddf0800",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "API GET DATA",
        "url": "/onsemi/getdata_delivery_warehouse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "fe7c432e57d2b2d7"
            ]
        ]
    },
    {
        "id": "fe7c432e57d2b2d7",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 740,
        "wires": [
            [
                "9054f0015c5958e6"
            ]
        ]
    },
    {
        "id": "91f44cf7934509eb",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 800,
        "y": 800,
        "wires": []
    },
    {
        "id": "9054f0015c5958e6",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 560,
        "y": 740,
        "wires": []
    },
    {
        "id": "9a95d95fd8ea0f38",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\n\nif (msg.payload.error) {\n    node.warn(msg.payload.error);\n\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n        if (err) {\n            msg.payload = {}\n            msg.payload.error = err\n            node.send(msg);\n        } else {\n            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            msg.payload = result;\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 800,
        "wires": [
            [
                "91f44cf7934509eb"
            ]
        ]
    },
    {
        "id": "6f65430355b07e80",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "ef73c41a3e7459a6",
        "name": "API SELECT DELETE",
        "url": "/onsemi/delete_select",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "edc6ebe9ee04d43b"
            ]
        ]
    },
    {
        "id": "edc6ebe9ee04d43b",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "ef73c41a3e7459a6",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreSelected(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "a3212c07cc3c4483"
            ]
        ]
    },
    {
        "id": "0eff924b2a6fc059",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "ef73c41a3e7459a6",
        "name": "API SELECT GET DATA",
        "url": "/onsemi/getdata_select",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "a3212c07cc3c4483"
            ]
        ]
    },
    {
        "id": "a3212c07cc3c4483",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "ef73c41a3e7459a6",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "b374504ada8d1c19"
            ]
        ]
    },
    {
        "id": "b374504ada8d1c19",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "ef73c41a3e7459a6",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "ee95fcb2609c7924",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "PLC",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\n\nif (Variable.ListString[0][17] != Variable.ListString[1][5].replace(/\\s+/g, '')) {\n    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var str = Variable.ListString[0][17]\n\n    var buffer = new Buffer(str, 'utf8');\n    for (let i = 0; i < buffer.length; i++) {\n        if (i < 40) byteArray[i] = buffer[i];\n    }\n\n    const intArray = [];\n    for (let i = 0; i < byteArray.length; i += 2) {\n        const byte1 = byteArray[i];\n        const byte2 = byteArray[i + 1];\n        const combinedInt = (byte2 << 8) | byte1;\n        intArray.push(combinedInt);\n    }\n\n    VariableSystem.COMMUNICATION_PLC_OMRON[1].write('D2100', intArray);\n    msg.payload = 'Write Data'\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "80adb3b624b06f72",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "Auto Delete",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nif (global.get(\"timer_delete_data\")>0){\n    node.warn(\"my warning OKOKOK\");\n    global.set(\"timer_delete_data\", global.get(\"timer_delete_data\")-1)\n}\n\nif (Variables.ListString[0] && Variables.ListString[1]) {\n\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 3) {\n        global.set(\"timer_delete_data\", 5)\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    node.send(msg);\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n\n    //ThatBai\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 4) {\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                        }\n                                                    })\n                                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2080,
        "wires": [
            [
                "ab51caee6ca49e2f"
            ]
        ]
    },
    {
        "id": "9210f00bbedaabf9",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Prepare_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2280,
        "wires": [
            [
                "1157c4d1da6d62d2"
            ]
        ]
    },
    {
        "id": "d6a2d0e81fafd6dd",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "name": "GET REPORT PREPARE",
        "url": "/report_prepare_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 2280,
        "wires": [
            [
                "9210f00bbedaabf9"
            ]
        ]
    },
    {
        "id": "1157c4d1da6d62d2",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 2280,
        "wires": []
    },
    {
        "id": "c020e93203d2f58b",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "Interval 2 s",
        "func": "msg.payload=''\nsetInterval(()=>{\n    node.send(msg);\n},2000)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2080,
        "wires": [
            [
                "ee95fcb2609c7924",
                "424842b4cb1e6c18"
            ]
        ]
    },
    {
        "id": "39b4cf44b60ed1d1",
        "type": "link in",
        "z": "1b7ad694981eabe7",
        "name": "link in 16",
        "links": [
            "355ae0dc15e4ea9b",
            "601719ecbcc94b31"
        ],
        "x": 105,
        "y": 2080,
        "wires": [
            [
                "c020e93203d2f58b"
            ]
        ]
    },
    {
        "id": "424842b4cb1e6c18",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "Update Data Control Robot",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Delivery\" ORDER BY Order_Item ASC', (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                if (rows.length > 0) {\n                    Variables.ListString[0][14] = rows[0].id;\n                    Variables.ListString[0][15] = rows[0].LotId;\n                    Variables.ListString[0][16] = rows[0].Product;\n                    Variables.ListString[0][17] = rows[0].Destination;\n                    Variables.ListString[0][18] = rows[0].Quantity;\n                    Variables.ListString[0][19] = rows[0]._id;\n                    Variables.ListString[0][20] = rows[0].User;\n                    node.send(msg);\n                } else {\n                    Variables.ListString[0][14] = '---';\n                    Variables.ListString[0][15] = '---';\n                    Variables.ListString[0][16] = '---';\n                    Variables.ListString[0][17] = '---';\n                    Variables.ListString[0][18] = '---';\n                    Variables.ListString[0][20] = '---';\n                }\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2080,
        "wires": [
            [
                "80adb3b624b06f72"
            ]
        ]
    },
    {
        "id": "26efaf67fb0f6e2e",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2240,
        "wires": [
            [
                "eeebb12735b958cb"
            ]
        ]
    },
    {
        "id": "236d6abe6ace36a6",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "GET REPORT STORE",
        "url": "/report_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2240,
        "wires": [
            [
                "26efaf67fb0f6e2e"
            ]
        ]
    },
    {
        "id": "eeebb12735b958cb",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 2240,
        "wires": []
    },
    {
        "id": "114fc6e542f1da98",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "GET REPORT DELIVERY",
        "url": "/report_delivery_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 2320,
        "wires": [
            [
                "d7bc3a0b483a7cae"
            ]
        ]
    },
    {
        "id": "d7bc3a0b483a7cae",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Delivery_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2320,
        "wires": [
            [
                "6e1950b541063494"
            ]
        ]
    },
    {
        "id": "6e1950b541063494",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 2320,
        "wires": []
    },
    {
        "id": "93931c6d73fe2ac7",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "GET REPORT SELECT",
        "url": "/report_select_line/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2360,
        "wires": [
            [
                "c7c7b213e2755e61"
            ]
        ]
    },
    {
        "id": "c7c7b213e2755e61",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Select_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2360,
        "wires": [
            [
                "45df16e37c18fe8d"
            ]
        ]
    },
    {
        "id": "45df16e37c18fe8d",
        "type": "http response",
        "z": "1b7ad694981eabe7",
        "g": "226c29311092da19",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 580,
        "y": 2360,
        "wires": []
    },
    {
        "id": "c7e72a791afe7321",
        "type": "http in",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "API INSERT",
        "url": "/onsemi/insert_delivery_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "23317b8c54fb9679"
            ]
        ]
    },
    {
        "id": "23317b8c54fb9679",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "8e6256a8baa50e3d",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStoreDeliveryWarehouse(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload={}\n        msg.payload.error=err\n        node.warn(msg);\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 780,
        "wires": [
            [
                "9a95d95fd8ea0f38"
            ]
        ]
    },
    {
        "id": "c5e0330a3b2d3261",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "47a7f0bc2181bb0c",
        "name": "SubFunc Insert Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreDeliveryWarehouse = function (arrdata, cb) {\n    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n        if (err) {\n            node.warn(err)\n            cb(null, err)\n        } else {\n            if (result.length == 0) {\n                let set_order_value = 0\n                arrdata.forEach(function (data, index) {\n                    if (typeof data === 'object' && data !== null) {\n                        const isLastElement = index === arrdata.length - 1;\n                        let _id = data._id\n                        let id = data.id\n                        let LotId = data.LotId\n                        let Product = data.Product\n                        let Destination = data.Destination\n                        let Quantity = data.Quantity\n                        let Unit = data.Unit\n                        let Remark = data.Remark\n                        let Package = data.Package\n                        let Weight = data.Weight\n                        let User = data.User\n                        let LevelUser = data.LevelUser\n\n                        if (_id !== undefined) {\n                            try {\n                                set_order_value = set_order_value + 1\n\n                                let newValue = '';\n                                newValue = newValue + 'Table_Name=\"' + 'Delivery' + '\",'\n                                newValue = newValue + 'Order_Item=\"' + (Date.now() + set_order_value) + '\",'\n\n                                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let temp = 'UPDATE Store_Process SET ' + tempNewValue + ' WHERE _id = \"' + _id + '\"'\n                                    VariableSystem.LocalDB.run(temp, function (err) {\n                                        if (err) {\n                                            cb(null, err)\n                                        }\n                                        if (isLastElement) {\n                                            cb('success')\n                                        }\n                                    });\n                                })\n\n                            } catch (err) {\n                                cb(null, err)\n                            }\n                        }\n                    }\n                });\n            } else {\n                cb(null,'Đang Còn Giao Hàng')\n            }\n        }\n    })\n}\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "ab51caee6ca49e2f",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "ec42fb12c40655a5",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "e4a43d414cf5097e",
        "name": "setDataStatus",
        "func": "var Variables = global.get(\"Variable\");\nVariables.ListString[0][25] = msg.payload.dataStateOfCharge\nVariables.ListString[0][26] = msg.payload.dataLocalizationsScore\nVariables.ListString[0][27] = msg.payload.dataTemperature",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6c529453d89dd9d2",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "3fefec37553d17cc",
        "name": "SubFunc Check Prepare Condition",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.CheckPrepareConditionWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n        if (data._id !== undefined) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Prepare\" ORDER BY Order_Item ASC', (err, rows) => {\n                        if (err) {\n                            node.warn(err);\n                            cb(null, err)\n                        } else {\n                            let checkTrung=false\n                            rows.forEach(function (element) {\n                                if (LotId == element.LotId) {\n                                    node.warn('Trùng Lot ID')\n                                    checkTrung=true\n                                }\n                            });\n                            if(checkTrung){\n                                cb(null,'Trùng Lot ID')\n                            } else {\n                                if(rows.length>=3){\n                                    cb(null,'Quá Số Lượng')\n                                }else{\n                                    cb(1)\n                                }\n                            }\n                        }\n\n                    })\n                })\n\n            } catch (err) {\n                node.send(err)\n            }\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 480,
        "wires": []
    },
    {
        "id": "b93b04becbb85e23",
        "type": "function",
        "z": "1b7ad694981eabe7",
        "g": "1ff2bb5e506ba5fa",
        "name": "CheckPrepareConditionWarehouse",
        "func": "var Variables = global.get(\"Variable\");\nflow.get(\"global_functions\").CheckPrepareConditionWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload={}\n        msg.payload.error=err\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 620,
        "wires": [
            [
                "a10259f97b6267f5"
            ]
        ]
    },
    {
        "id": "b142759ddc3f59d2",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "title": "EXCEL",
        "x": 400,
        "y": 1200,
        "wires": [
            [
                "a9f49bbd19b9bf03"
            ]
        ]
    },
    {
        "id": "a9f49bbd19b9bf03",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Nhân Viên",
        "url": "/excel/NhanVien2",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 630,
        "y": 1200,
        "wires": [
            [
                "8847461c9e24ace0"
            ]
        ]
    },
    {
        "id": "8847461c9e24ace0",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Sản Phẩm",
        "url": "/excel/SanPham2",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 870,
        "y": 1200,
        "wires": [
            [
                "e0d67202c6301587"
            ]
        ]
    },
    {
        "id": "e0d67202c6301587",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "title": "ALARM",
        "x": 400,
        "y": 1260,
        "wires": [
            [
                "cfd68d16f9a08b4e"
            ]
        ]
    },
    {
        "id": "cfd68d16f9a08b4e",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "cb8224be6d7678bd"
            ]
        ]
    },
    {
        "id": "cb8224be6d7678bd",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 870,
        "y": 1260,
        "wires": [
            [
                "4690eacc55b79da9"
            ]
        ]
    },
    {
        "id": "4690eacc55b79da9",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "title": "LOG REPORT",
        "x": 420,
        "y": 1320,
        "wires": [
            [
                "5f6b426ef81cec28"
            ]
        ]
    },
    {
        "id": "5f6b426ef81cec28",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 640,
        "y": 1320,
        "wires": [
            [
                "397a4d86095f2936"
            ]
        ]
    },
    {
        "id": "397a4d86095f2936",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 860,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "dcfa39508bca0f07",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "name_page": "Máy 12",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_12",
        "scale": "100",
        "x": 780,
        "y": 720,
        "wires": [
            [
                "6bc27efb868076f4"
            ]
        ]
    },
    {
        "id": "c6c07197631e8ed2",
        "type": "plc_omron",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "PLC OMRON STAMPING MACHINE 2",
        "host": "192.168.2.222",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "800",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "70",
        "PLC_WordStartBitDisplay": "70",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "500",
        "PLC_WordStartWordAdjust": "600",
        "PLC_LengthOfWordWordAdjust": "50",
        "PLC_WordStartDWordDisplay": "650",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "700",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 870,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f7735460ca393cc3",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "Write Stamping Machine 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "7cc57b57c48845cf",
                "b064a73cf83e2e6b"
            ]
        ]
    },
    {
        "id": "7cc57b57c48845cf",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/StampingMachine2.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "efc35d5397e3efe2",
                "d6556be13806c23e"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "a64da1f771b5f642",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "efc35d5397e3efe2"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "d3bdcee805b91d1a",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "efc35d5397e3efe2"
            ]
        ]
    },
    {
        "id": "323f28cb826e25cb",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 450,
        "y": 280,
        "wires": [
            [
                "efc35d5397e3efe2"
            ]
        ]
    },
    {
        "id": "40f0ed8d8aa3f036",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "Stamping Machine PROCESS",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\n\nvar SubFunction = global.get(\"SubFunction\");\nvar ProjectVariables = global.get(\"ProjectVariable\");\nvar ProjectFunction = global.get(\"ProjectFunction\");\nvar count = 0\nvar Save1 = 0\nvar Save2 = 0\nvar Save3 = 0\nvar Save4 = 0\nvar Save5 = 0\nvar Save6 = 0\nvar Save7 = 0\nvar Save8 = 0\nvar Save9 = 0\nvar Save10 = 0\nvar Save11 = 0\nvar Save12 = 0\nvar Save13 = 0\nvar Save14 = 0\nVariables.ListString[1] = new Array(140).fill('---');\nvar myInitial = setInterval(fnTimer1s, 1000);\n\nfunction fnTimer1s() {\n    if (Save1 > 0) Save1 = Save1 - 1\n    if (Save2 > 0) Save2 = Save2 - 1\n    if (Save3 > 0) Save3 = Save3 - 1\n    if (Save4 > 0) Save4 = Save4 - 1\n    if (Save5 > 0) Save5 = Save5 - 1\n    if (Save6 > 0) Save6 = Save6 - 1\n    if (Save7 > 0) Save7 = Save7 - 1\n    if (Save8 > 0) Save8 = Save8 - 1\n    if (Save9 > 0) Save9 = Save9 - 1\n    if (Save10 > 0) Save10 = Save10 - 1\n    if (Save11 > 0) Save11 = Save11 - 1\n    if (Save12 > 0) Save12 = Save12 - 1\n    if (Save13 > 0) Save13 = Save13 - 1\n    if (Save14 > 0) Save14 = Save14 - 1\n    let a = new Date()\n    Variables.ListString[1][100] = ((a.getHours() < 10 ? \"0\" : '') + a.getHours() + ':' + (a.getMinutes() < 10 ? \"0\" : '') + a.getMinutes() + ':' + (a.getSeconds() < 10 ? \"0\" : '') + a.getSeconds())\n    Variables.ListString[1][101] = ((a.getDate() < 10 ? \"0\" : '') + a.getDate() + '/' + ((a.getMonth() + 1) < 10 ? \"0\" : '') + (a.getMonth() + 1) + '/' + (a.getFullYear() < 10 ? \"0\" : '') + a.getFullYear())\n}\ntry {\n    setInterval(function () {\n        if (parseInt(ProjectVariables.waitStart) > 0) {\n            ProjectVariables.waitStart = parseInt(ProjectVariables.waitStart) - 1\n        }\n\n        //Check Operator Machine 1\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][31], ProjectVariables.Old_Machine1_NV1, Variables.ListString[1][1],\n                    Variables.WordDisplay[1][32], ProjectVariables.Old_Machine1_NV2, Variables.ListString[1][2],\n                    Variables.WordDisplay[1][33], ProjectVariables.Old_Machine1_NV3, Variables.ListString[1][3],\n                    Variables.WordDisplay[1][34], ProjectVariables.Old_Machine1_NV4, Variables.ListString[1][4],\n                    Variables.WordDisplay[1][35], ProjectVariables.Old_Machine1_NV5, Variables.ListString[1][5],\n                )\n            ProjectVariables.Old_Machine1_NV1 = old_id1\n            ProjectVariables.Old_Machine1_NV2 = old_id2\n            ProjectVariables.Old_Machine1_NV3 = old_id3\n            ProjectVariables.Old_Machine1_NV4 = old_id4\n            ProjectVariables.Old_Machine1_NV5 = old_id5\n\n            Variables.ListString[1][1] = list1\n            Variables.ListString[1][2] = list2\n            Variables.ListString[1][3] = list3\n            Variables.ListString[1][4] = list4\n            Variables.ListString[1][5] = list5\n        }\n        //Check Operator Machine 2\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][81], ProjectVariables.Old_Machine2_NV1, Variables.ListString[1][11],\n                    Variables.WordDisplay[1][82], ProjectVariables.Old_Machine2_NV2, Variables.ListString[1][12],\n                    Variables.WordDisplay[1][83], ProjectVariables.Old_Machine2_NV3, Variables.ListString[1][13],\n                    Variables.WordDisplay[1][84], ProjectVariables.Old_Machine2_NV4, Variables.ListString[1][14],\n                    Variables.WordDisplay[1][85], ProjectVariables.Old_Machine2_NV5, Variables.ListString[1][15],\n                )\n            ProjectVariables.Old_Machine2_NV1 = old_id1\n            ProjectVariables.Old_Machine2_NV2 = old_id2\n            ProjectVariables.Old_Machine2_NV3 = old_id3\n            ProjectVariables.Old_Machine2_NV4 = old_id4\n            ProjectVariables.Old_Machine2_NV5 = old_id5\n            Variables.ListString[1][11] = list1\n            Variables.ListString[1][12] = list2\n            Variables.ListString[1][13] = list3\n            Variables.ListString[1][14] = list4\n            Variables.ListString[1][15] = list5\n        }\n        //Check Operator Machine 3\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][131], ProjectVariables.Old_Machine3_NV1, Variables.ListString[1][21],\n                    Variables.WordDisplay[1][132], ProjectVariables.Old_Machine3_NV2, Variables.ListString[1][22],\n                    Variables.WordDisplay[1][133], ProjectVariables.Old_Machine3_NV3, Variables.ListString[1][23],\n                    Variables.WordDisplay[1][134], ProjectVariables.Old_Machine3_NV4, Variables.ListString[1][24],\n                    Variables.WordDisplay[1][135], ProjectVariables.Old_Machine3_NV5, Variables.ListString[1][25]\n                )\n            ProjectVariables.Old_Machine3_NV1 = old_id1\n            ProjectVariables.Old_Machine3_NV2 = old_id2\n            ProjectVariables.Old_Machine3_NV3 = old_id3\n            ProjectVariables.Old_Machine3_NV4 = old_id4\n            ProjectVariables.Old_Machine3_NV5 = old_id5\n            Variables.ListString[1][21] = list1\n            Variables.ListString[1][22] = list2\n            Variables.ListString[1][23] = list3\n            Variables.ListString[1][24] = list4\n            Variables.ListString[1][25] = list5\n        }\n        //Check Operator Machine 4\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][181], ProjectVariables.Old_Machine4_NV1, Variables.ListString[1][31],\n                    Variables.WordDisplay[1][182], ProjectVariables.Old_Machine4_NV2, Variables.ListString[1][32],\n                    Variables.WordDisplay[1][183], ProjectVariables.Old_Machine4_NV3, Variables.ListString[1][33],\n                    Variables.WordDisplay[1][184], ProjectVariables.Old_Machine4_NV4, Variables.ListString[1][34],\n                    Variables.WordDisplay[1][185], ProjectVariables.Old_Machine4_NV5, Variables.ListString[1][35],\n                )\n            ProjectVariables.Old_Machine4_NV1 = old_id1\n            ProjectVariables.Old_Machine4_NV2 = old_id2\n            ProjectVariables.Old_Machine4_NV3 = old_id3\n            ProjectVariables.Old_Machine4_NV4 = old_id4\n            ProjectVariables.Old_Machine4_NV5 = old_id5\n            Variables.ListString[1][31] = list1\n            Variables.ListString[1][32] = list2\n            Variables.ListString[1][33] = list3\n            Variables.ListString[1][34] = list4\n            Variables.ListString[1][35] = list5\n        }\n        //Check Operator Machine 5\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][231], ProjectVariables.Old_Machine5_NV1, Variables.ListString[1][41],\n                    Variables.WordDisplay[1][232], ProjectVariables.Old_Machine5_NV2, Variables.ListString[1][42],\n                    Variables.WordDisplay[1][233], ProjectVariables.Old_Machine5_NV3, Variables.ListString[1][43],\n                    Variables.WordDisplay[1][234], ProjectVariables.Old_Machine5_NV4, Variables.ListString[1][44],\n                    Variables.WordDisplay[1][235], ProjectVariables.Old_Machine5_NV5, Variables.ListString[1][45]\n                )\n            ProjectVariables.Old_Machine5_NV1 = old_id1\n            ProjectVariables.Old_Machine5_NV2 = old_id2\n            ProjectVariables.Old_Machine5_NV3 = old_id3\n            ProjectVariables.Old_Machine5_NV4 = old_id4\n            ProjectVariables.Old_Machine5_NV5 = old_id5\n            Variables.ListString[1][41] = list1\n            Variables.ListString[1][42] = list2\n            Variables.ListString[1][43] = list3\n            Variables.ListString[1][44] = list4\n            Variables.ListString[1][45] = list5\n        }\n        //Check Operator Machine 6\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][281], ProjectVariables.Old_Machine6_NV1, Variables.ListString[1][51],\n                    Variables.WordDisplay[1][282], ProjectVariables.Old_Machine6_NV2, Variables.ListString[1][52],\n                    Variables.WordDisplay[1][283], ProjectVariables.Old_Machine6_NV3, Variables.ListString[1][53],\n                    Variables.WordDisplay[1][284], ProjectVariables.Old_Machine6_NV4, Variables.ListString[1][54],\n                    Variables.WordDisplay[1][285], ProjectVariables.Old_Machine6_NV5, Variables.ListString[1][55]\n                )\n            ProjectVariables.Old_Machine6_NV1 = old_id1\n            ProjectVariables.Old_Machine6_NV2 = old_id2\n            ProjectVariables.Old_Machine6_NV3 = old_id3\n            ProjectVariables.Old_Machine6_NV4 = old_id4\n            ProjectVariables.Old_Machine6_NV5 = old_id5\n            Variables.ListString[1][51] = list1\n            Variables.ListString[1][52] = list2\n            Variables.ListString[1][53] = list3\n            Variables.ListString[1][54] = list4\n            Variables.ListString[1][55] = list5\n        }\n        //Check Operator Machine 7\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][331], ProjectVariables.Old_Machine7_NV1, Variables.ListString[1][61],\n                    Variables.WordDisplay[1][332], ProjectVariables.Old_Machine7_NV2, Variables.ListString[1][62],\n                    Variables.WordDisplay[1][333], ProjectVariables.Old_Machine7_NV3, Variables.ListString[1][63],\n                    Variables.WordDisplay[1][334], ProjectVariables.Old_Machine7_NV4, Variables.ListString[1][64],\n                    Variables.WordDisplay[1][335], ProjectVariables.Old_Machine7_NV5, Variables.ListString[1][65],\n                )\n            ProjectVariables.Old_Machine7_NV1 = old_id1\n            ProjectVariables.Old_Machine7_NV2 = old_id2\n            ProjectVariables.Old_Machine7_NV3 = old_id3\n            ProjectVariables.Old_Machine7_NV4 = old_id4\n            ProjectVariables.Old_Machine7_NV5 = old_id5\n            Variables.ListString[1][61] = list1\n            Variables.ListString[1][62] = list2\n            Variables.ListString[1][63] = list3\n            Variables.ListString[1][64] = list4\n            Variables.ListString[1][65] = list5\n        }\n        //Check Operator Machine 8\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][381], ProjectVariables.Old_Machine8_NV1, Variables.ListString[1][71],\n                    Variables.WordDisplay[1][382], ProjectVariables.Old_Machine8_NV2, Variables.ListString[1][72],\n                    Variables.WordDisplay[1][383], ProjectVariables.Old_Machine8_NV3, Variables.ListString[1][73],\n                    Variables.WordDisplay[1][384], ProjectVariables.Old_Machine8_NV4, Variables.ListString[1][74],\n                    Variables.WordDisplay[1][385], ProjectVariables.Old_Machine8_NV5, Variables.ListString[1][75],\n                )\n            ProjectVariables.Old_Machine8_NV1 = old_id1\n            ProjectVariables.Old_Machine8_NV2 = old_id2\n            ProjectVariables.Old_Machine8_NV3 = old_id3\n            ProjectVariables.Old_Machine8_NV4 = old_id4\n            ProjectVariables.Old_Machine8_NV5 = old_id5\n            Variables.ListString[1][71] = list1\n            Variables.ListString[1][72] = list2\n            Variables.ListString[1][73] = list3\n            Variables.ListString[1][74] = list4\n            Variables.ListString[1][75] = list5\n        }\n        //Check Operator Machine 9\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][431], ProjectVariables.Old_Machine9_NV1, Variables.ListString[1][81],\n                    Variables.WordDisplay[1][432], ProjectVariables.Old_Machine9_NV2, Variables.ListString[1][82],\n                    Variables.WordDisplay[1][433], ProjectVariables.Old_Machine9_NV3, Variables.ListString[1][83],\n                    Variables.WordDisplay[1][434], ProjectVariables.Old_Machine9_NV4, Variables.ListString[1][84],\n                    Variables.WordDisplay[1][435], ProjectVariables.Old_Machine9_NV5, Variables.ListString[1][85],\n                )\n            ProjectVariables.Old_Machine9_NV1 = old_id1\n            ProjectVariables.Old_Machine9_NV2 = old_id2\n            ProjectVariables.Old_Machine9_NV3 = old_id3\n            ProjectVariables.Old_Machine9_NV4 = old_id4\n            ProjectVariables.Old_Machine9_NV5 = old_id5\n            Variables.ListString[1][81] = list1\n            Variables.ListString[1][82] = list2\n            Variables.ListString[1][83] = list3\n            Variables.ListString[1][84] = list4\n            Variables.ListString[1][85] = list5\n        }\n        //Check Operator Machine 10\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][481], ProjectVariables.Old_Machine10_NV1, Variables.ListString[1][91],\n                    Variables.WordDisplay[1][482], ProjectVariables.Old_Machine10_NV2, Variables.ListString[1][92],\n                    Variables.WordDisplay[1][483], ProjectVariables.Old_Machine10_NV3, Variables.ListString[1][93],\n                    Variables.WordDisplay[1][484], ProjectVariables.Old_Machine10_NV4, Variables.ListString[1][94],\n                    Variables.WordDisplay[1][485], ProjectVariables.Old_Machine10_NV5, Variables.ListString[1][95],\n                )\n            ProjectVariables.Old_Machine10_NV1 = old_id1\n            ProjectVariables.Old_Machine10_NV2 = old_id2\n            ProjectVariables.Old_Machine10_NV3 = old_id3\n            ProjectVariables.Old_Machine10_NV4 = old_id4\n            ProjectVariables.Old_Machine10_NV5 = old_id5\n            Variables.ListString[1][91] = list1\n            Variables.ListString[1][92] = list2\n            Variables.ListString[1][93] = list3\n            Variables.ListString[1][94] = list4\n            Variables.ListString[1][95] = list5\n        }\n        //Check Operator Machine 11\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][31], ProjectVariables.Old_Machine11_NV1, Variables.ListString[2][1],\n                    Variables.WordDisplay[2][32], ProjectVariables.Old_Machine11_NV2, Variables.ListString[2][2],\n                    Variables.WordDisplay[2][33], ProjectVariables.Old_Machine11_NV3, Variables.ListString[2][3],\n                    Variables.WordDisplay[2][34], ProjectVariables.Old_Machine11_NV4, Variables.ListString[2][4],\n                    Variables.WordDisplay[2][35], ProjectVariables.Old_Machine11_NV5, Variables.ListString[2][5],\n                )\n            ProjectVariables.Old_Machine11_NV1 = old_id1\n            ProjectVariables.Old_Machine11_NV2 = old_id2\n            ProjectVariables.Old_Machine11_NV3 = old_id3\n            ProjectVariables.Old_Machine11_NV4 = old_id4\n            ProjectVariables.Old_Machine11_NV5 = old_id5\n\n            Variables.ListString[2][1] = list1\n            Variables.ListString[2][2] = list2\n            Variables.ListString[2][3] = list3\n            Variables.ListString[2][4] = list4\n            Variables.ListString[2][5] = list5\n        }\n        //Check Operator Machine 12\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][81], ProjectVariables.Old_Machine12_NV1, Variables.ListString[2][11],\n                    Variables.WordDisplay[2][82], ProjectVariables.Old_Machine12_NV2, Variables.ListString[2][12],\n                    Variables.WordDisplay[2][83], ProjectVariables.Old_Machine12_NV3, Variables.ListString[2][13],\n                    Variables.WordDisplay[2][84], ProjectVariables.Old_Machine12_NV4, Variables.ListString[2][14],\n                    Variables.WordDisplay[2][85], ProjectVariables.Old_Machine12_NV5, Variables.ListString[2][15],\n                )\n            ProjectVariables.Old_Machine12_NV1 = old_id1\n            ProjectVariables.Old_Machine12_NV2 = old_id2\n            ProjectVariables.Old_Machine12_NV3 = old_id3\n            ProjectVariables.Old_Machine12_NV4 = old_id4\n            ProjectVariables.Old_Machine12_NV5 = old_id5\n            Variables.ListString[2][11] = list1\n            Variables.ListString[2][12] = list2\n            Variables.ListString[2][13] = list3\n            Variables.ListString[2][14] = list4\n            Variables.ListString[2][15] = list5\n        }\n        //Check Operator Machine 13\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][131], ProjectVariables.Old_Machine13_NV1, Variables.ListString[2][21],\n                    Variables.WordDisplay[2][132], ProjectVariables.Old_Machine13_NV2, Variables.ListString[2][22],\n                    Variables.WordDisplay[2][133], ProjectVariables.Old_Machine13_NV3, Variables.ListString[2][23],\n                    Variables.WordDisplay[2][134], ProjectVariables.Old_Machine13_NV4, Variables.ListString[2][24],\n                    Variables.WordDisplay[2][135], ProjectVariables.Old_Machine13_NV5, Variables.ListString[2][25]\n                )\n            ProjectVariables.Old_Machine13_NV1 = old_id1\n            ProjectVariables.Old_Machine13_NV2 = old_id2\n            ProjectVariables.Old_Machine13_NV3 = old_id3\n            ProjectVariables.Old_Machine13_NV4 = old_id4\n            ProjectVariables.Old_Machine13_NV5 = old_id5\n            Variables.ListString[2][21] = list1\n            Variables.ListString[2][22] = list2\n            Variables.ListString[2][23] = list3\n            Variables.ListString[2][24] = list4\n            Variables.ListString[2][25] = list5\n        }\n        //Check Operator Machine 14\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][181], ProjectVariables.Old_Machine14_NV1, Variables.ListString[2][31],\n                    Variables.WordDisplay[2][182], ProjectVariables.Old_Machine14_NV2, Variables.ListString[2][32],\n                    Variables.WordDisplay[2][183], ProjectVariables.Old_Machine14_NV3, Variables.ListString[2][33],\n                    Variables.WordDisplay[2][184], ProjectVariables.Old_Machine14_NV4, Variables.ListString[2][34],\n                    Variables.WordDisplay[2][185], ProjectVariables.Old_Machine14_NV5, Variables.ListString[2][35],\n                )\n            ProjectVariables.Old_Machine14_NV1 = old_id1\n            ProjectVariables.Old_Machine14_NV2 = old_id2\n            ProjectVariables.Old_Machine14_NV3 = old_id3\n            ProjectVariables.Old_Machine14_NV4 = old_id4\n            ProjectVariables.Old_Machine14_NV5 = old_id5\n            Variables.ListString[2][31] = list1\n            Variables.ListString[2][32] = list2\n            Variables.ListString[2][33] = list3\n            Variables.ListString[2][34] = list4\n            Variables.ListString[2][35] = list5\n        }\n\n\n        //Check SP Machine 1\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][1],\n                ProjectVariables.Old_Machine1_SP,\n                Variables.ListString[1][0],\n                Variables.ListString[1][6],\n                Variables.ListString[1][7],\n            )\n            if (ProjectVariables.Old_Machine1_SP !== old_sp) {\n                ProjectVariables.Old_Machine1_SP = old_sp\n                Variables.ListString[1][0] = list_sp\n                Variables.ListString[1][6] = list_tieuchuan_nhietdo\n                Variables.ListString[1][7] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong1 = heso_sanluong\n            }\n        }\n        //Check SP Machine 2\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][51],\n                ProjectVariables.Old_Machine2_SP,\n                Variables.ListString[1][10],\n                Variables.ListString[1][16],\n                Variables.ListString[1][17],\n            )\n            if (ProjectVariables.Old_Machine2_SP !== old_sp) {\n                ProjectVariables.Old_Machine2_SP = old_sp\n                Variables.ListString[1][10] = list_sp\n                Variables.ListString[1][16] = list_tieuchuan_nhietdo\n                Variables.ListString[1][17] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong2 = heso_sanluong\n            }\n        }\n        //Check SP Machine 3\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][101],\n                ProjectVariables.Old_Machine3_SP,\n                Variables.ListString[1][20],\n                Variables.ListString[1][26],\n                Variables.ListString[1][27],\n            )\n            if (ProjectVariables.Old_Machine3_SP !== old_sp) {\n                ProjectVariables.Old_Machine3_SP = old_sp\n                Variables.ListString[1][20] = list_sp\n                Variables.ListString[1][26] = list_tieuchuan_nhietdo\n                Variables.ListString[1][27] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong3 = heso_sanluong\n            }\n        }\n        //Check SP Machine 4\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][151],\n                ProjectVariables.Old_Machine4_SP,\n                Variables.ListString[1][30],\n                Variables.ListString[1][36],\n                Variables.ListString[1][37],\n            )\n            if (ProjectVariables.Old_Machine4_SP !== old_sp) {\n                ProjectVariables.Old_Machine4_SP = old_sp\n                Variables.ListString[1][30] = list_sp\n                Variables.ListString[1][36] = list_tieuchuan_nhietdo\n                Variables.ListString[1][37] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong4 = heso_sanluong\n            }\n        }\n        //Check SP Machine 5\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][201],\n                ProjectVariables.Old_Machine5_SP,\n                Variables.ListString[1][40],\n                Variables.ListString[1][46],\n                Variables.ListString[1][47],\n            )\n            if (ProjectVariables.Old_Machine5_SP !== old_sp) {\n                ProjectVariables.Old_Machine5_SP = old_sp\n                Variables.ListString[1][40] = list_sp\n                Variables.ListString[1][46] = list_tieuchuan_nhietdo\n                Variables.ListString[1][47] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong5 = heso_sanluong\n            }\n        }\n        //Check SP Machine 6\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][251],\n                ProjectVariables.Old_Machine6_SP,\n                Variables.ListString[1][50],\n                Variables.ListString[1][56],\n                Variables.ListString[1][57],\n            )\n            if (ProjectVariables.Old_Machine6_SP !== old_sp) {\n                ProjectVariables.Old_Machine6_SP = old_sp\n                Variables.ListString[1][50] = list_sp\n                Variables.ListString[1][56] = list_tieuchuan_nhietdo\n                Variables.ListString[1][57] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong6 = heso_sanluong\n            }\n        }\n        //Check SP Machine 7\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][301],\n                ProjectVariables.Old_Machine7_SP,\n                Variables.ListString[1][60],\n                Variables.ListString[1][66],\n                Variables.ListString[1][67],\n            )\n            if (ProjectVariables.Old_Machine7_SP !== old_sp) {\n                ProjectVariables.Old_Machine7_SP = old_sp\n                Variables.ListString[1][60] = list_sp\n                Variables.ListString[1][66] = list_tieuchuan_nhietdo\n                Variables.ListString[1][67] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong7 = heso_sanluong\n            }\n        }\n        //Check SP Machine 8\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][351],\n                ProjectVariables.Old_Machine8_SP,\n                Variables.ListString[1][70],\n                Variables.ListString[1][76],\n                Variables.ListString[1][77],\n            )\n            if (ProjectVariables.Old_Machine8_SP !== old_sp) {\n                ProjectVariables.Old_Machine8_SP = old_sp\n                Variables.ListString[1][70] = list_sp\n                Variables.ListString[1][76] = list_tieuchuan_nhietdo\n                Variables.ListString[1][77] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong8 = heso_sanluong\n            }\n        }\n        //Check SP Machine 9\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][401],\n                ProjectVariables.Old_Machine9_SP,\n                Variables.ListString[1][80],\n                Variables.ListString[1][86],\n                Variables.ListString[1][87],\n            )\n            if (ProjectVariables.Old_Machine9_SP !== old_sp) {\n                ProjectVariables.Old_Machine9_SP = old_sp\n                Variables.ListString[1][80] = list_sp\n                Variables.ListString[1][86] = list_tieuchuan_nhietdo\n                Variables.ListString[1][87] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong9 = heso_sanluong\n            }\n        }\n        //Check SP Machine 10\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][451],\n                ProjectVariables.Old_Machine10_SP,\n                Variables.ListString[1][90],\n                Variables.ListString[1][96],\n                Variables.ListString[1][97],\n            )\n            if (ProjectVariables.Old_Machine10_SP !== old_sp) {\n                ProjectVariables.Old_Machine10_SP = old_sp\n                Variables.ListString[1][90] = list_sp\n                Variables.ListString[1][96] = list_tieuchuan_nhietdo\n                Variables.ListString[1][97] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong10 = heso_sanluong\n            }\n        }\n        //Check SP Machine 11\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][1],\n                ProjectVariables.Old_Machine11_SP,\n                Variables.ListString[2][0],\n                Variables.ListString[2][6],\n                Variables.ListString[2][7],\n            )\n            if (ProjectVariables.Old_Machine11_SP !== old_sp) {\n                ProjectVariables.Old_Machine11_SP = old_sp\n                Variables.ListString[2][0] = list_sp\n                Variables.ListString[2][6] = list_tieuchuan_nhietdo\n                Variables.ListString[2][7] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong11 = heso_sanluong\n            }\n        }\n        //Check SP Machine 12\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][51],\n                ProjectVariables.Old_Machine12_SP,\n                Variables.ListString[2][10],\n                Variables.ListString[2][16],\n                Variables.ListString[2][17],\n            )\n            if (ProjectVariables.Old_Machine12_SP !== old_sp) {\n                ProjectVariables.Old_Machine12_SP = old_sp\n                Variables.ListString[2][10] = list_sp\n                Variables.ListString[2][16] = list_tieuchuan_nhietdo\n                Variables.ListString[2][17] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong12 = heso_sanluong\n            }\n        }\n        //Check SP Machine 13\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][101],\n                ProjectVariables.Old_Machine13_SP,\n                Variables.ListString[2][20],\n                Variables.ListString[2][26],\n                Variables.ListString[2][27],\n            )\n            if (ProjectVariables.Old_Machine13_SP !== old_sp) {\n                ProjectVariables.Old_Machine13_SP = old_sp\n                Variables.ListString[2][20] = list_sp\n                Variables.ListString[2][26] = list_tieuchuan_nhietdo\n                Variables.ListString[2][27] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong13 = heso_sanluong\n            }\n        }\n        //Check SP Machine 14\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][151],\n                ProjectVariables.Old_Machine14_SP,\n                Variables.ListString[2][30],\n                Variables.ListString[2][36],\n                Variables.ListString[2][37],\n            )\n            if (ProjectVariables.Old_Machine14_SP !== old_sp) {\n                ProjectVariables.Old_Machine14_SP = old_sp\n                Variables.ListString[2][30] = list_sp\n                Variables.ListString[2][36] = list_tieuchuan_nhietdo\n                Variables.ListString[2][37] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong14 = heso_sanluong\n            }\n        }\n\n        //Report Chi Tiet + Productivity 1\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][13]) == 0) {\n                    ProjectVariables.Old_CheckReport1 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][13]) == 1 && ProjectVariables.Old_CheckReport1 == 0)) {\n                    ProjectVariables.Old_CheckReport1 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine1();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][9]) > 0) {\n                if (ProjectVariables.oldAmountProduct1 !== parseInt(Variables.WordDisplay[1][9])) {\n                    ProjectVariables.oldAmountProduct1 = parseInt(Variables.WordDisplay[1][9])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][9]) == 0 && ProjectVariables.oldAmountProduct1 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save1 == 0) {\n                    ProjectFunction.ReportProductivity_Machine1();\n                    ProjectVariables.oldAmountProduct1 = 0\n                    Save1 = 5\n                    node.warn(\"Report 1 \" + ProjectVariables.oldAmountProduct1);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 2\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][29]) == 0) {\n                    ProjectVariables.Old_CheckReport2 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][29]) == 1 && ProjectVariables.Old_CheckReport2 == 0)) {\n                    ProjectVariables.Old_CheckReport2 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine2();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][59]) > 0) {\n                if (ProjectVariables.oldAmountProduct2 !== parseInt(Variables.WordDisplay[1][59])) {\n                    ProjectVariables.oldAmountProduct2 = parseInt(Variables.WordDisplay[1][59])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][59]) == 0 && ProjectVariables.oldAmountProduct2 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save2 == 0) {\n                    ProjectFunction.ReportProductivity_Machine2();\n                    ProjectVariables.oldAmountProduct2 = 0\n                    Save2 = 5\n                    node.warn(\"Report 2 \" + ProjectVariables.oldAmountProduct2);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 3\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][45]) == 0) {\n                    ProjectVariables.Old_CheckReport3 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][45]) == 1 && ProjectVariables.Old_CheckReport3 == 0)) {\n                    ProjectVariables.Old_CheckReport3 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine3();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][109]) > 0) {\n                if (ProjectVariables.oldAmountProduct3 !== parseInt(Variables.WordDisplay[1][109])) {\n                    ProjectVariables.oldAmountProduct3 = parseInt(Variables.WordDisplay[1][109])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][109]) == 0 && ProjectVariables.oldAmountProduct3 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save3 == 0) {\n                    ProjectFunction.ReportProductivity_Machine3();\n                    ProjectVariables.oldAmountProduct3 = 0\n                    Save3 = 5\n                    node.warn(\"Report 3 \" + ProjectVariables.oldAmountProduct3);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 4\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][61]) == 0) {\n                    ProjectVariables.Old_CheckReport4 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][61]) == 1 && ProjectVariables.Old_CheckReport4 == 0)) {\n                    ProjectVariables.Old_CheckReport4 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine4();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][159]) > 0) {\n                if (ProjectVariables.oldAmountProduct4 !== parseInt(Variables.WordDisplay[1][159])) {\n                    ProjectVariables.oldAmountProduct4 = parseInt(Variables.WordDisplay[1][159])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][159]) == 0 && ProjectVariables.oldAmountProduct4 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save4 == 0) {\n                    ProjectFunction.ReportProductivity_Machine4();\n                    ProjectVariables.oldAmountProduct4 = 0\n                    Save4 = 5\n                    node.warn(\"Report 4 \" + ProjectVariables.oldAmountProduct4);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 5\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][77]) == 0) {\n                    ProjectVariables.Old_CheckReport5 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][77]) == 1 && ProjectVariables.Old_CheckReport5 == 0)) {\n                    ProjectVariables.Old_CheckReport5 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine5();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][209]) > 0) {\n                if (ProjectVariables.oldAmountProduct5 !== parseInt(Variables.WordDisplay[1][209])) {\n                    ProjectVariables.oldAmountProduct5 = parseInt(Variables.WordDisplay[1][209])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][209]) == 0 && ProjectVariables.oldAmountProduct5 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save5 == 0) {\n                    ProjectFunction.ReportProductivity_Machine5();\n                    ProjectVariables.oldAmountProduct5 = 0\n                    Save5 = 5\n                    node.warn(\"Report 5 \" + ProjectVariables.oldAmountProduct5);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 6\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][93]) == 0) {\n                    ProjectVariables.Old_CheckReport6 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][93]) == 1 && ProjectVariables.Old_CheckReport6 == 0)) {\n                    ProjectVariables.Old_CheckReport6 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine6();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][259]) > 0) {\n                if (ProjectVariables.oldAmountProduct6 !== parseInt(Variables.WordDisplay[1][259])) {\n                    ProjectVariables.oldAmountProduct6 = parseInt(Variables.WordDisplay[1][259])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][259]) == 0 && ProjectVariables.oldAmountProduct6 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save6 == 0) {\n                    ProjectFunction.ReportProductivity_Machine6();\n                    ProjectVariables.oldAmountProduct6 = 0\n                    Save6 = 5\n                    node.warn(\"Report 6 \" + ProjectVariables.oldAmountProduct6);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 7\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][109]) == 0) {\n                    ProjectVariables.Old_CheckReport7 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][109]) == 1 && ProjectVariables.Old_CheckReport7 == 0)) {\n                    ProjectVariables.Old_CheckReport7 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine7();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][309]) > 0) {\n                if (ProjectVariables.oldAmountProduct7 !== parseInt(Variables.WordDisplay[1][309])) {\n                    ProjectVariables.oldAmountProduct7 = parseInt(Variables.WordDisplay[1][309])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][309]) == 0 && ProjectVariables.oldAmountProduct7 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save7 == 0) {\n                    ProjectFunction.ReportProductivity_Machine7();\n                    ProjectVariables.oldAmountProduct7 = 0\n                    Save7 = 5\n                    node.warn(\"Report 7 \" + ProjectVariables.oldAmountProduct7);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 8\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][125]) == 0) {\n                    ProjectVariables.Old_CheckReport8 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][125]) == 1 && ProjectVariables.Old_CheckReport8 == 0)) {\n                    ProjectVariables.Old_CheckReport8 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine8();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][359]) > 0) {\n                if (ProjectVariables.oldAmountProduct8 !== parseInt(Variables.WordDisplay[1][359])) {\n                    ProjectVariables.oldAmountProduct8 = parseInt(Variables.WordDisplay[1][359])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][359]) == 0 && ProjectVariables.oldAmountProduct8 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save8 == 0) {\n                    ProjectFunction.ReportProductivity_Machine8();\n                    ProjectVariables.oldAmountProduct8 = 0\n                    Save8 = 5\n                    node.warn(\"Report 8 \" + ProjectVariables.oldAmountProduct8);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 9\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][141]) == 0) {\n                    ProjectVariables.Old_CheckReport9 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][141]) == 1 && ProjectVariables.Old_CheckReport9 == 0)) {\n                    ProjectVariables.Old_CheckReport9 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine9();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][409]) > 0) {\n                if (ProjectVariables.oldAmountProduct9 !== parseInt(Variables.WordDisplay[1][409])) {\n                    ProjectVariables.oldAmountProduct9 = parseInt(Variables.WordDisplay[1][409])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][409]) == 0 && ProjectVariables.oldAmountProduct9 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save9 == 0) {\n                    ProjectFunction.ReportProductivity_Machine9();\n                    ProjectVariables.oldAmountProduct9 = 0\n                    Save9 = 5;\n                    node.warn(\"Report 9 \" + ProjectVariables.oldAmountProduct9);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 10\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][157]) == 0) {\n                    ProjectVariables.Old_CheckReport10 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][157]) == 1 && ProjectVariables.Old_CheckReport10 == 0)) {\n                    ProjectVariables.Old_CheckReport10 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine10();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][459]) > 0) {\n                if (ProjectVariables.oldAmountProduct10 !== parseInt(Variables.WordDisplay[1][459])) {\n                    ProjectVariables.oldAmountProduct10 = parseInt(Variables.WordDisplay[1][459])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][459]) == 0 && ProjectVariables.oldAmountProduct10 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save10 == 0) {\n                    ProjectFunction.ReportProductivity_Machine10();\n                    ProjectVariables.oldAmountProduct10 = 0\n                    Save10 = 5\n                    node.warn(\"Report 10 \" + ProjectVariables.oldAmountProduct10);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 11\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][13]) == 0) {\n                    ProjectVariables.Old_CheckReport11 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][13]) == 1 && ProjectVariables.Old_CheckReport11 == 0)) {\n                    ProjectVariables.Old_CheckReport11 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine11();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][9]) > 0) {\n                if (ProjectVariables.oldAmountProduct11 !== parseInt(Variables.WordDisplay[2][9])) {\n                    ProjectVariables.oldAmountProduct11 = parseInt(Variables.WordDisplay[2][9])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][9]) == 0 && ProjectVariables.oldAmountProduct11 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save11 == 0) {\n                    ProjectFunction.ReportProductivity_Machine11();\n                    ProjectVariables.oldAmountProduct11 = 0\n                    Save11 = 5\n                    node.warn(\"Report 11 \" + ProjectVariables.oldAmountProduct11);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 12\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][29]) == 0) {\n                    ProjectVariables.Old_CheckReport12 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][29]) == 1 && ProjectVariables.Old_CheckReport12 == 0)) {\n                    ProjectVariables.Old_CheckReport12 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine12();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][59]) > 0) {\n                if (ProjectVariables.oldAmountProduct12 !== parseInt(Variables.WordDisplay[2][59])) {\n                    ProjectVariables.oldAmountProduct12 = parseInt(Variables.WordDisplay[2][59])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][59]) == 0 && ProjectVariables.oldAmountProduct12 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save12 == 0) {\n                    ProjectFunction.ReportProductivity_Machine12();\n                    ProjectVariables.oldAmountProduct12 = 0\n                    Save12 = 5\n                    node.warn(\"Report 12 \" + ProjectVariables.oldAmountProduct12);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 13\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][45]) == 0) {\n                    ProjectVariables.Old_CheckReport13 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][45]) == 1 && ProjectVariables.Old_CheckReport13 == 0)) {\n                    ProjectVariables.Old_CheckReport13 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine13();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][109]) > 0) {\n                if (ProjectVariables.oldAmountProduct13 !== parseInt(Variables.WordDisplay[2][109])) {\n                    ProjectVariables.oldAmountProduct13 = parseInt(Variables.WordDisplay[2][109])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][109]) == 0 && ProjectVariables.oldAmountProduct13 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save13 == 0) {\n                    ProjectFunction.ReportProductivity_Machine13();\n                    ProjectVariables.oldAmountProduct13 = 0\n                    Save13 = 5\n                    node.warn(\"Report 13 \" + ProjectVariables.oldAmountProduct13);\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 14\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][61]) == 0) {\n                    ProjectVariables.Old_CheckReport14 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][61]) == 1 && ProjectVariables.Old_CheckReport14 == 0)) {\n                    ProjectVariables.Old_CheckReport14 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine14();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][159]) > 0) {\n                if (ProjectVariables.oldAmountProduct14 !== parseInt(Variables.WordDisplay[2][159])) {\n                    ProjectVariables.oldAmountProduct14 = parseInt(Variables.WordDisplay[2][159])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][159]) == 0 && ProjectVariables.oldAmountProduct14 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0 && Save14 == 0) {\n                    ProjectFunction.ReportProductivity_Machine14();\n                    ProjectVariables.oldAmountProduct14 = 0\n                    Save14 = 5\n                    node.warn(\"Report 14 \" + ProjectVariables.oldAmountProduct14);\n                }\n            }\n        }\n\n        //Report Trang Thai 1\n        {\n            let IndexSet = 7;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State1)) {\n                ProjectVariables.Old_State1 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine1('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine1('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine1('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine1('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 2\n        {\n            let IndexSet = 57;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State2)) {\n                ProjectVariables.Old_State2 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine2('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine2('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine2('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine2('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 3\n        {\n            let IndexSet = 107;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State3)) {\n                ProjectVariables.Old_State3 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine3('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine3('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine3('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine3('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 4\n        {\n            let IndexSet = 157;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State4)) {\n                ProjectVariables.Old_State4 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine4('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine4('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine4('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine4('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 5\n        {\n            let IndexSet = 207;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State5)) {\n                ProjectVariables.Old_State5 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine5('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine5('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine5('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine5('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 6\n        {\n            let IndexSet = 257;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State6)) {\n                ProjectVariables.Old_State6 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine6('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine6('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine6('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine6('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 7\n        {\n            let IndexSet = 307;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State7)) {\n                ProjectVariables.Old_State7 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine7('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine7('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine7('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine7('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 8\n        {\n            let IndexSet = 357;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State8)) {\n                ProjectVariables.Old_State8 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine8('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine8('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine8('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine8('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 9\n        {\n            let IndexSet = 407;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State9)) {\n                ProjectVariables.Old_State9 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine9('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine9('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine9('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine9('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 10\n        {\n            let IndexSet = 457;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State10)) {\n                ProjectVariables.Old_State10 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine10('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine10('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine10('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine10('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 11\n        {\n            let IndexSet = 7;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State11)) {\n                ProjectVariables.Old_State11 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine11('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine11('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine11('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine11('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 12\n        {\n            let IndexSet = 57;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State12)) {\n                ProjectVariables.Old_State12 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine12('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine12('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine12('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine12('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 13\n        {\n            let IndexSet = 107;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State13)) {\n                ProjectVariables.Old_State13 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine13('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine13('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine13('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine13('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 14\n        {\n            let IndexSet = 157;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State14)) {\n                ProjectVariables.Old_State14 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine14('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine14('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine14('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine14('Máy Reset');\n                    }\n                }\n            }\n        }\n\n        //Time BatDauCa 1\n        {\n            if (parseInt(Variables.BitDisplay[1][11]) == 0) {\n                ProjectVariables.Old_BatDauCa1 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][11]) == 1 && ProjectVariables.Old_BatDauCa1 == 0)) {\n                ProjectVariables.Old_BatDauCa1 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(1);\n                }\n            }\n        }\n        //Time BatDauCa 2\n        {\n            if (parseInt(Variables.BitDisplay[1][27]) == 0) {\n                ProjectVariables.Old_BatDauCa2 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][27]) == 1 && ProjectVariables.Old_BatDauCa2 == 0)) {\n                ProjectVariables.Old_BatDauCa2 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(2);\n                }\n            }\n        }\n        //Time BatDauCa 3\n        {\n            if (parseInt(Variables.BitDisplay[1][43]) == 0) {\n                ProjectVariables.Old_BatDauCa3 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][43]) == 1 && ProjectVariables.Old_BatDauCa3 == 0)) {\n                ProjectVariables.Old_BatDauCa3 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(3);\n                }\n            }\n        }\n        //Time BatDauCa 4\n        {\n            if (parseInt(Variables.BitDisplay[1][59]) == 0) {\n                ProjectVariables.Old_BatDauCa4 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][59]) == 1 && ProjectVariables.Old_BatDauCa4 == 0)) {\n                ProjectVariables.Old_BatDauCa4 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(4);\n                }\n            }\n        }\n        //Time BatDauCa 5\n        {\n            if (parseInt(Variables.BitDisplay[1][75]) == 0) {//75\n                ProjectVariables.Old_BatDauCa5 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][75]) == 1 && ProjectVariables.Old_BatDauCa5 == 0)) {\n                ProjectVariables.Old_BatDauCa5 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(5);\n                }\n            }\n        }\n        //Time BatDauCa 6\n        {\n            if (parseInt(Variables.BitDisplay[1][91]) == 0) {\n                ProjectVariables.Old_BatDauCa6 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][91]) == 1 && ProjectVariables.Old_BatDauCa6 == 0)) {\n                ProjectVariables.Old_BatDauCa6 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(6);\n                }\n            }\n        }\n        //Time BatDauCa 7\n        {\n            if (parseInt(Variables.BitDisplay[1][107]) == 0) {\n                ProjectVariables.Old_BatDauCa7 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][107]) == 1 && ProjectVariables.Old_BatDauCa7 == 0)) {\n                ProjectVariables.Old_BatDauCa7 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(7);\n                }\n            }\n        }\n        //Time BatDauCa 8\n        {\n            if (parseInt(Variables.BitDisplay[1][123]) == 0) {\n                ProjectVariables.Old_BatDauCa8 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][123]) == 1 && ProjectVariables.Old_BatDauCa8 == 0)) {\n                ProjectVariables.Old_BatDauCa8 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(8);\n                }\n            }\n        }\n        //Time BatDauCa 9\n        {\n            if (parseInt(Variables.BitDisplay[1][139]) == 0) {\n                ProjectVariables.Old_BatDauCa9 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][139]) == 1 && ProjectVariables.Old_BatDauCa9 == 0)) {\n                ProjectVariables.Old_BatDauCa9 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(9);\n                }\n            }\n        }\n        //Time BatDauCa 10\n        {\n            if (parseInt(Variables.BitDisplay[1][155]) == 0) {\n                ProjectVariables.Old_BatDauCa10 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][155]) == 1 && ProjectVariables.Old_BatDauCa10 == 0)) {\n                ProjectVariables.Old_BatDauCa10 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(10);\n                }\n            }\n        }\n        //Time BatDauCa 11\n        {\n            if (parseInt(Variables.BitDisplay[2][11]) == 0) {\n                ProjectVariables.Old_BatDauCa11 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][11]) == 1 && ProjectVariables.Old_BatDauCa11 == 0)) {\n                ProjectVariables.Old_BatDauCa11 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(11);\n                }\n            }\n        }\n        //Time BatDauCa 12\n        {\n            if (parseInt(Variables.BitDisplay[2][27]) == 0) {\n                ProjectVariables.Old_BatDauCa12 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][27]) == 1 && ProjectVariables.Old_BatDauCa12 == 0)) {\n                ProjectVariables.Old_BatDauCa12 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(12);\n                }\n            }\n        }\n        //Time BatDauCa 13\n        {\n            if (parseInt(Variables.BitDisplay[2][43]) == 0) {\n                ProjectVariables.Old_BatDauCa13 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][43]) == 1 && ProjectVariables.Old_BatDauCa13 == 0)) {\n                ProjectVariables.Old_BatDauCa13 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(13);\n                }\n            }\n        }\n        //Time BatDauCa 14\n        {\n            if (parseInt(Variables.BitDisplay[2][59]) == 0) {\n                ProjectVariables.Old_BatDauCa14 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][59]) == 1 && ProjectVariables.Old_BatDauCa14 == 0)) {\n                ProjectVariables.Old_BatDauCa14 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(14);\n                }\n            }\n        }\n\n        count = count + 1\n        if (count > 99999) { count = 0 }\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n    }, 300)\n} catch (error) {\n\n}\n//Excel Load File\nvar XLSX = global.get(\"xlsx\");\ntry {\n    setInterval(function () {\n        var workbook = XLSX.readFile('DataStampingMachine2.xlsx');\n        var sheet_name_list = workbook.SheetNames;\n\n        ProjectVariables.xlData_NhanVien = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);\n        ProjectVariables.xlData_SanPham = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[1]]);\n        if (JSON.stringify(ProjectVariables.Old_xlData_NhanVien) !== JSON.stringify(ProjectVariables.xlData_NhanVien)) {\n            ProjectVariables.Old_xlData_NhanVien = ProjectVariables.xlData_NhanVien\n            VariableSystem.IO.sockets.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien)\n            console.log('Have Change Excel1')\n            ProjectVariables.Old_Machine1_NV1 = null;\n            ProjectVariables.Old_Machine1_NV2 = null;\n            ProjectVariables.Old_Machine1_NV3 = null;\n            ProjectVariables.Old_Machine1_NV4 = null;\n            ProjectVariables.Old_Machine1_NV5 = null;\n            ProjectVariables.Old_Machine1_NV6 = null;\n            ProjectVariables.Old_Machine1_NV7 = null;\n            ProjectVariables.Old_Machine1_NV8 = null;\n            ProjectVariables.Old_Machine1_NV9 = null;\n            ProjectVariables.Old_Machine1_NV10 = null;\n            ProjectVariables.Old_Machine1_NV11 = null;\n\n            ProjectVariables.Old_Machine2_NV1 = null;\n            ProjectVariables.Old_Machine2_NV2 = null;\n            ProjectVariables.Old_Machine2_NV3 = null;\n            ProjectVariables.Old_Machine2_NV4 = null;\n            ProjectVariables.Old_Machine2_NV5 = null;\n            ProjectVariables.Old_Machine2_NV6 = null;\n            ProjectVariables.Old_Machine2_NV7 = null;\n            ProjectVariables.Old_Machine2_NV8 = null;\n            ProjectVariables.Old_Machine2_NV9 = null;\n            ProjectVariables.Old_Machine2_NV10 = null;\n            ProjectVariables.Old_Machine2_NV11 = null;\n\n            ProjectVariables.Old_Machine3_NV1 = null;\n            ProjectVariables.Old_Machine3_NV2 = null;\n            ProjectVariables.Old_Machine3_NV3 = null;\n            ProjectVariables.Old_Machine3_NV4 = null;\n            ProjectVariables.Old_Machine3_NV5 = null;\n            ProjectVariables.Old_Machine3_NV6 = null;\n            ProjectVariables.Old_Machine3_NV7 = null;\n            ProjectVariables.Old_Machine3_NV8 = null;\n            ProjectVariables.Old_Machine3_NV9 = null;\n            ProjectVariables.Old_Machine3_NV10 = null;\n            ProjectVariables.Old_Machine3_NV11 = null;\n\n            ProjectVariables.Old_Machine4_NV1 = null;\n            ProjectVariables.Old_Machine4_NV2 = null;\n            ProjectVariables.Old_Machine4_NV3 = null;\n            ProjectVariables.Old_Machine4_NV4 = null;\n            ProjectVariables.Old_Machine4_NV5 = null;\n            ProjectVariables.Old_Machine4_NV6 = null;\n            ProjectVariables.Old_Machine4_NV7 = null;\n            ProjectVariables.Old_Machine4_NV8 = null;\n            ProjectVariables.Old_Machine4_NV9 = null;\n            ProjectVariables.Old_Machine4_NV10 = null;\n            ProjectVariables.Old_Machine4_NV11 = null;\n\n            ProjectVariables.Old_Machine5_NV1 = null;\n            ProjectVariables.Old_Machine5_NV2 = null;\n            ProjectVariables.Old_Machine5_NV3 = null;\n            ProjectVariables.Old_Machine5_NV4 = null;\n            ProjectVariables.Old_Machine5_NV5 = null;\n            ProjectVariables.Old_Machine5_NV6 = null;\n            ProjectVariables.Old_Machine5_NV7 = null;\n            ProjectVariables.Old_Machine5_NV8 = null;\n            ProjectVariables.Old_Machine5_NV9 = null;\n            ProjectVariables.Old_Machine5_NV10 = null;\n            ProjectVariables.Old_Machine5_NV11 = null;\n\n            ProjectVariables.Old_Machine6_NV1 = null;\n            ProjectVariables.Old_Machine6_NV2 = null;\n            ProjectVariables.Old_Machine6_NV3 = null;\n            ProjectVariables.Old_Machine6_NV4 = null;\n            ProjectVariables.Old_Machine6_NV5 = null;\n            ProjectVariables.Old_Machine6_NV6 = null;\n            ProjectVariables.Old_Machine6_NV7 = null;\n            ProjectVariables.Old_Machine6_NV8 = null;\n            ProjectVariables.Old_Machine6_NV9 = null;\n            ProjectVariables.Old_Machine6_NV10 = null;\n            ProjectVariables.Old_Machine6_NV11 = null;\n\n            ProjectVariables.Old_Machine7_NV1 = null;\n            ProjectVariables.Old_Machine7_NV2 = null;\n            ProjectVariables.Old_Machine7_NV3 = null;\n            ProjectVariables.Old_Machine7_NV4 = null;\n            ProjectVariables.Old_Machine7_NV5 = null;\n            ProjectVariables.Old_Machine7_NV6 = null;\n            ProjectVariables.Old_Machine7_NV7 = null;\n            ProjectVariables.Old_Machine7_NV8 = null;\n            ProjectVariables.Old_Machine7_NV9 = null;\n            ProjectVariables.Old_Machine7_NV10 = null;\n            ProjectVariables.Old_Machine7_NV11 = null;\n\n            ProjectVariables.Old_Machine8_NV1 = null;\n            ProjectVariables.Old_Machine8_NV2 = null;\n            ProjectVariables.Old_Machine8_NV3 = null;\n            ProjectVariables.Old_Machine8_NV4 = null;\n            ProjectVariables.Old_Machine8_NV5 = null;\n            ProjectVariables.Old_Machine8_NV6 = null;\n            ProjectVariables.Old_Machine8_NV7 = null;\n            ProjectVariables.Old_Machine8_NV8 = null;\n            ProjectVariables.Old_Machine8_NV9 = null;\n            ProjectVariables.Old_Machine8_NV10 = null;\n            ProjectVariables.Old_Machine8_NV11 = null;\n\n            ProjectVariables.Old_Machine9_NV1 = null;\n            ProjectVariables.Old_Machine9_NV2 = null;\n            ProjectVariables.Old_Machine9_NV3 = null;\n            ProjectVariables.Old_Machine9_NV4 = null;\n            ProjectVariables.Old_Machine9_NV5 = null;\n            ProjectVariables.Old_Machine9_NV6 = null;\n            ProjectVariables.Old_Machine9_NV7 = null;\n            ProjectVariables.Old_Machine9_NV8 = null;\n            ProjectVariables.Old_Machine9_NV9 = null;\n            ProjectVariables.Old_Machine9_NV10 = null;\n            ProjectVariables.Old_Machine9_NV11 = null;\n\n            ProjectVariables.Old_Machine10_NV1 = null;\n            ProjectVariables.Old_Machine10_NV2 = null;\n            ProjectVariables.Old_Machine10_NV3 = null;\n            ProjectVariables.Old_Machine10_NV4 = null;\n            ProjectVariables.Old_Machine10_NV5 = null;\n            ProjectVariables.Old_Machine10_NV6 = null;\n            ProjectVariables.Old_Machine10_NV7 = null;\n            ProjectVariables.Old_Machine10_NV8 = null;\n            ProjectVariables.Old_Machine10_NV9 = null;\n            ProjectVariables.Old_Machine10_NV10 = null;\n            ProjectVariables.Old_Machine10_NV11 = null;\n\n            ProjectVariables.Old_Machine11_NV1 = null;\n            ProjectVariables.Old_Machine11_NV2 = null;\n            ProjectVariables.Old_Machine11_NV3 = null;\n            ProjectVariables.Old_Machine11_NV4 = null;\n            ProjectVariables.Old_Machine11_NV5 = null;\n            ProjectVariables.Old_Machine11_NV6 = null;\n            ProjectVariables.Old_Machine11_NV7 = null;\n            ProjectVariables.Old_Machine11_NV8 = null;\n            ProjectVariables.Old_Machine11_NV9 = null;\n            ProjectVariables.Old_Machine11_NV10 = null;\n            ProjectVariables.Old_Machine11_NV11 = null;\n\n            ProjectVariables.Old_Machine12_NV1 = null;\n            ProjectVariables.Old_Machine12_NV2 = null;\n            ProjectVariables.Old_Machine12_NV3 = null;\n            ProjectVariables.Old_Machine12_NV4 = null;\n            ProjectVariables.Old_Machine12_NV5 = null;\n            ProjectVariables.Old_Machine12_NV6 = null;\n            ProjectVariables.Old_Machine12_NV7 = null;\n            ProjectVariables.Old_Machine12_NV8 = null;\n            ProjectVariables.Old_Machine12_NV9 = null;\n            ProjectVariables.Old_Machine12_NV10 = null;\n            ProjectVariables.Old_Machine12_NV11 = null;\n\n            ProjectVariables.Old_Machine13_NV1 = null;\n            ProjectVariables.Old_Machine13_NV2 = null;\n            ProjectVariables.Old_Machine13_NV3 = null;\n            ProjectVariables.Old_Machine13_NV4 = null;\n            ProjectVariables.Old_Machine13_NV5 = null;\n            ProjectVariables.Old_Machine13_NV6 = null;\n            ProjectVariables.Old_Machine13_NV7 = null;\n            ProjectVariables.Old_Machine13_NV8 = null;\n            ProjectVariables.Old_Machine13_NV9 = null;\n            ProjectVariables.Old_Machine13_NV10 = null;\n            ProjectVariables.Old_Machine13_NV11 = null;\n\n            ProjectVariables.Old_Machine14_NV1 = null;\n            ProjectVariables.Old_Machine14_NV2 = null;\n            ProjectVariables.Old_Machine14_NV3 = null;\n            ProjectVariables.Old_Machine14_NV4 = null;\n            ProjectVariables.Old_Machine14_NV5 = null;\n            ProjectVariables.Old_Machine14_NV6 = null;\n            ProjectVariables.Old_Machine14_NV7 = null;\n            ProjectVariables.Old_Machine14_NV8 = null;\n            ProjectVariables.Old_Machine14_NV9 = null;\n            ProjectVariables.Old_Machine14_NV10 = null;\n            ProjectVariables.Old_Machine14_NV11 = null;\n\n\n        }\n        if (JSON.stringify(ProjectVariables.Old_xlData_SanPham) !== JSON.stringify(ProjectVariables.xlData_SanPham)) {\n            ProjectVariables.Old_xlData_SanPham = ProjectVariables.xlData_SanPham\n            VariableSystem.IO.sockets.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham)\n            console.log('Have Change Excel2')\n            ProjectVariables.Old_Machine1_SP = null;\n            ProjectVariables.Old_Machine2_SP = null;\n            ProjectVariables.Old_Machine3_SP = null;\n            ProjectVariables.Old_Machine4_SP = null;\n            ProjectVariables.Old_Machine5_SP = null;\n            ProjectVariables.Old_Machine6_SP = null;\n            ProjectVariables.Old_Machine7_SP = null;\n            ProjectVariables.Old_Machine8_SP = null;\n            ProjectVariables.Old_Machine9_SP = null;\n            ProjectVariables.Old_Machine10_SP = null;\n            ProjectVariables.Old_Machine11_SP = null;\n            ProjectVariables.Old_Machine12_SP = null;\n            ProjectVariables.Old_Machine13_SP = null;\n            ProjectVariables.Old_Machine14_SP = null;\n        }\n    }, 2000);\n} catch (error) {\n    SubFunction.setLogServer(JSON.stringify(error))\n}\n\nVariableSystem.IO.removeAllListeners('connection')\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Have Client Connected \" + socket.id))\n\n    socket.emit('UpdateElement', Variables.resultElement);\n    socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n    socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n    socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n    socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n    socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n    socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n    socket.emit('UpdateTextField', Variables.resultTextField);\n    socket.emit('UpdateTextFieldInput', Variables.resultTextFieldInput);\n\n    socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n    socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n        socket.disconnect()\n    });\n    socket.on('initial', function () {\n        socket.emit('UpdateElement', Variables.resultElement);\n        socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n        socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n        socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n        socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n        socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n        socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n        socket.emit('UpdateTextField', Variables.resultTextField);\n\n        socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n        socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n    })\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data);\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ManuReportProductivity1') {\n                ProjectFunction.ReportProductivity_Machine1();\n            }\n            if (data.tag === 'ManuReportProductivity2') {\n                ProjectFunction.ReportProductivity_Machine2();\n            }\n            if (data.tag === 'ManuReportProductivity3') {\n                ProjectFunction.ReportProductivity_Machine3();\n            }\n            if (data.tag === 'ManuReportProductivity4') {\n                ProjectFunction.ReportProductivity_Machine4();\n            }\n            if (data.tag === 'ManuReportProductivity5') {\n                ProjectFunction.ReportProductivity_Machine5();\n            }\n            if (data.tag === 'ManuReportProductivity6') {\n                ProjectFunction.ReportProductivity_Machine6();\n            }\n            if (data.tag === 'ManuReportProductivity7') {\n                ProjectFunction.ReportProductivity_Machine7();\n            }\n            if (data.tag === 'ManuReportProductivity8') {\n                ProjectFunction.ReportProductivity_Machine8();\n            }\n            if (data.tag === 'ManuReportProductivity9') {\n                ProjectFunction.ReportProductivity_Machine9();\n            }\n            if (data.tag === 'ManuReportProductivity10') {\n                ProjectFunction.ReportProductivity_Machine10();\n            }\n            if (data.tag === 'ManuReportProductivity11') {\n                ProjectFunction.ReportProductivity_Machine11();\n            }\n            if (data.tag === 'ManuReportProductivity12') {\n                ProjectFunction.ReportProductivity_Machine12();\n            }\n            if (data.tag === 'ManuReportProductivity13') {\n                ProjectFunction.ReportProductivity_Machine13();\n            }\n            if (data.tag === 'ManuReportProductivity14') {\n                ProjectFunction.ReportProductivity_Machine14();\n            }\n            if (data.tag === 'ManuStartTime1') {\n                ProjectFunction.StampingMachineStartTime(1);\n            }\n        }\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            console.log(data)\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(parseInt(data.tag) / 16)\n                    let currentWordOfBitAdjust = Variables.WordBitAdjust[1][parseInt(parseInt(data.tag) / 16)]\n                    currentWordOfBitAdjust ^= mask;\n                    VariableSystem.COMMUNICATION_PLC_OMRON[parseInt(data.idDevice)].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\n                }\n\n                if (parseInt(data.enableLogData)) {\n                    SubFunction.saveLogData({\n                        parent: 'logData',\n                        idDevice: data.idDevice,\n                        typeObject: 'BitAdjust',\n                        tag: data.tag,\n                        previousValue: 'old',\n                        newValue: 'new',\n                        action: 'Toggle',\n                        nameObject: '',\n                        user: data.currentUser\n                    })\n                }\n            }\n        }\n    });\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n// console.log('CLOSE NODE RED')\nvar VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.removeAllListeners()",
        "libs": [],
        "x": 770,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b064a73cf83e2e6b",
        "type": "Config_Web Begin",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "cf4dc1f210557a3d"
            ]
        ]
    },
    {
        "id": "cf4dc1f210557a3d",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "title": "SCADA PAGE",
        "x": 480,
        "y": 440,
        "wires": [
            [
                "29de8f94f638a266"
            ]
        ]
    },
    {
        "id": "29de8f94f638a266",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Giao Diện Điều Khiển",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "43",
        "header_hide": "1",
        "x": 720,
        "y": 440,
        "wires": [
            [
                "f312704fdb8ad79b"
            ]
        ]
    },
    {
        "id": "f312704fdb8ad79b",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Giao Diện Điều Khiển ZOOM",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "80",
        "x": 1000,
        "y": 440,
        "wires": [
            [
                "258a37498aea1d59"
            ]
        ]
    },
    {
        "id": "3935746ea35c43f4",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 1",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_1",
        "scale": "100",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "626b401876c0ee1b"
            ]
        ]
    },
    {
        "id": "626b401876c0ee1b",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 2",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_2",
        "scale": "100",
        "x": 770,
        "y": 500,
        "wires": [
            [
                "7c90e909d22e018f"
            ]
        ]
    },
    {
        "id": "7c90e909d22e018f",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 3",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_3",
        "scale": "100",
        "x": 930,
        "y": 500,
        "wires": [
            [
                "fe82d5fef606538f"
            ]
        ]
    },
    {
        "id": "fe82d5fef606538f",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 4",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_4",
        "scale": "100",
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "bb5a8555ba8fdacd"
            ]
        ]
    },
    {
        "id": "bb5a8555ba8fdacd",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 5",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_5",
        "scale": "100",
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "ced9f94b4edef287"
            ]
        ]
    },
    {
        "id": "ced9f94b4edef287",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 6",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_6",
        "scale": "100",
        "x": 610,
        "y": 560,
        "wires": [
            [
                "e832181e23bc2800"
            ]
        ]
    },
    {
        "id": "e832181e23bc2800",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 7",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_7",
        "scale": "100",
        "x": 770,
        "y": 560,
        "wires": [
            [
                "c12d0a1bf9d5e1d1"
            ]
        ]
    },
    {
        "id": "c12d0a1bf9d5e1d1",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 8",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_8",
        "scale": "100",
        "x": 930,
        "y": 560,
        "wires": [
            [
                "d0b4d02a477ac580"
            ]
        ]
    },
    {
        "id": "d0b4d02a477ac580",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 9",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_9",
        "scale": "100",
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "b49249984a5e6c9b"
            ]
        ]
    },
    {
        "id": "b49249984a5e6c9b",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 10",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_10",
        "scale": "100",
        "x": 1260,
        "y": 560,
        "wires": [
            [
                "7ec09ca0561b94e2"
            ]
        ]
    },
    {
        "id": "4c5bde7bf3effa34",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "title": "BÁO CÁO",
        "x": 470,
        "y": 760,
        "wires": [
            [
                "8bfc95318abba4a0"
            ]
        ]
    },
    {
        "id": "258a37498aea1d59",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "title": "MÁY",
        "x": 450,
        "y": 500,
        "wires": [
            [
                "3935746ea35c43f4"
            ]
        ]
    },
    {
        "id": "8bfc95318abba4a0",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Báo Cáo Chi Tiết",
        "url": "/scada/ReportProjectStampingMachine2ChiTiet",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 710,
        "y": 760,
        "wires": [
            [
                "f7f513ea969bef84"
            ]
        ]
    },
    {
        "id": "f7f513ea969bef84",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Báo Cáo Sản Lượng",
        "url": "/scada/ReportProjectStampingMachine2Productivity",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1000,
        "y": 760,
        "wires": [
            [
                "2ca20810ce0f2aad"
            ]
        ]
    },
    {
        "id": "2ca20810ce0f2aad",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Báo Cáo Trạng Thái",
        "url": "/scada/ReportProjectStampingMachine2TrangThai",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1300,
        "y": 760,
        "wires": [
            [
                "c999e0475c280f27"
            ]
        ]
    },
    {
        "id": "86695bb03c41d2c4",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "title": "USER MANAGER",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "4b97f0b28806538e"
            ]
        ]
    },
    {
        "id": "4b97f0b28806538e",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 740,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c999e0475c280f27",
        "type": "Config_Web End",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "port": "8002",
        "x": 430,
        "y": 940,
        "wires": [
            [
                "440633dbfe2f39be",
                "3c30b0f854afe839"
            ]
        ]
    },
    {
        "id": "7ed719cdef8111f6",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "b064a73cf83e2e6b"
            ]
        ]
    },
    {
        "id": "4654f2221bbe6404",
        "type": "plc_omron",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "PLC OMRON STAMPING MACHINE 11,12,13,14",
        "host": "192.168.2.215",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "800",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "70",
        "PLC_WordStartBitDisplay": "70",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "500",
        "PLC_WordStartWordAdjust": "600",
        "PLC_LengthOfWordWordAdjust": "50",
        "PLC_WordStartDWordDisplay": "650",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "700",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 910,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7ec09ca0561b94e2",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 11",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_11",
        "scale": "100",
        "header_hide": "0",
        "x": 600,
        "y": 620,
        "wires": [
            [
                "dcfa39508bca0f07"
            ]
        ]
    },
    {
        "id": "6bc27efb868076f4",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 13",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_13",
        "scale": "100",
        "x": 960,
        "y": 620,
        "wires": [
            [
                "843b278561040fe2"
            ]
        ]
    },
    {
        "id": "843b278561040fe2",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name_page": "Máy 14",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_14",
        "scale": "100",
        "x": 1140,
        "y": 620,
        "wires": [
            [
                "4c5bde7bf3effa34"
            ]
        ]
    },
    {
        "id": "d6aaa1a845185c48",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "ac63ef352477bb51",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 60,
        "wires": [
            [
                "210e1f6a610fcb59"
            ]
        ]
    },
    {
        "id": "210e1f6a610fcb59",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "ac63ef352477bb51",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            [
                "36450c246d0a7bea"
            ]
        ]
    },
    {
        "id": "36450c246d0a7bea",
        "type": "debug",
        "z": "eb4fd77fac3c21b7",
        "g": "ac63ef352477bb51",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 60,
        "wires": []
    },
    {
        "id": "124568de071c9548",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "ac63ef352477bb51",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 530,
        "y": 100,
        "wires": [
            [
                "a5836e5c12b5913b"
            ]
        ]
    },
    {
        "id": "a5836e5c12b5913b",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "ac63ef352477bb51",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })    \n},1000)",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "440633dbfe2f39be",
        "type": "file",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 740,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "3c30b0f854afe839",
        "type": "file",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 710,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "47cb4f58cfa1de89",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "title": "EXCEL",
        "x": 460,
        "y": 2640,
        "wires": [
            [
                "3e5742ae25585da5"
            ]
        ]
    },
    {
        "id": "3e5742ae25585da5",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Nhân Viên",
        "url": "/excel/NhanVien2",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 690,
        "y": 2640,
        "wires": [
            [
                "bfb8bbe428507573"
            ]
        ]
    },
    {
        "id": "bfb8bbe428507573",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Sản Phẩm",
        "url": "/excel/SanPham2",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 930,
        "y": 2640,
        "wires": [
            [
                "335edeeb551c66d5"
            ]
        ]
    },
    {
        "id": "335edeeb551c66d5",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "title": "ALARM",
        "x": 460,
        "y": 2700,
        "wires": [
            [
                "e0e2da728d67d292"
            ]
        ]
    },
    {
        "id": "e0e2da728d67d292",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Setup Alarm",
        "url": "/scada/setupAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 690,
        "y": 2700,
        "wires": [
            [
                "8478f788193c03ca"
            ]
        ]
    },
    {
        "id": "8478f788193c03ca",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Alarm Table",
        "url": "/scada/setupAlarmTable",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 930,
        "y": 2700,
        "wires": [
            [
                "a8159c0a445f9175"
            ]
        ]
    },
    {
        "id": "a8159c0a445f9175",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "title": "LOG REPORT",
        "x": 480,
        "y": 2760,
        "wires": [
            [
                "eb039691675f9329"
            ]
        ]
    },
    {
        "id": "eb039691675f9329",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Log Data",
        "url": "/scada/logData",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 700,
        "y": 2760,
        "wires": [
            [
                "14067cbc18d51a81"
            ]
        ]
    },
    {
        "id": "14067cbc18d51a81",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Log Alarm",
        "url": "/scada/logAlarm",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 920,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "09f9d336d12ce721",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "c4010d7ec8520bed",
        "name_page": "Máy 12",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_12",
        "scale": "100",
        "x": 840,
        "y": 2160,
        "wires": [
            [
                "40c8dda31c176ee1"
            ]
        ]
    },
    {
        "id": "329e1208d13c5f54",
        "type": "plc_omron",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "PLC OMRON STAMPING MACHINE 2",
        "host": "192.168.2.222",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "800",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "70",
        "PLC_WordStartBitDisplay": "70",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "500",
        "PLC_WordStartWordAdjust": "600",
        "PLC_LengthOfWordWordAdjust": "50",
        "PLC_WordStartDWordDisplay": "650",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "700",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 930,
        "y": 1740,
        "wires": [
            [
                "1b9f4bf5f41bae40"
            ]
        ]
    },
    {
        "id": "079325187703e652",
        "type": "file in",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Read Config",
        "filename": "config/default_StampingMachine2.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 510,
        "y": 1660,
        "wires": [
            [
                "93bbe82072798cdd",
                "50709afac12bdcec"
            ]
        ]
    },
    {
        "id": "50709afac12bdcec",
        "type": "debug",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Write out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1640,
        "wires": []
    },
    {
        "id": "93bbe82072798cdd",
        "type": "file",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Write default",
        "filename": "config/default.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 730,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "b2afaaea1a591c67",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Write Stamping Machine 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 1780,
        "wires": [
            [
                "481b5110cd712f4c",
                "e7447117dcfe9551"
            ]
        ]
    },
    {
        "id": "481b5110cd712f4c",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/StampingMachine2.db\"\n\nnode.warn(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1860,
        "wires": [
            [
                "2e560e8e9930cb4f",
                "2b7e0f02add1986d"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "b4b55e5bd38c9eef",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Show Debug PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Toggle_Debug",
        "payloadType": "str",
        "x": 530,
        "y": 1780,
        "wires": [
            [
                "2e560e8e9930cb4f"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "c69acb22ceb7e5fd",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "CHECK DATA NODE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Check_Data_Node",
        "payloadType": "str",
        "x": 540,
        "y": 1740,
        "wires": [
            [
                "2e560e8e9930cb4f"
            ]
        ]
    },
    {
        "id": "a2be93b2e164bec4",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "CLOSE PLC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Close_PLC",
        "payloadType": "str",
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "2e560e8e9930cb4f"
            ]
        ]
    },
    {
        "id": "148dd472cfe19aa8",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1660,
        "wires": [
            [
                "079325187703e652"
            ]
        ]
    },
    {
        "id": "8d8c7bcc11fd922a",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "Stamping Machine PROCESS",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\n\nvar SubFunction = global.get(\"SubFunction\");\nvar ProjectVariables = global.get(\"ProjectVariable\");\nvar ProjectFunction = global.get(\"ProjectFunction\");\nvar count = 0\nVariables.ListString[1] = new Array(140).fill('---');\nvar myInitial = setInterval(fnTimer1s, 1000);\n\nfunction fnTimer1s() {\n    let a = new Date()\n    Variables.ListString[1][100] = ((a.getHours() < 10 ? \"0\" : '') + a.getHours() + ':' + (a.getMinutes() < 10 ? \"0\" : '') + a.getMinutes() + ':' + (a.getSeconds() < 10 ? \"0\" : '') + a.getSeconds())\n    Variables.ListString[1][101] = ((a.getDate() < 10 ? \"0\" : '') + a.getDate() + '/' + ((a.getMonth() + 1) < 10 ? \"0\" : '') + (a.getMonth() + 1) + '/' + (a.getFullYear() < 10 ? \"0\" : '') + a.getFullYear())\n}\ntry {\n    setInterval(function () {\n        if (parseInt(ProjectVariables.waitStart) > 0) {\n            ProjectVariables.waitStart = parseInt(ProjectVariables.waitStart) - 1\n        }\n\n        //Check Operator Machine 1\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][31], ProjectVariables.Old_Machine1_NV1, Variables.ListString[1][1],\n                    Variables.WordDisplay[1][32], ProjectVariables.Old_Machine1_NV2, Variables.ListString[1][2],\n                    Variables.WordDisplay[1][33], ProjectVariables.Old_Machine1_NV3, Variables.ListString[1][3],\n                    Variables.WordDisplay[1][34], ProjectVariables.Old_Machine1_NV4, Variables.ListString[1][4],\n                    Variables.WordDisplay[1][35], ProjectVariables.Old_Machine1_NV5, Variables.ListString[1][5],\n                )\n            ProjectVariables.Old_Machine1_NV1 = old_id1\n            ProjectVariables.Old_Machine1_NV2 = old_id2\n            ProjectVariables.Old_Machine1_NV3 = old_id3\n            ProjectVariables.Old_Machine1_NV4 = old_id4\n            ProjectVariables.Old_Machine1_NV5 = old_id5\n\n            Variables.ListString[1][1] = list1\n            Variables.ListString[1][2] = list2\n            Variables.ListString[1][3] = list3\n            Variables.ListString[1][4] = list4\n            Variables.ListString[1][5] = list5\n        }\n        //Check Operator Machine 2\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][81], ProjectVariables.Old_Machine2_NV1, Variables.ListString[1][11],\n                    Variables.WordDisplay[1][82], ProjectVariables.Old_Machine2_NV2, Variables.ListString[1][12],\n                    Variables.WordDisplay[1][83], ProjectVariables.Old_Machine2_NV3, Variables.ListString[1][13],\n                    Variables.WordDisplay[1][84], ProjectVariables.Old_Machine2_NV4, Variables.ListString[1][14],\n                    Variables.WordDisplay[1][85], ProjectVariables.Old_Machine2_NV5, Variables.ListString[1][15],\n                )\n            ProjectVariables.Old_Machine2_NV1 = old_id1\n            ProjectVariables.Old_Machine2_NV2 = old_id2\n            ProjectVariables.Old_Machine2_NV3 = old_id3\n            ProjectVariables.Old_Machine2_NV4 = old_id4\n            ProjectVariables.Old_Machine2_NV5 = old_id5\n            Variables.ListString[1][11] = list1\n            Variables.ListString[1][12] = list2\n            Variables.ListString[1][13] = list3\n            Variables.ListString[1][14] = list4\n            Variables.ListString[1][15] = list5\n        }\n        //Check Operator Machine 3\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][131], ProjectVariables.Old_Machine3_NV1, Variables.ListString[1][21],\n                    Variables.WordDisplay[1][132], ProjectVariables.Old_Machine3_NV2, Variables.ListString[1][22],\n                    Variables.WordDisplay[1][133], ProjectVariables.Old_Machine3_NV3, Variables.ListString[1][23],\n                    Variables.WordDisplay[1][134], ProjectVariables.Old_Machine3_NV4, Variables.ListString[1][24],\n                    Variables.WordDisplay[1][135], ProjectVariables.Old_Machine3_NV5, Variables.ListString[1][25]\n                )\n            ProjectVariables.Old_Machine3_NV1 = old_id1\n            ProjectVariables.Old_Machine3_NV2 = old_id2\n            ProjectVariables.Old_Machine3_NV3 = old_id3\n            ProjectVariables.Old_Machine3_NV4 = old_id4\n            ProjectVariables.Old_Machine3_NV5 = old_id5\n            Variables.ListString[1][21] = list1\n            Variables.ListString[1][22] = list2\n            Variables.ListString[1][23] = list3\n            Variables.ListString[1][24] = list4\n            Variables.ListString[1][25] = list5\n        }\n        //Check Operator Machine 4\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][181], ProjectVariables.Old_Machine4_NV1, Variables.ListString[1][31],\n                    Variables.WordDisplay[1][182], ProjectVariables.Old_Machine4_NV2, Variables.ListString[1][32],\n                    Variables.WordDisplay[1][183], ProjectVariables.Old_Machine4_NV3, Variables.ListString[1][33],\n                    Variables.WordDisplay[1][184], ProjectVariables.Old_Machine4_NV4, Variables.ListString[1][34],\n                    Variables.WordDisplay[1][185], ProjectVariables.Old_Machine4_NV5, Variables.ListString[1][35],\n                )\n            ProjectVariables.Old_Machine4_NV1 = old_id1\n            ProjectVariables.Old_Machine4_NV2 = old_id2\n            ProjectVariables.Old_Machine4_NV3 = old_id3\n            ProjectVariables.Old_Machine4_NV4 = old_id4\n            ProjectVariables.Old_Machine4_NV5 = old_id5\n            Variables.ListString[1][31] = list1\n            Variables.ListString[1][32] = list2\n            Variables.ListString[1][33] = list3\n            Variables.ListString[1][34] = list4\n            Variables.ListString[1][35] = list5\n        }\n        //Check Operator Machine 5\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][231], ProjectVariables.Old_Machine5_NV1, Variables.ListString[1][41],\n                    Variables.WordDisplay[1][232], ProjectVariables.Old_Machine5_NV2, Variables.ListString[1][42],\n                    Variables.WordDisplay[1][233], ProjectVariables.Old_Machine5_NV3, Variables.ListString[1][43],\n                    Variables.WordDisplay[1][234], ProjectVariables.Old_Machine5_NV4, Variables.ListString[1][44],\n                    Variables.WordDisplay[1][235], ProjectVariables.Old_Machine5_NV5, Variables.ListString[1][45]\n                )\n            ProjectVariables.Old_Machine5_NV1 = old_id1\n            ProjectVariables.Old_Machine5_NV2 = old_id2\n            ProjectVariables.Old_Machine5_NV3 = old_id3\n            ProjectVariables.Old_Machine5_NV4 = old_id4\n            ProjectVariables.Old_Machine5_NV5 = old_id5\n            Variables.ListString[1][41] = list1\n            Variables.ListString[1][42] = list2\n            Variables.ListString[1][43] = list3\n            Variables.ListString[1][44] = list4\n            Variables.ListString[1][45] = list5\n        }\n        //Check Operator Machine 6\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][281], ProjectVariables.Old_Machine6_NV1, Variables.ListString[1][51],\n                    Variables.WordDisplay[1][282], ProjectVariables.Old_Machine6_NV2, Variables.ListString[1][52],\n                    Variables.WordDisplay[1][283], ProjectVariables.Old_Machine6_NV3, Variables.ListString[1][53],\n                    Variables.WordDisplay[1][284], ProjectVariables.Old_Machine6_NV4, Variables.ListString[1][54],\n                    Variables.WordDisplay[1][285], ProjectVariables.Old_Machine6_NV5, Variables.ListString[1][55]\n                )\n            ProjectVariables.Old_Machine6_NV1 = old_id1\n            ProjectVariables.Old_Machine6_NV2 = old_id2\n            ProjectVariables.Old_Machine6_NV3 = old_id3\n            ProjectVariables.Old_Machine6_NV4 = old_id4\n            ProjectVariables.Old_Machine6_NV5 = old_id5\n            Variables.ListString[1][51] = list1\n            Variables.ListString[1][52] = list2\n            Variables.ListString[1][53] = list3\n            Variables.ListString[1][54] = list4\n            Variables.ListString[1][55] = list5\n        }\n        //Check Operator Machine 7\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][331], ProjectVariables.Old_Machine7_NV1, Variables.ListString[1][61],\n                    Variables.WordDisplay[1][332], ProjectVariables.Old_Machine7_NV2, Variables.ListString[1][62],\n                    Variables.WordDisplay[1][333], ProjectVariables.Old_Machine7_NV3, Variables.ListString[1][63],\n                    Variables.WordDisplay[1][334], ProjectVariables.Old_Machine7_NV4, Variables.ListString[1][64],\n                    Variables.WordDisplay[1][335], ProjectVariables.Old_Machine7_NV5, Variables.ListString[1][65],\n                )\n            ProjectVariables.Old_Machine7_NV1 = old_id1\n            ProjectVariables.Old_Machine7_NV2 = old_id2\n            ProjectVariables.Old_Machine7_NV3 = old_id3\n            ProjectVariables.Old_Machine7_NV4 = old_id4\n            ProjectVariables.Old_Machine7_NV5 = old_id5\n            Variables.ListString[1][61] = list1\n            Variables.ListString[1][62] = list2\n            Variables.ListString[1][63] = list3\n            Variables.ListString[1][64] = list4\n            Variables.ListString[1][65] = list5\n        }\n        //Check Operator Machine 8\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][381], ProjectVariables.Old_Machine8_NV1, Variables.ListString[1][71],\n                    Variables.WordDisplay[1][382], ProjectVariables.Old_Machine8_NV2, Variables.ListString[1][72],\n                    Variables.WordDisplay[1][383], ProjectVariables.Old_Machine8_NV3, Variables.ListString[1][73],\n                    Variables.WordDisplay[1][384], ProjectVariables.Old_Machine8_NV4, Variables.ListString[1][74],\n                    Variables.WordDisplay[1][385], ProjectVariables.Old_Machine8_NV5, Variables.ListString[1][75],\n                )\n            ProjectVariables.Old_Machine8_NV1 = old_id1\n            ProjectVariables.Old_Machine8_NV2 = old_id2\n            ProjectVariables.Old_Machine8_NV3 = old_id3\n            ProjectVariables.Old_Machine8_NV4 = old_id4\n            ProjectVariables.Old_Machine8_NV5 = old_id5\n            Variables.ListString[1][71] = list1\n            Variables.ListString[1][72] = list2\n            Variables.ListString[1][73] = list3\n            Variables.ListString[1][74] = list4\n            Variables.ListString[1][75] = list5\n        }\n        //Check Operator Machine 9\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][431], ProjectVariables.Old_Machine9_NV1, Variables.ListString[1][81],\n                    Variables.WordDisplay[1][432], ProjectVariables.Old_Machine9_NV2, Variables.ListString[1][82],\n                    Variables.WordDisplay[1][433], ProjectVariables.Old_Machine9_NV3, Variables.ListString[1][83],\n                    Variables.WordDisplay[1][434], ProjectVariables.Old_Machine9_NV4, Variables.ListString[1][84],\n                    Variables.WordDisplay[1][435], ProjectVariables.Old_Machine9_NV5, Variables.ListString[1][85],\n                )\n            ProjectVariables.Old_Machine9_NV1 = old_id1\n            ProjectVariables.Old_Machine9_NV2 = old_id2\n            ProjectVariables.Old_Machine9_NV3 = old_id3\n            ProjectVariables.Old_Machine9_NV4 = old_id4\n            ProjectVariables.Old_Machine9_NV5 = old_id5\n            Variables.ListString[1][81] = list1\n            Variables.ListString[1][82] = list2\n            Variables.ListString[1][83] = list3\n            Variables.ListString[1][84] = list4\n            Variables.ListString[1][85] = list5\n        }\n        //Check Operator Machine 10\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[1][481], ProjectVariables.Old_Machine10_NV1, Variables.ListString[1][91],\n                    Variables.WordDisplay[1][482], ProjectVariables.Old_Machine10_NV2, Variables.ListString[1][92],\n                    Variables.WordDisplay[1][483], ProjectVariables.Old_Machine10_NV3, Variables.ListString[1][93],\n                    Variables.WordDisplay[1][484], ProjectVariables.Old_Machine10_NV4, Variables.ListString[1][94],\n                    Variables.WordDisplay[1][485], ProjectVariables.Old_Machine10_NV5, Variables.ListString[1][95],\n                )\n            ProjectVariables.Old_Machine10_NV1 = old_id1\n            ProjectVariables.Old_Machine10_NV2 = old_id2\n            ProjectVariables.Old_Machine10_NV3 = old_id3\n            ProjectVariables.Old_Machine10_NV4 = old_id4\n            ProjectVariables.Old_Machine10_NV5 = old_id5\n            Variables.ListString[1][91] = list1\n            Variables.ListString[1][92] = list2\n            Variables.ListString[1][93] = list3\n            Variables.ListString[1][94] = list4\n            Variables.ListString[1][95] = list5\n        }\n        //Check Operator Machine 11\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][31], ProjectVariables.Old_Machine11_NV1, Variables.ListString[2][1],\n                    Variables.WordDisplay[2][32], ProjectVariables.Old_Machine11_NV2, Variables.ListString[2][2],\n                    Variables.WordDisplay[2][33], ProjectVariables.Old_Machine11_NV3, Variables.ListString[2][3],\n                    Variables.WordDisplay[2][34], ProjectVariables.Old_Machine11_NV4, Variables.ListString[2][4],\n                    Variables.WordDisplay[2][35], ProjectVariables.Old_Machine11_NV5, Variables.ListString[2][5],\n                )\n            ProjectVariables.Old_Machine11_NV1 = old_id1\n            ProjectVariables.Old_Machine11_NV2 = old_id2\n            ProjectVariables.Old_Machine11_NV3 = old_id3\n            ProjectVariables.Old_Machine11_NV4 = old_id4\n            ProjectVariables.Old_Machine11_NV5 = old_id5\n\n            Variables.ListString[2][1] = list1\n            Variables.ListString[2][2] = list2\n            Variables.ListString[2][3] = list3\n            Variables.ListString[2][4] = list4\n            Variables.ListString[2][5] = list5\n        }\n        //Check Operator Machine 12\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][81], ProjectVariables.Old_Machine12_NV1, Variables.ListString[2][11],\n                    Variables.WordDisplay[2][82], ProjectVariables.Old_Machine12_NV2, Variables.ListString[2][12],\n                    Variables.WordDisplay[2][83], ProjectVariables.Old_Machine12_NV3, Variables.ListString[2][13],\n                    Variables.WordDisplay[2][84], ProjectVariables.Old_Machine12_NV4, Variables.ListString[2][14],\n                    Variables.WordDisplay[2][85], ProjectVariables.Old_Machine12_NV5, Variables.ListString[2][15],\n                )\n            ProjectVariables.Old_Machine12_NV1 = old_id1\n            ProjectVariables.Old_Machine12_NV2 = old_id2\n            ProjectVariables.Old_Machine12_NV3 = old_id3\n            ProjectVariables.Old_Machine12_NV4 = old_id4\n            ProjectVariables.Old_Machine12_NV5 = old_id5\n            Variables.ListString[2][11] = list1\n            Variables.ListString[2][12] = list2\n            Variables.ListString[2][13] = list3\n            Variables.ListString[2][14] = list4\n            Variables.ListString[2][15] = list5\n        }\n        //Check Operator Machine 13\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][131], ProjectVariables.Old_Machine13_NV1, Variables.ListString[2][21],\n                    Variables.WordDisplay[2][132], ProjectVariables.Old_Machine13_NV2, Variables.ListString[2][22],\n                    Variables.WordDisplay[2][133], ProjectVariables.Old_Machine13_NV3, Variables.ListString[2][23],\n                    Variables.WordDisplay[2][134], ProjectVariables.Old_Machine13_NV4, Variables.ListString[2][24],\n                    Variables.WordDisplay[2][135], ProjectVariables.Old_Machine13_NV5, Variables.ListString[2][25]\n                )\n            ProjectVariables.Old_Machine13_NV1 = old_id1\n            ProjectVariables.Old_Machine13_NV2 = old_id2\n            ProjectVariables.Old_Machine13_NV3 = old_id3\n            ProjectVariables.Old_Machine13_NV4 = old_id4\n            ProjectVariables.Old_Machine13_NV5 = old_id5\n            Variables.ListString[2][21] = list1\n            Variables.ListString[2][22] = list2\n            Variables.ListString[2][23] = list3\n            Variables.ListString[2][24] = list4\n            Variables.ListString[2][25] = list5\n        }\n        //Check Operator Machine 14\n        {\n            let {\n                old_id1, list1, old_id2, list2, old_id3, list3,\n                old_id4, list4, old_id5, list5 } = ProjectFunction.CheckOperatorMachine(\n                    Variables.WordDisplay[2][181], ProjectVariables.Old_Machine14_NV1, Variables.ListString[2][31],\n                    Variables.WordDisplay[2][182], ProjectVariables.Old_Machine14_NV2, Variables.ListString[2][32],\n                    Variables.WordDisplay[2][183], ProjectVariables.Old_Machine14_NV3, Variables.ListString[2][33],\n                    Variables.WordDisplay[2][184], ProjectVariables.Old_Machine14_NV4, Variables.ListString[2][34],\n                    Variables.WordDisplay[2][185], ProjectVariables.Old_Machine14_NV5, Variables.ListString[2][35],\n                )\n            ProjectVariables.Old_Machine14_NV1 = old_id1\n            ProjectVariables.Old_Machine14_NV2 = old_id2\n            ProjectVariables.Old_Machine14_NV3 = old_id3\n            ProjectVariables.Old_Machine14_NV4 = old_id4\n            ProjectVariables.Old_Machine14_NV5 = old_id5\n            Variables.ListString[2][31] = list1\n            Variables.ListString[2][32] = list2\n            Variables.ListString[2][33] = list3\n            Variables.ListString[2][34] = list4\n            Variables.ListString[2][35] = list5\n        }\n\n\n        //Check SP Machine 1\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][1],\n                ProjectVariables.Old_Machine1_SP,\n                Variables.ListString[1][0],\n                Variables.ListString[1][6],\n                Variables.ListString[1][7],\n            )\n            if (ProjectVariables.Old_Machine1_SP !== old_sp) {\n                ProjectVariables.Old_Machine1_SP = old_sp\n                Variables.ListString[1][0] = list_sp\n                Variables.ListString[1][6] = list_tieuchuan_nhietdo\n                Variables.ListString[1][7] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong1 = heso_sanluong\n            }\n        }\n        //Check SP Machine 2\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][51],\n                ProjectVariables.Old_Machine2_SP,\n                Variables.ListString[1][10],\n                Variables.ListString[1][16],\n                Variables.ListString[1][17],\n            )\n            if (ProjectVariables.Old_Machine2_SP !== old_sp) {\n                ProjectVariables.Old_Machine2_SP = old_sp\n                Variables.ListString[1][10] = list_sp\n                Variables.ListString[1][16] = list_tieuchuan_nhietdo\n                Variables.ListString[1][17] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong2 = heso_sanluong\n            }\n        }\n        //Check SP Machine 3\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][101],\n                ProjectVariables.Old_Machine3_SP,\n                Variables.ListString[1][20],\n                Variables.ListString[1][26],\n                Variables.ListString[1][27],\n            )\n            if (ProjectVariables.Old_Machine3_SP !== old_sp) {\n                ProjectVariables.Old_Machine3_SP = old_sp\n                Variables.ListString[1][20] = list_sp\n                Variables.ListString[1][26] = list_tieuchuan_nhietdo\n                Variables.ListString[1][27] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong3 = heso_sanluong\n            }\n        }\n        //Check SP Machine 4\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][151],\n                ProjectVariables.Old_Machine4_SP,\n                Variables.ListString[1][30],\n                Variables.ListString[1][36],\n                Variables.ListString[1][37],\n            )\n            if (ProjectVariables.Old_Machine4_SP !== old_sp) {\n                ProjectVariables.Old_Machine4_SP = old_sp\n                Variables.ListString[1][30] = list_sp\n                Variables.ListString[1][36] = list_tieuchuan_nhietdo\n                Variables.ListString[1][37] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong4 = heso_sanluong\n            }\n        }\n        //Check SP Machine 5\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][201],\n                ProjectVariables.Old_Machine5_SP,\n                Variables.ListString[1][40],\n                Variables.ListString[1][46],\n                Variables.ListString[1][47],\n            )\n            if (ProjectVariables.Old_Machine5_SP !== old_sp) {\n                ProjectVariables.Old_Machine5_SP = old_sp\n                Variables.ListString[1][40] = list_sp\n                Variables.ListString[1][46] = list_tieuchuan_nhietdo\n                Variables.ListString[1][47] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong5 = heso_sanluong\n            }\n        }\n        //Check SP Machine 6\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][251],\n                ProjectVariables.Old_Machine6_SP,\n                Variables.ListString[1][50],\n                Variables.ListString[1][56],\n                Variables.ListString[1][57],\n            )\n            if (ProjectVariables.Old_Machine6_SP !== old_sp) {\n                ProjectVariables.Old_Machine6_SP = old_sp\n                Variables.ListString[1][50] = list_sp\n                Variables.ListString[1][56] = list_tieuchuan_nhietdo\n                Variables.ListString[1][57] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong6 = heso_sanluong\n            }\n        }\n        //Check SP Machine 7\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][301],\n                ProjectVariables.Old_Machine7_SP,\n                Variables.ListString[1][60],\n                Variables.ListString[1][66],\n                Variables.ListString[1][67],\n            )\n            if (ProjectVariables.Old_Machine7_SP !== old_sp) {\n                ProjectVariables.Old_Machine7_SP = old_sp\n                Variables.ListString[1][60] = list_sp\n                Variables.ListString[1][66] = list_tieuchuan_nhietdo\n                Variables.ListString[1][67] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong7 = heso_sanluong\n            }\n        }\n        //Check SP Machine 8\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][351],\n                ProjectVariables.Old_Machine8_SP,\n                Variables.ListString[1][70],\n                Variables.ListString[1][76],\n                Variables.ListString[1][77],\n            )\n            if (ProjectVariables.Old_Machine8_SP !== old_sp) {\n                ProjectVariables.Old_Machine8_SP = old_sp\n                Variables.ListString[1][70] = list_sp\n                Variables.ListString[1][76] = list_tieuchuan_nhietdo\n                Variables.ListString[1][77] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong8 = heso_sanluong\n            }\n        }\n        //Check SP Machine 9\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][401],\n                ProjectVariables.Old_Machine9_SP,\n                Variables.ListString[1][80],\n                Variables.ListString[1][86],\n                Variables.ListString[1][87],\n            )\n            if (ProjectVariables.Old_Machine9_SP !== old_sp) {\n                ProjectVariables.Old_Machine9_SP = old_sp\n                Variables.ListString[1][80] = list_sp\n                Variables.ListString[1][86] = list_tieuchuan_nhietdo\n                Variables.ListString[1][87] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong9 = heso_sanluong\n            }\n        }\n        //Check SP Machine 10\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[1][451],\n                ProjectVariables.Old_Machine10_SP,\n                Variables.ListString[1][90],\n                Variables.ListString[1][96],\n                Variables.ListString[1][97],\n            )\n            if (ProjectVariables.Old_Machine10_SP !== old_sp) {\n                ProjectVariables.Old_Machine10_SP = old_sp\n                Variables.ListString[1][90] = list_sp\n                Variables.ListString[1][96] = list_tieuchuan_nhietdo\n                Variables.ListString[1][97] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong10 = heso_sanluong\n            }\n        }\n        //Check SP Machine 11\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][1],\n                ProjectVariables.Old_Machine11_SP,\n                Variables.ListString[2][0],\n                Variables.ListString[2][6],\n                Variables.ListString[2][7],\n            )\n            if (ProjectVariables.Old_Machine11_SP !== old_sp) {\n                ProjectVariables.Old_Machine11_SP = old_sp\n                Variables.ListString[2][0] = list_sp\n                Variables.ListString[2][6] = list_tieuchuan_nhietdo\n                Variables.ListString[2][7] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong11 = heso_sanluong\n            }\n        }\n        //Check SP Machine 12\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][51],\n                ProjectVariables.Old_Machine12_SP,\n                Variables.ListString[2][10],\n                Variables.ListString[2][16],\n                Variables.ListString[2][17],\n            )\n            if (ProjectVariables.Old_Machine12_SP !== old_sp) {\n                ProjectVariables.Old_Machine12_SP = old_sp\n                Variables.ListString[2][10] = list_sp\n                Variables.ListString[2][16] = list_tieuchuan_nhietdo\n                Variables.ListString[2][17] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong12 = heso_sanluong\n            }\n        }\n        //Check SP Machine 13\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][101],\n                ProjectVariables.Old_Machine13_SP,\n                Variables.ListString[2][20],\n                Variables.ListString[2][26],\n                Variables.ListString[2][27],\n            )\n            if (ProjectVariables.Old_Machine13_SP !== old_sp) {\n                ProjectVariables.Old_Machine13_SP = old_sp\n                Variables.ListString[2][20] = list_sp\n                Variables.ListString[2][26] = list_tieuchuan_nhietdo\n                Variables.ListString[2][27] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong13 = heso_sanluong\n            }\n        }\n        //Check SP Machine 14\n        {\n            let { old_sp, list_sp, list_tieuchuan_nhietdo, list_tieuchuan_thoigian, heso_sanluong } = ProjectFunction.CheckSPMachine(\n                Variables.WordDisplay[2][151],\n                ProjectVariables.Old_Machine14_SP,\n                Variables.ListString[2][30],\n                Variables.ListString[2][36],\n                Variables.ListString[2][37],\n            )\n            if (ProjectVariables.Old_Machine14_SP !== old_sp) {\n                ProjectVariables.Old_Machine14_SP = old_sp\n                Variables.ListString[2][30] = list_sp\n                Variables.ListString[2][36] = list_tieuchuan_nhietdo\n                Variables.ListString[2][37] = list_tieuchuan_thoigian\n                ProjectVariables.heso_sanluong14 = heso_sanluong\n            }\n        }\n        \n        //Report Chi Tiet + Productivity 1\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][13]) == 0) {\n                    ProjectVariables.Old_CheckReport1 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][13]) == 1 && ProjectVariables.Old_CheckReport1 == 0)) {\n                    ProjectVariables.Old_CheckReport1 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine1();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][9]) > 0) {\n                if (ProjectVariables.oldAmountProduct1 !== parseInt(Variables.WordDisplay[1][9])) {\n                    ProjectVariables.oldAmountProduct1 = parseInt(Variables.WordDisplay[1][9])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][9]) == 0 && ProjectVariables.oldAmountProduct1 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine1();\n                    ProjectVariables.oldAmountProduct1 = 0\n\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 2\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][29]) == 0) {\n                    ProjectVariables.Old_CheckReport2 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][29]) == 1 && ProjectVariables.Old_CheckReport2 == 0)) {\n                    ProjectVariables.Old_CheckReport2 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine2();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][59]) > 0) {\n                if (ProjectVariables.oldAmountProduct2 !== parseInt(Variables.WordDisplay[1][59])) {\n                    ProjectVariables.oldAmountProduct2 = parseInt(Variables.WordDisplay[1][59])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][59]) == 0 && ProjectVariables.oldAmountProduct2 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine2();\n                    ProjectVariables.oldAmountProduct2 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 3\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][45]) == 0) {\n                    ProjectVariables.Old_CheckReport3 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][45]) == 1 && ProjectVariables.Old_CheckReport3 == 0)) {\n                    ProjectVariables.Old_CheckReport3 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine3();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][109]) > 0) {\n                if (ProjectVariables.oldAmountProduct3 !== parseInt(Variables.WordDisplay[1][109])) {\n                    ProjectVariables.oldAmountProduct3 = parseInt(Variables.WordDisplay[1][109])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][109]) == 0 && ProjectVariables.oldAmountProduct3 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine3();\n                    ProjectVariables.oldAmountProduct3 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 4\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][61]) == 0) {\n                    ProjectVariables.Old_CheckReport4 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][61]) == 1 && ProjectVariables.Old_CheckReport4 == 0)) {\n                    ProjectVariables.Old_CheckReport4 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine4();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][159]) > 0) {\n                if (ProjectVariables.oldAmountProduct4 !== parseInt(Variables.WordDisplay[1][159])) {\n                    ProjectVariables.oldAmountProduct4 = parseInt(Variables.WordDisplay[1][159])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][159]) == 0 && ProjectVariables.oldAmountProduct4 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine4();\n                    ProjectVariables.oldAmountProduct4 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 5\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][77]) == 0) {\n                    ProjectVariables.Old_CheckReport5 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][77]) == 1 && ProjectVariables.Old_CheckReport5 == 0)) {\n                    ProjectVariables.Old_CheckReport5 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine5();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][209]) > 0) {\n                if (ProjectVariables.oldAmountProduct5 !== parseInt(Variables.WordDisplay[1][209])) {\n                    ProjectVariables.oldAmountProduct5 = parseInt(Variables.WordDisplay[1][209])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][209]) == 0 && ProjectVariables.oldAmountProduct5 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine5();\n                    ProjectVariables.oldAmountProduct5 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 6\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][93]) == 0) {\n                    ProjectVariables.Old_CheckReport6 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][93]) == 1 && ProjectVariables.Old_CheckReport6 == 0)) {\n                    ProjectVariables.Old_CheckReport6 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine6();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][259]) > 0) {\n                if (ProjectVariables.oldAmountProduct6 !== parseInt(Variables.WordDisplay[1][259])) {\n                    ProjectVariables.oldAmountProduct6 = parseInt(Variables.WordDisplay[1][259])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][259]) == 0 && ProjectVariables.oldAmountProduct6 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine6();\n                    ProjectVariables.oldAmountProduct6 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 7\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][109]) == 0) {\n                    ProjectVariables.Old_CheckReport7 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][109]) == 1 && ProjectVariables.Old_CheckReport7 == 0)) {\n                    ProjectVariables.Old_CheckReport7 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine7();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][309]) > 0) {\n                if (ProjectVariables.oldAmountProduct7 !== parseInt(Variables.WordDisplay[1][309])) {\n                    ProjectVariables.oldAmountProduct7 = parseInt(Variables.WordDisplay[1][309])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][309]) == 0 && ProjectVariables.oldAmountProduct7 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine7();\n                    ProjectVariables.oldAmountProduct7 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 8\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][125]) == 0) {\n                    ProjectVariables.Old_CheckReport8 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][125]) == 1 && ProjectVariables.Old_CheckReport8 == 0)) {\n                    ProjectVariables.Old_CheckReport8 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine8();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][359]) > 0) {\n                if (ProjectVariables.oldAmountProduct8 !== parseInt(Variables.WordDisplay[1][359])) {\n                    ProjectVariables.oldAmountProduct8 = parseInt(Variables.WordDisplay[1][359])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][359]) == 0 && ProjectVariables.oldAmountProduct8 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine8();\n                    ProjectVariables.oldAmountProduct8 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 9\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][141]) == 0) {\n                    ProjectVariables.Old_CheckReport9 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][141]) == 1 && ProjectVariables.Old_CheckReport9 == 0)) {\n                    ProjectVariables.Old_CheckReport9 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine9();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][409]) > 0) {\n                if (ProjectVariables.oldAmountProduct9 !== parseInt(Variables.WordDisplay[1][409])) {\n                    ProjectVariables.oldAmountProduct9 = parseInt(Variables.WordDisplay[1][409])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][409]) == 0 && ProjectVariables.oldAmountProduct9 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine9();\n                    ProjectVariables.oldAmountProduct9 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 10\n        {\n            {\n                if (parseInt(Variables.BitDisplay[1][157]) == 0) {\n                    ProjectVariables.Old_CheckReport10 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[1][157]) == 1 && ProjectVariables.Old_CheckReport10 == 0)) {\n                    ProjectVariables.Old_CheckReport10 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine10();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[1][459]) > 0) {\n                if (ProjectVariables.oldAmountProduct10 !== parseInt(Variables.WordDisplay[1][459])) {\n                    ProjectVariables.oldAmountProduct10 = parseInt(Variables.WordDisplay[1][459])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[1][459]) == 0 && ProjectVariables.oldAmountProduct10 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine10();\n                    ProjectVariables.oldAmountProduct10 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 11\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][13]) == 0) {\n                    ProjectVariables.Old_CheckReport11 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][13]) == 1 && ProjectVariables.Old_CheckReport11 == 0)) {\n                    ProjectVariables.Old_CheckReport11 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine11();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][9]) > 0) {\n                if (ProjectVariables.oldAmountProduct11 !== parseInt(Variables.WordDisplay[2][9])) {\n                    ProjectVariables.oldAmountProduct11 = parseInt(Variables.WordDisplay[2][9])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][9]) == 0 && ProjectVariables.oldAmountProduct11 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine11();\n                    ProjectVariables.oldAmountProduct11 = 0\n\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 12\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][29]) == 0) {\n                    ProjectVariables.Old_CheckReport12 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][29]) == 1 && ProjectVariables.Old_CheckReport12 == 0)) {\n                    ProjectVariables.Old_CheckReport12 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine12();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][59]) > 0) {\n                if (ProjectVariables.oldAmountProduct12 !== parseInt(Variables.WordDisplay[2][59])) {\n                    ProjectVariables.oldAmountProduct12 = parseInt(Variables.WordDisplay[2][59])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][59]) == 0 && ProjectVariables.oldAmountProduct12 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine12();\n                    ProjectVariables.oldAmountProduct12 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 13\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][45]) == 0) {\n                    ProjectVariables.Old_CheckReport13 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][45]) == 1 && ProjectVariables.Old_CheckReport13 == 0)) {\n                    ProjectVariables.Old_CheckReport13 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine13();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][109]) > 0) {\n                if (ProjectVariables.oldAmountProduct13 !== parseInt(Variables.WordDisplay[2][109])) {\n                    ProjectVariables.oldAmountProduct13 = parseInt(Variables.WordDisplay[2][109])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][109]) == 0 && ProjectVariables.oldAmountProduct13 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine13();\n                    ProjectVariables.oldAmountProduct13 = 0\n                }\n            }\n        }\n        //Report Chi Tiet + Productivity 14\n        {\n            {\n                if (parseInt(Variables.BitDisplay[2][61]) == 0) {\n                    ProjectVariables.Old_CheckReport14 = 0;\n                }\n                if ((parseInt(Variables.BitDisplay[2][61]) == 1 && ProjectVariables.Old_CheckReport14 == 0)) {\n                    ProjectVariables.Old_CheckReport14 = 1\n                    if (parseInt(ProjectVariables.waitStart) == 0) {\n                        ProjectFunction.ReportChiTiet_Machine14();\n                    }\n                }\n            }\n\n            if (parseInt(Variables.WordDisplay[2][159]) > 0) {\n                if (ProjectVariables.oldAmountProduct14 !== parseInt(Variables.WordDisplay[2][159])) {\n                    ProjectVariables.oldAmountProduct14 = parseInt(Variables.WordDisplay[2][159])\n                }\n            }\n            if (parseInt(Variables.WordDisplay[2][159]) == 0 && ProjectVariables.oldAmountProduct14 > 0) {\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.ReportProductivity_Machine14();\n                    ProjectVariables.oldAmountProduct14 = 0\n                }\n            }\n        }\n           \n        //Report Trang Thai 1\n        {\n            let IndexSet = 7;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State1)) {\n                ProjectVariables.Old_State1 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine1('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine1('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine1('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine1('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 2\n        {\n            let IndexSet = 57;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State2)) {\n                ProjectVariables.Old_State2 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine2('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine2('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine2('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine2('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 3\n        {\n            let IndexSet = 107;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State3)) {\n                ProjectVariables.Old_State3 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine3('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine3('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine3('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine3('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 4\n        {\n            let IndexSet = 157;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State4)) {\n                ProjectVariables.Old_State4 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine4('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine4('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine4('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine4('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 5\n        {\n            let IndexSet = 207;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State5)) {\n                ProjectVariables.Old_State5 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine5('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine5('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine5('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine5('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 6\n        {\n            let IndexSet = 257;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State6)) {\n                ProjectVariables.Old_State6 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine6('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine6('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine6('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine6('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 7\n        {\n            let IndexSet = 307;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State7)) {\n                ProjectVariables.Old_State7 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine7('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine7('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine7('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine7('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 8\n        {\n            let IndexSet = 357;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State8)) {\n                ProjectVariables.Old_State8 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine8('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine8('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine8('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine8('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 9\n        {\n            let IndexSet = 407;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State9)) {\n                ProjectVariables.Old_State9 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine9('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine9('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine9('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine9('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 10\n        {\n            let IndexSet = 457;\n            if (parseInt(Variables.WordDisplay[1][IndexSet]) != parseInt(ProjectVariables.Old_State10)) {\n                ProjectVariables.Old_State10 = parseInt(Variables.WordDisplay[1][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine10('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine10('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine10('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[1][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine10('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 11\n        {\n            let IndexSet = 7;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State11)) {\n                ProjectVariables.Old_State11 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine11('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine11('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine11('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine11('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 12\n        {\n            let IndexSet = 57;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State12)) {\n                ProjectVariables.Old_State12 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine12('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine12('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine12('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine12('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 13\n        {\n            let IndexSet = 107;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State13)) {\n                ProjectVariables.Old_State13 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine13('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine13('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine13('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine13('Máy Reset');\n                    }\n                }\n            }\n        }\n        //Report Trang Thai 14\n        {\n            let IndexSet = 157;\n            if (parseInt(Variables.WordDisplay[2][IndexSet]) != parseInt(ProjectVariables.Old_State14)) {\n                ProjectVariables.Old_State14 = parseInt(Variables.WordDisplay[2][IndexSet]);\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 1) {\n                        ProjectFunction.ReportState_Machine14('Máy Bắt Đầu Chạy');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 2) {\n                        ProjectFunction.ReportState_Machine14('Máy Dừng');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 3) {\n                        ProjectFunction.ReportState_Machine14('Máy Tắt');\n                    }\n                    if (parseInt(Variables.WordDisplay[2][IndexSet]) == 4) {\n                        ProjectFunction.ReportState_Machine14('Máy Reset');\n                    }\n                }\n            }\n        }\n\n        //Time BatDauCa 1\n        {\n            if (parseInt(Variables.BitDisplay[1][11]) == 0) {\n                ProjectVariables.Old_BatDauCa1 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][11]) == 1 && ProjectVariables.Old_BatDauCa1 == 0)) {\n                ProjectVariables.Old_BatDauCa1 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(1);\n                }\n            }\n        }\n        //Time BatDauCa 2\n        {\n            if (parseInt(Variables.BitDisplay[1][27]) == 0) {\n                ProjectVariables.Old_BatDauCa2 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][27]) == 1 && ProjectVariables.Old_BatDauCa2 == 0)) {\n                ProjectVariables.Old_BatDauCa2 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(2);\n                }\n            }\n        }\n        //Time BatDauCa 3\n        {\n            if (parseInt(Variables.BitDisplay[1][43]) == 0) {\n                ProjectVariables.Old_BatDauCa3 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][43]) == 1 && ProjectVariables.Old_BatDauCa3 == 0)) {\n                ProjectVariables.Old_BatDauCa3 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(3);\n                }\n            }\n        }\n        //Time BatDauCa 4\n        {\n            if (parseInt(Variables.BitDisplay[1][59]) == 0) {\n                ProjectVariables.Old_BatDauCa4 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][59]) == 1 && ProjectVariables.Old_BatDauCa4 == 0)) {\n                ProjectVariables.Old_BatDauCa4 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(4);\n                }\n            }\n        }\n        //Time BatDauCa 5\n        {\n            if (parseInt(Variables.BitDisplay[1][75]) == 0) {//75\n                ProjectVariables.Old_BatDauCa5 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][75]) == 1 && ProjectVariables.Old_BatDauCa5 == 0)) {\n                ProjectVariables.Old_BatDauCa5 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(5);\n                }\n            }\n        }\n        //Time BatDauCa 6\n        {\n            if (parseInt(Variables.BitDisplay[1][91]) == 0) {\n                ProjectVariables.Old_BatDauCa6 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][91]) == 1 && ProjectVariables.Old_BatDauCa6 == 0)) {\n                ProjectVariables.Old_BatDauCa6 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(6);\n                }\n            }\n        }\n        //Time BatDauCa 7\n        {\n            if (parseInt(Variables.BitDisplay[1][107]) == 0) {\n                ProjectVariables.Old_BatDauCa7 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][107]) == 1 && ProjectVariables.Old_BatDauCa7 == 0)) {\n                ProjectVariables.Old_BatDauCa7 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(7);\n                }\n            }\n        }\n        //Time BatDauCa 8\n        {\n            if (parseInt(Variables.BitDisplay[1][123]) == 0) {\n                ProjectVariables.Old_BatDauCa8 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][123]) == 1 && ProjectVariables.Old_BatDauCa8 == 0)) {\n                ProjectVariables.Old_BatDauCa8 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(8);\n                }\n            }\n        }\n        //Time BatDauCa 9\n        {\n            if (parseInt(Variables.BitDisplay[1][139]) == 0) {\n                ProjectVariables.Old_BatDauCa9 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][139]) == 1 && ProjectVariables.Old_BatDauCa9 == 0)) {\n                ProjectVariables.Old_BatDauCa9 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(9);\n                }\n            }\n        }\n        //Time BatDauCa 10\n        {\n            if (parseInt(Variables.BitDisplay[1][155]) == 0) {\n                ProjectVariables.Old_BatDauCa10 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[1][155]) == 1 && ProjectVariables.Old_BatDauCa10 == 0)) {\n                ProjectVariables.Old_BatDauCa10 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(10);\n                }\n            }\n        }\n        //Time BatDauCa 11\n        {\n            if (parseInt(Variables.BitDisplay[2][11]) == 0) {\n                ProjectVariables.Old_BatDauCa11 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][11]) == 1 && ProjectVariables.Old_BatDauCa11 == 0)) {\n                ProjectVariables.Old_BatDauCa11 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(11);\n                }\n            }\n        }\n        //Time BatDauCa 12\n        {\n            if (parseInt(Variables.BitDisplay[2][27]) == 0) {\n                ProjectVariables.Old_BatDauCa12 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][27]) == 1 && ProjectVariables.Old_BatDauCa12 == 0)) {\n                ProjectVariables.Old_BatDauCa12 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(12);\n                }\n            }\n        }\n        //Time BatDauCa 13\n        {\n            if (parseInt(Variables.BitDisplay[2][43]) == 0) {\n                ProjectVariables.Old_BatDauCa13 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][43]) == 1 && ProjectVariables.Old_BatDauCa13 == 0)) {\n                ProjectVariables.Old_BatDauCa13 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(13);\n                }\n            }\n        }\n        //Time BatDauCa 14\n        {\n            if (parseInt(Variables.BitDisplay[2][59]) == 0) {\n                ProjectVariables.Old_BatDauCa14 = 0;\n            }\n            if ((parseInt(Variables.BitDisplay[2][59]) == 1 && ProjectVariables.Old_BatDauCa14 == 0)) {\n                ProjectVariables.Old_BatDauCa14 = 1\n                if (parseInt(ProjectVariables.waitStart) == 0) {\n                    ProjectFunction.StampingMachineStartTime(14);\n                }\n            }\n        }\n\n        count = count + 1\n        if (count > 99999) { count = 0 }\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"Interval Scan...\" + count.toString() });\n    }, 300)\n} catch (error) {\n\n}\n//Excel Load File\nvar XLSX = global.get(\"xlsx\");\ntry {\n    setInterval(function () {\n        var workbook = XLSX.readFile('DataStampingMachine2.xlsx');\n        var sheet_name_list = workbook.SheetNames;\n\n        ProjectVariables.xlData_NhanVien = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);\n        ProjectVariables.xlData_SanPham = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[1]]);\n        if (JSON.stringify(ProjectVariables.Old_xlData_NhanVien) !== JSON.stringify(ProjectVariables.xlData_NhanVien)) {\n            ProjectVariables.Old_xlData_NhanVien = ProjectVariables.xlData_NhanVien\n            VariableSystem.IO.sockets.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien)\n            console.log('Have Change Excel1')\n            ProjectVariables.Old_Machine1_NV1 = null;\n            ProjectVariables.Old_Machine1_NV2 = null;\n            ProjectVariables.Old_Machine1_NV3 = null;\n            ProjectVariables.Old_Machine1_NV4 = null;\n            ProjectVariables.Old_Machine1_NV5 = null;\n            ProjectVariables.Old_Machine1_NV6 = null;\n            ProjectVariables.Old_Machine1_NV7 = null;\n            ProjectVariables.Old_Machine1_NV8 = null;\n            ProjectVariables.Old_Machine1_NV9 = null;\n            ProjectVariables.Old_Machine1_NV10 = null;\n            ProjectVariables.Old_Machine1_NV11 = null;\n\n            ProjectVariables.Old_Machine2_NV1 = null;\n            ProjectVariables.Old_Machine2_NV2 = null;\n            ProjectVariables.Old_Machine2_NV3 = null;\n            ProjectVariables.Old_Machine2_NV4 = null;\n            ProjectVariables.Old_Machine2_NV5 = null;\n            ProjectVariables.Old_Machine2_NV6 = null;\n            ProjectVariables.Old_Machine2_NV7 = null;\n            ProjectVariables.Old_Machine2_NV8 = null;\n            ProjectVariables.Old_Machine2_NV9 = null;\n            ProjectVariables.Old_Machine2_NV10 = null;\n            ProjectVariables.Old_Machine2_NV11 = null;\n\n            ProjectVariables.Old_Machine3_NV1 = null;\n            ProjectVariables.Old_Machine3_NV2 = null;\n            ProjectVariables.Old_Machine3_NV3 = null;\n            ProjectVariables.Old_Machine3_NV4 = null;\n            ProjectVariables.Old_Machine3_NV5 = null;\n            ProjectVariables.Old_Machine3_NV6 = null;\n            ProjectVariables.Old_Machine3_NV7 = null;\n            ProjectVariables.Old_Machine3_NV8 = null;\n            ProjectVariables.Old_Machine3_NV9 = null;\n            ProjectVariables.Old_Machine3_NV10 = null;\n            ProjectVariables.Old_Machine3_NV11 = null;\n\n            ProjectVariables.Old_Machine4_NV1 = null;\n            ProjectVariables.Old_Machine4_NV2 = null;\n            ProjectVariables.Old_Machine4_NV3 = null;\n            ProjectVariables.Old_Machine4_NV4 = null;\n            ProjectVariables.Old_Machine4_NV5 = null;\n            ProjectVariables.Old_Machine4_NV6 = null;\n            ProjectVariables.Old_Machine4_NV7 = null;\n            ProjectVariables.Old_Machine4_NV8 = null;\n            ProjectVariables.Old_Machine4_NV9 = null;\n            ProjectVariables.Old_Machine4_NV10 = null;\n            ProjectVariables.Old_Machine4_NV11 = null;\n\n            ProjectVariables.Old_Machine5_NV1 = null;\n            ProjectVariables.Old_Machine5_NV2 = null;\n            ProjectVariables.Old_Machine5_NV3 = null;\n            ProjectVariables.Old_Machine5_NV4 = null;\n            ProjectVariables.Old_Machine5_NV5 = null;\n            ProjectVariables.Old_Machine5_NV6 = null;\n            ProjectVariables.Old_Machine5_NV7 = null;\n            ProjectVariables.Old_Machine5_NV8 = null;\n            ProjectVariables.Old_Machine5_NV9 = null;\n            ProjectVariables.Old_Machine5_NV10 = null;\n            ProjectVariables.Old_Machine5_NV11 = null;\n\n            ProjectVariables.Old_Machine6_NV1 = null;\n            ProjectVariables.Old_Machine6_NV2 = null;\n            ProjectVariables.Old_Machine6_NV3 = null;\n            ProjectVariables.Old_Machine6_NV4 = null;\n            ProjectVariables.Old_Machine6_NV5 = null;\n            ProjectVariables.Old_Machine6_NV6 = null;\n            ProjectVariables.Old_Machine6_NV7 = null;\n            ProjectVariables.Old_Machine6_NV8 = null;\n            ProjectVariables.Old_Machine6_NV9 = null;\n            ProjectVariables.Old_Machine6_NV10 = null;\n            ProjectVariables.Old_Machine6_NV11 = null;\n\n            ProjectVariables.Old_Machine7_NV1 = null;\n            ProjectVariables.Old_Machine7_NV2 = null;\n            ProjectVariables.Old_Machine7_NV3 = null;\n            ProjectVariables.Old_Machine7_NV4 = null;\n            ProjectVariables.Old_Machine7_NV5 = null;\n            ProjectVariables.Old_Machine7_NV6 = null;\n            ProjectVariables.Old_Machine7_NV7 = null;\n            ProjectVariables.Old_Machine7_NV8 = null;\n            ProjectVariables.Old_Machine7_NV9 = null;\n            ProjectVariables.Old_Machine7_NV10 = null;\n            ProjectVariables.Old_Machine7_NV11 = null;\n\n            ProjectVariables.Old_Machine8_NV1 = null;\n            ProjectVariables.Old_Machine8_NV2 = null;\n            ProjectVariables.Old_Machine8_NV3 = null;\n            ProjectVariables.Old_Machine8_NV4 = null;\n            ProjectVariables.Old_Machine8_NV5 = null;\n            ProjectVariables.Old_Machine8_NV6 = null;\n            ProjectVariables.Old_Machine8_NV7 = null;\n            ProjectVariables.Old_Machine8_NV8 = null;\n            ProjectVariables.Old_Machine8_NV9 = null;\n            ProjectVariables.Old_Machine8_NV10 = null;\n            ProjectVariables.Old_Machine8_NV11 = null;\n\n            ProjectVariables.Old_Machine9_NV1 = null;\n            ProjectVariables.Old_Machine9_NV2 = null;\n            ProjectVariables.Old_Machine9_NV3 = null;\n            ProjectVariables.Old_Machine9_NV4 = null;\n            ProjectVariables.Old_Machine9_NV5 = null;\n            ProjectVariables.Old_Machine9_NV6 = null;\n            ProjectVariables.Old_Machine9_NV7 = null;\n            ProjectVariables.Old_Machine9_NV8 = null;\n            ProjectVariables.Old_Machine9_NV9 = null;\n            ProjectVariables.Old_Machine9_NV10 = null;\n            ProjectVariables.Old_Machine9_NV11 = null;\n\n            ProjectVariables.Old_Machine10_NV1 = null;\n            ProjectVariables.Old_Machine10_NV2 = null;\n            ProjectVariables.Old_Machine10_NV3 = null;\n            ProjectVariables.Old_Machine10_NV4 = null;\n            ProjectVariables.Old_Machine10_NV5 = null;\n            ProjectVariables.Old_Machine10_NV6 = null;\n            ProjectVariables.Old_Machine10_NV7 = null;\n            ProjectVariables.Old_Machine10_NV8 = null;\n            ProjectVariables.Old_Machine10_NV9 = null;\n            ProjectVariables.Old_Machine10_NV10 = null;\n            ProjectVariables.Old_Machine10_NV11 = null;\n\n            ProjectVariables.Old_Machine11_NV1 = null;\n            ProjectVariables.Old_Machine11_NV2 = null;\n            ProjectVariables.Old_Machine11_NV3 = null;\n            ProjectVariables.Old_Machine11_NV4 = null;\n            ProjectVariables.Old_Machine11_NV5 = null;\n            ProjectVariables.Old_Machine11_NV6 = null;\n            ProjectVariables.Old_Machine11_NV7 = null;\n            ProjectVariables.Old_Machine11_NV8 = null;\n            ProjectVariables.Old_Machine11_NV9 = null;\n            ProjectVariables.Old_Machine11_NV10 = null;\n            ProjectVariables.Old_Machine11_NV11 = null;\n\n            ProjectVariables.Old_Machine12_NV1 = null;\n            ProjectVariables.Old_Machine12_NV2 = null;\n            ProjectVariables.Old_Machine12_NV3 = null;\n            ProjectVariables.Old_Machine12_NV4 = null;\n            ProjectVariables.Old_Machine12_NV5 = null;\n            ProjectVariables.Old_Machine12_NV6 = null;\n            ProjectVariables.Old_Machine12_NV7 = null;\n            ProjectVariables.Old_Machine12_NV8 = null;\n            ProjectVariables.Old_Machine12_NV9 = null;\n            ProjectVariables.Old_Machine12_NV10 = null;\n            ProjectVariables.Old_Machine12_NV11 = null;\n\n            ProjectVariables.Old_Machine13_NV1 = null;\n            ProjectVariables.Old_Machine13_NV2 = null;\n            ProjectVariables.Old_Machine13_NV3 = null;\n            ProjectVariables.Old_Machine13_NV4 = null;\n            ProjectVariables.Old_Machine13_NV5 = null;\n            ProjectVariables.Old_Machine13_NV6 = null;\n            ProjectVariables.Old_Machine13_NV7 = null;\n            ProjectVariables.Old_Machine13_NV8 = null;\n            ProjectVariables.Old_Machine13_NV9 = null;\n            ProjectVariables.Old_Machine13_NV10 = null;\n            ProjectVariables.Old_Machine13_NV11 = null;\n\n            ProjectVariables.Old_Machine14_NV1 = null;\n            ProjectVariables.Old_Machine14_NV2 = null;\n            ProjectVariables.Old_Machine14_NV3 = null;\n            ProjectVariables.Old_Machine14_NV4 = null;\n            ProjectVariables.Old_Machine14_NV5 = null;\n            ProjectVariables.Old_Machine14_NV6 = null;\n            ProjectVariables.Old_Machine14_NV7 = null;\n            ProjectVariables.Old_Machine14_NV8 = null;\n            ProjectVariables.Old_Machine14_NV9 = null;\n            ProjectVariables.Old_Machine14_NV10 = null;\n            ProjectVariables.Old_Machine14_NV11 = null;\n\n           \n        }\n        if (JSON.stringify(ProjectVariables.Old_xlData_SanPham) !== JSON.stringify(ProjectVariables.xlData_SanPham)) {\n            ProjectVariables.Old_xlData_SanPham = ProjectVariables.xlData_SanPham\n            VariableSystem.IO.sockets.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham)\n            console.log('Have Change Excel2')\n            ProjectVariables.Old_Machine1_SP = null;\n            ProjectVariables.Old_Machine2_SP = null;\n            ProjectVariables.Old_Machine3_SP = null;\n            ProjectVariables.Old_Machine4_SP = null;\n            ProjectVariables.Old_Machine5_SP = null;\n            ProjectVariables.Old_Machine6_SP = null;\n            ProjectVariables.Old_Machine7_SP = null;\n            ProjectVariables.Old_Machine8_SP = null;\n            ProjectVariables.Old_Machine9_SP = null;\n            ProjectVariables.Old_Machine10_SP = null;\n            ProjectVariables.Old_Machine11_SP = null;\n            ProjectVariables.Old_Machine12_SP = null;\n            ProjectVariables.Old_Machine13_SP = null;\n            ProjectVariables.Old_Machine14_SP = null;\n        }\n    }, 2000);\n} catch (error) {\n    SubFunction.setLogServer(JSON.stringify(error))\n}\n\nVariableSystem.IO.removeAllListeners('connection')\n\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Have Client Connected \" + socket.id))\n\n    socket.emit('UpdateElement', Variables.resultElement);\n    socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n    socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n    socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n    socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n    socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n    socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n    socket.emit('UpdateTextField', Variables.resultTextField);\n    socket.emit('UpdateTextFieldInput', Variables.resultTextFieldInput);\n\n    socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n    socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n        socket.disconnect()\n    });\n    socket.on('initial', function () {\n        socket.emit('UpdateElement', Variables.resultElement);\n        socket.emit('UpdateBitAdjust', Variables.resultBitAdjust);\n        socket.emit('UpdateBitDisplay', Variables.resultBitDisplay);\n        socket.emit('UpdateWordAdjust', Variables.resultWordAdjust);\n        socket.emit('UpdateWordDisplay', Variables.resultWordDisplay);\n        socket.emit('UpdateDWordAdjust', Variables.resultDWordAdjust);\n        socket.emit('UpdateDWordDisplay', Variables.resultDWordDisplay);\n        socket.emit('UpdateTextField', Variables.resultTextField);\n\n        socket.emit('DataExcel_NhanVien', ProjectVariables.xlData_NhanVien);\n        socket.emit('DataExcel_SanPham', ProjectVariables.xlData_SanPham);\n    })\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(data);\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            if (data.tag === 'ManuReportProductivity1') {\n                ProjectFunction.ReportProductivity_Machine1();\n            }\n            if (data.tag === 'ManuReportProductivity2') {\n                ProjectFunction.ReportProductivity_Machine2();\n            }\n            if (data.tag === 'ManuReportProductivity3') {\n                ProjectFunction.ReportProductivity_Machine3();\n            }\n            if (data.tag === 'ManuReportProductivity4') {\n                ProjectFunction.ReportProductivity_Machine4();\n            }\n            if (data.tag === 'ManuReportProductivity5') {\n                ProjectFunction.ReportProductivity_Machine5();\n            }\n            if (data.tag === 'ManuReportProductivity6') {\n                ProjectFunction.ReportProductivity_Machine6();\n            }\n            if (data.tag === 'ManuReportProductivity7') {\n                ProjectFunction.ReportProductivity_Machine7();\n            }\n            if (data.tag === 'ManuReportProductivity8') {\n                ProjectFunction.ReportProductivity_Machine8();\n            }\n            if (data.tag === 'ManuReportProductivity9') {\n                ProjectFunction.ReportProductivity_Machine9();\n            }\n            if (data.tag === 'ManuReportProductivity10') {\n                ProjectFunction.ReportProductivity_Machine10();\n            }\n            if (data.tag === 'ManuReportProductivity11') {\n                ProjectFunction.ReportProductivity_Machine11();\n            }\n            if (data.tag === 'ManuReportProductivity12') {\n                ProjectFunction.ReportProductivity_Machine12();\n            }\n            if (data.tag === 'ManuReportProductivity13') {\n                ProjectFunction.ReportProductivity_Machine13();\n            }\n            if (data.tag === 'ManuReportProductivity14') {\n                ProjectFunction.ReportProductivity_Machine14();\n            }\n            if (data.tag === 'ManuStartTime1') {\n                ProjectFunction.StampingMachineStartTime(1);\n            }\n        }\n        if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n            console.log(data)\n            if (VariableSystem.PLC_WriteUnSafe[parseInt(data.idDevice)]) {\n                if (parseInt(data.tag) / 16 <= parseInt(VariableSystem.PLC_LengthOfWordBitAdjust[parseInt(data.idDevice)])) {\n                    let mask = 1 << (parseInt(data.tag) % 16); // gets the 6th bit\n                    let numberWordOfBitAdjust = parseInt(VariableSystem.PLC_WordStartBitAdjust[parseInt(data.idDevice)]) + parseInt(parseInt(data.tag) / 16)\n                    let currentWordOfBitAdjust = Variables.WordBitAdjust[1][parseInt(parseInt(data.tag) / 16)]\n                    currentWordOfBitAdjust ^= mask;\n                    VariableSystem.COMMUNICATION_PLC_OMRON[1].write('D' + numberWordOfBitAdjust, [currentWordOfBitAdjust]);\n                }\n\n                if (parseInt(data.enableLogData)) {\n                    SubFunction.saveLogData({\n                        parent: 'logData',\n                        idDevice: data.idDevice,\n                        typeObject: 'BitAdjust',\n                        tag: data.tag,\n                        previousValue: 'old',\n                        newValue: 'new',\n                        action: 'Toggle',\n                        nameObject: '',\n                        user: data.currentUser\n                    })\n                }\n            }\n        }\n    });\n\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n// console.log('CLOSE NODE RED')\nvar VariableSystem = global.get(\"VariableSystem\");\nVariableSystem.IO.sockets.removeAllListeners()",
        "libs": [],
        "x": 830,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "e7447117dcfe9551",
        "type": "Config_Web Begin",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "x": 500,
        "y": 1920,
        "wires": [
            [
                "7f3065c91f8a1248"
            ]
        ]
    },
    {
        "id": "7f3065c91f8a1248",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "title": "SCADA PAGE",
        "x": 540,
        "y": 1980,
        "wires": [
            [
                "a32252b607e19adf"
            ]
        ]
    },
    {
        "id": "a32252b607e19adf",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Giao Diện Điều Khiển",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "43",
        "header_hide": "0",
        "x": 780,
        "y": 1980,
        "wires": [
            [
                "7599a2e9e342a501"
            ]
        ]
    },
    {
        "id": "18b42906e6bfb8d2",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Giao Diện Điều Khiển ZOOM",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "80",
        "x": 1360,
        "y": 1980,
        "wires": [
            [
                "c3d6e681500d393a"
            ]
        ]
    },
    {
        "id": "300e2d5a690f7157",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 1",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_1",
        "scale": "100",
        "x": 670,
        "y": 2040,
        "wires": [
            [
                "71e1950c920277a5"
            ]
        ]
    },
    {
        "id": "71e1950c920277a5",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 2",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_2",
        "scale": "100",
        "x": 830,
        "y": 2040,
        "wires": [
            [
                "c656b8bb3f0a23d3"
            ]
        ]
    },
    {
        "id": "c656b8bb3f0a23d3",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 3",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_3",
        "scale": "100",
        "x": 990,
        "y": 2040,
        "wires": [
            [
                "8885bc604eb61deb"
            ]
        ]
    },
    {
        "id": "8885bc604eb61deb",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 4",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_4",
        "scale": "100",
        "x": 1150,
        "y": 2040,
        "wires": [
            [
                "3fee2622469fce23"
            ]
        ]
    },
    {
        "id": "3fee2622469fce23",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 5",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_5",
        "scale": "100",
        "x": 1310,
        "y": 2040,
        "wires": [
            [
                "6613e6dce65768a2"
            ]
        ]
    },
    {
        "id": "6613e6dce65768a2",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 6",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_6",
        "scale": "100",
        "x": 670,
        "y": 2100,
        "wires": [
            [
                "4e372c1bc563f3ba"
            ]
        ]
    },
    {
        "id": "4e372c1bc563f3ba",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 7",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_7",
        "scale": "100",
        "x": 830,
        "y": 2100,
        "wires": [
            [
                "f4fd3e5b2863cad9"
            ]
        ]
    },
    {
        "id": "f4fd3e5b2863cad9",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 8",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_8",
        "scale": "100",
        "x": 990,
        "y": 2100,
        "wires": [
            [
                "6839d6d8290633ff"
            ]
        ]
    },
    {
        "id": "6839d6d8290633ff",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 9",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_9",
        "scale": "100",
        "x": 1150,
        "y": 2100,
        "wires": [
            [
                "b0a20bcb28d34811"
            ]
        ]
    },
    {
        "id": "b0a20bcb28d34811",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 10",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_10",
        "scale": "100",
        "x": 1320,
        "y": 2100,
        "wires": [
            [
                "4bf8806fbec9bd4d"
            ]
        ]
    },
    {
        "id": "54e7b165a6b77472",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "title": "BÁO CÁO",
        "x": 530,
        "y": 2300,
        "wires": [
            [
                "43427761cf6bcbe9"
            ]
        ]
    },
    {
        "id": "c3d6e681500d393a",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "title": "MÁY",
        "x": 510,
        "y": 2040,
        "wires": [
            [
                "300e2d5a690f7157"
            ]
        ]
    },
    {
        "id": "43427761cf6bcbe9",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Báo Cáo Chi Tiết",
        "url": "/scada/ReportProjectStampingMachine2ChiTiet",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 770,
        "y": 2300,
        "wires": [
            [
                "2eaba68b90d32f84"
            ]
        ]
    },
    {
        "id": "2eaba68b90d32f84",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Báo Cáo Sản Lượng",
        "url": "/scada/ReportProjectStampingMachine2Productivity",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1060,
        "y": 2300,
        "wires": [
            [
                "bcaef75fbee5e73b"
            ]
        ]
    },
    {
        "id": "bcaef75fbee5e73b",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Báo Cáo Trạng Thái",
        "url": "/scada/ReportProjectStampingMachine2TrangThai",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 1360,
        "y": 2300,
        "wires": [
            [
                "33eb70d11ef7150a"
            ]
        ]
    },
    {
        "id": "fcad91a479f61afe",
        "type": "Config_Web Title",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "title": "USER MANAGER",
        "x": 550,
        "y": 2400,
        "wires": [
            [
                "149b1e79eb9c6232"
            ]
        ]
    },
    {
        "id": "149b1e79eb9c6232",
        "type": "Config_Web Page_Call",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "",
        "name_api": "",
        "x": 800,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "33eb70d11ef7150a",
        "type": "Config_Web End",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "port": "9101",
        "x": 490,
        "y": 2480,
        "wires": [
            [
                "b65c4b8ad782a8ba"
            ]
        ]
    },
    {
        "id": "b65c4b8ad782a8ba",
        "type": "file",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "",
        "filename": "../Run_React_exe/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "b8d17de22c6c2f70",
        "type": "file",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "9b7c9a0da4894439",
        "type": "debug",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2540,
        "wires": []
    },
    {
        "id": "2f61cc2975a1c767",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1920,
        "wires": [
            [
                "e7447117dcfe9551"
            ]
        ]
    },
    {
        "id": "34d6d8d0bf3050f9",
        "type": "plc_omron",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "PLC OMRON STAMPING MACHINE 11,12,13,14",
        "host": "192.168.2.215",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "800",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "70",
        "PLC_WordStartBitDisplay": "70",
        "PLC_LengthOfWordBitDisplay": "20",
        "PLC_WordStartBitAdjust": "90",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "100",
        "PLC_LengthOfWordWordDisplay": "500",
        "PLC_WordStartWordAdjust": "600",
        "PLC_LengthOfWordWordAdjust": "50",
        "PLC_WordStartDWordDisplay": "650",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "700",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "5",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": "15",
        "x": 970,
        "y": 1820,
        "wires": [
            [
                "1b9f4bf5f41bae40"
            ]
        ]
    },
    {
        "id": "4bf8806fbec9bd4d",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 11",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_11",
        "scale": "100",
        "x": 660,
        "y": 2160,
        "wires": [
            [
                "09f9d336d12ce721"
            ]
        ]
    },
    {
        "id": "40c8dda31c176ee1",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 13",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_13",
        "scale": "100",
        "x": 1020,
        "y": 2160,
        "wires": [
            [
                "e0eb6bcf85ad4f3b"
            ]
        ]
    },
    {
        "id": "e0eb6bcf85ad4f3b",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Máy 14",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "960",
        "backgroundColor": "blue",
        "backgroundImage": "PnlSynopticStamping2.png",
        "idPage": "Stamping2_14",
        "scale": "100",
        "x": 1200,
        "y": 2160,
        "wires": [
            [
                "54e7b165a6b77472"
            ]
        ]
    },
    {
        "id": "7599a2e9e342a501",
        "type": "Config_Web Page",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name_page": "Giao Diện Điều Khiển FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "2160",
        "height": "1040",
        "backgroundColor": "blue",
        "backgroundImage": "StampingMachine.png",
        "idPage": "Scada",
        "scale": "43",
        "header_hide": "1",
        "x": 1060,
        "y": 1980,
        "wires": [
            [
                "18b42906e6bfb8d2"
            ]
        ]
    },
    {
        "id": "1b9f4bf5f41bae40",
        "type": "debug",
        "z": "eb4fd77fac3c21b7",
        "g": "591ab93028b7338c",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1760,
        "wires": []
    },
    {
        "id": "784f980b6fbea451",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "dfe6b837d729ac09",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1500,
        "wires": [
            [
                "edfd373b67a659bc"
            ]
        ]
    },
    {
        "id": "edfd373b67a659bc",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "dfe6b837d729ac09",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff=1\n// global.set('Variable.turnOff',0)\nmsg.payload='TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1500,
        "wires": [
            [
                "1ad5dcbc4a190e01"
            ]
        ]
    },
    {
        "id": "1ad5dcbc4a190e01",
        "type": "debug",
        "z": "eb4fd77fac3c21b7",
        "g": "dfe6b837d729ac09",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1500,
        "wires": []
    },
    {
        "id": "1a12f6410d722dcc",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "dfe6b837d729ac09",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "2b55f7e434e163d1"
            ]
        ]
    },
    {
        "id": "2b55f7e434e163d1",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "dfe6b837d729ac09",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })    \n},1000)",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "48fb6ecda0e9cdcf",
        "type": "function",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "function 23",
        "func": "var ProjectVariables = global.get(\"ProjectVariable\");\nvar Variables = global.get(\"Variable\");\n\nVariables.WordDisplay[1][359] = 2\nProjectVariables.oldAmountProduct8 = 2\n\nVariables.ListString[1][77] = 1\nVariables.WordDisplay[1][380] = 1\nVariables.WordDisplay[1][381] = 1\nVariables.ListString[1][71] = 1\nVariables.WordDisplay[1][382] = 1\nVariables.ListString[1][72] = 1\nVariables.WordDisplay[1][383] = 1\nVariables.ListString[1][73] = 1\nVariables.WordDisplay[1][384] = 1\nVariables.ListString[1][74] = 1\nVariables.WordDisplay[1][385] = 1\nVariables.ListString[1][75] = 1\n\nVariables.ListString[1][70] = '123'\nVariables.WordDisplay[1][365] = 1\nVariables.WordDisplay[1][367] = 1\nVariables.WordDisplay[1][371] = 222\nVariables.WordDisplay[1][373] = 1\nVariables.WordDisplay[1][369]=1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "65e9258a3c0fa3ed",
        "type": "inject",
        "z": "eb4fd77fac3c21b7",
        "g": "44d6f1b348a7f04b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "48fb6ecda0e9cdcf"
            ]
        ]
    },
    {
        "id": "5f0dafdaeab8c6f9",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2000,
        "wires": [
            [
                "5056456e0cb1b898"
            ]
        ]
    },
    {
        "id": "5056456e0cb1b898",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "function 18",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nflow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n    _id: Variables.ListString[0][19],\n    User: 'Auto',\n    LevelUser: 0,\n}, (result, err) => {\n    if (err) {\n        node.warn(err)\n    }\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2000,
        "wires": [
            [
                "d3edb76793c90ec4"
            ]
        ]
    },
    {
        "id": "d3edb76793c90ec4",
        "type": "debug",
        "z": "29edf33f7ef9dac1",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 2000,
        "wires": []
    },
    {
        "id": "051465e0b065d90a",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"150\"},{\"dataField\":\"Location\",\"capture\":\"Location\",\"width\":\"auto\"},{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"auto\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"auto\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 2480,
        "wires": [
            [
                "4ff39fab828f41e9"
            ]
        ]
    },
    {
        "id": "4ff39fab828f41e9",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "function 19",
        "func": "// let b = new Date(Date.parse(1690095087833)).toLocaleString('en-GB')\nlet b = new Date(1690095087833).toLocaleString('en-GB')\nnode.warn(b);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2480,
        "wires": [
            [
                "edd710122978c0ab"
            ]
        ]
    },
    {
        "id": "edd710122978c0ab",
        "type": "debug",
        "z": "29edf33f7ef9dac1",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 2480,
        "wires": []
    },
    {
        "id": "65486257825dd9dd",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "SubFunc Get Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStore = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store', (err, rows) => {\n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb({\n                        check: global.get(\"check_store\"),\n                        data:rows\n                    })\n                }\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 280,
        "wires": []
    },
    {
        "id": "48c814a777836571",
        "type": "link in",
        "z": "29edf33f7ef9dac1",
        "name": "link in 17",
        "links": [
            "355ae0dc15e4ea9b",
            "b7134d9cc532d6f7"
        ],
        "x": 2565,
        "y": 340,
        "wires": [
            [
                "65486257825dd9dd",
                "c07a891d8f631f3b",
                "01cf2ec9b0f3a044",
                "ccb45e2b5ac7596b"
            ]
        ]
    },
    {
        "id": "c07a891d8f631f3b",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "SubFunc Insert Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'LotId text UNIQUE NOT NULL,'\n                tempText = tempText + 'Product text NOT NULL,'\n                tempText = tempText + 'Quantity int NOT NULL,'\n                tempText = tempText + 'QuantityOrdering int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Location text,'\n                tempText = tempText + 'State text,'\n                tempText = tempText + 'Package text NOT NULL,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'TimeCreate Date,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store(' + newTempText + ')', (err) => {\n                    if (err) {\n                        cb(null, err)\n                    } else {\n                        let command = `INSERT INTO Store(_id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${LotId}',\n                            '${Product }',\n                            '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n                            '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n                            '${Unit ? Unit : ''}',\n                            '${Location ? Location : ''}',\n                            '${'STOCK'}',\n                            '${Package}',\n                            '${Remark ? Remark : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${new Date()}'\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                            }\n                        });\n                    }\n\n                })\n            })\n\n            // //Save Report\n            // if (SaveReport) {\n            //     VariableSystem.LocalDB.serialize(() => {\n            //         let tempText = ''\n            //         tempText = tempText + '_id text PRIMARY KEY,'\n            //         tempText = tempText + 'id text,'\n            //         tempText = tempText + 'LotId text,'\n            //         tempText = tempText + 'Product text,'\n            //         tempText = tempText + 'Quantity int,'\n            //         tempText = tempText + 'QuantityOrdering int,'\n            //         tempText = tempText + 'Unit text,'\n            //         tempText = tempText + 'Location text,'\n            //         tempText = tempText + 'State text,'\n            //         tempText = tempText + 'Package text,'\n            //         tempText = tempText + 'Remark text,'\n            //         tempText = tempText + 'Weight int,'\n            //         tempText = tempText + 'TimeCreate Date,'\n            //         tempText = tempText + 'User text,'\n            //         tempText = tempText + 'LevelUser text,'\n            //         tempText = tempText + 'TypeReport text,'\n\n            //         let newTempText = tempText.substring(0, tempText.length - 1);\n            //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n            //             if (err) {\n            //                 cb(null, err)\n            //             } else {\n            //                 let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n            //                 '${'a' + Math.random().toString(36)}',\n            //                 '_',\n            //                 '${LotId ? LotId : ''}',\n            //                 '${Product ? Product : ''}',\n            //                 '${parseInt(Quantity) ? parseInt(Quantity) : 0}',\n            //                 '${parseInt(QuantityOrdering) ? parseInt(QuantityOrdering) : 0}',\n            //                 '${Unit ? Unit : ''}',\n            //                 '${Location ? Location : ''}',\n            //                 '${State ? State : ''}',\n            //                 '${Package ? Package : ''}',\n            //                 '${Remark ? Remark : ''}',\n            //                 '${parseInt(Weight) ? parseInt(Weight) : 0}',\n            //                 '${Date.now()}',\n            //                 '${User ? User : '_'}',\n            //                 '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n            //                 'INSERT'\n            //                 )`\n            //                 VariableSystem.LocalDB.run(command, (err) => {\n            //                     if (err) {\n            //                         cb(null, err)\n            //                     } else {\n            //                         cb('success')\n            //                     }\n            //                 });\n            //             }\n\n            //         })\n            //     })\n            // }\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 320,
        "wires": []
    },
    {
        "id": "01cf2ec9b0f3a044",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "SubFunc Delete Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\n\nglobal_functions.DeleteStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id !== undefined) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            //Save Report\n                            if (SaveReport) {\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let tempText = ''\n                                    tempText = tempText + '_id text PRIMARY KEY,'\n                                    tempText = tempText + 'id text,'\n                                    tempText = tempText + 'LotId text,'\n                                    tempText = tempText + 'Product text,'\n                                    tempText = tempText + 'Quantity int,'\n                                    tempText = tempText + 'QuantityOrdering int,'\n                                    tempText = tempText + 'Unit text,'\n                                    tempText = tempText + 'Location text,'\n                                    tempText = tempText + 'State text,'\n                                    tempText = tempText + 'Package text,'\n                                    tempText = tempText + 'Remark text,'\n                                    tempText = tempText + 'Weight int,'\n                                    tempText = tempText + 'TimeCreate Date,'\n                                    tempText = tempText + 'User text,'\n                                    tempText = tempText + 'LevelUser text,'\n                                    tempText = tempText + 'TypeReport text,'\n\n                                    let newTempText = tempText.substring(0, tempText.length - 1);\n                                    let element = rows[0]\n                                    VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                        if (err) {\n                                            node.warn(err);\n                                            cb(null, err)\n                                        } else {\n                                            cb('success')\n                                            let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${_id}',\n                            '${element.LotId ? element.LotId : ''}',\n                            '${element.Product ? element.Product : ''}',\n                            '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                            '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                            '${element.Unit ? element.Unit : ''}',\n                            '${element.Location ? element.Location : ''}',\n                            '${element.State ? element.State : ''}',\n                            '${element.Package ? element.Package : ''}',\n                            '${element.Remark ? element.Remark : ''}',\n                            '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                            '${Date.now()}',\n                            '${User ? User : '_'}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            'DELETE'\n                            )`\n                                            VariableSystem.LocalDB.run(command, (err) => {\n                                                if (err) {\n                                                    node.warn('Update Report Err: ' + err);\n                                                }\n                                            });\n                                        }\n\n                                    })\n                                })\n                            }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 360,
        "wires": []
    },
    {
        "id": "ccb45e2b5ac7596b",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "SubFunc Update Store",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.UpdateStore = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let LotId = data.LotId\n        let Product = data.Product\n        let Quantity = data.Quantity\n        let QuantityOrdering = data.QuantityOrdering\n        let Unit = data.Unit\n        let Location = data.Location\n        let State = data.State\n        let Package = data.Package\n        let Remark = data.Remark\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n\n\n        if (_id) {\n            try {\n                let newValue = '';\n                if (typeof (LotId) !== 'undefined') { newValue = newValue + 'LotId=\"' + LotId + '\",' }\n                if (typeof (Product) !== 'undefined') { newValue = newValue + 'Product=\"' + Product + '\",' }\n                if (typeof (Quantity) !== 'undefined') { newValue = newValue + 'Quantity=' + Quantity + ',' }\n                if (typeof (QuantityOrdering) !== 'undefined') { newValue = newValue + 'QuantityOrdering=' + QuantityOrdering + ',' }\n                if (typeof (Unit) !== 'undefined') { newValue = newValue + 'Unit=\"' + Unit + '\",' }\n                if (typeof (Location) !== 'undefined') { newValue = newValue + 'Location=\"' + Location + '\",' }\n                if (typeof (State) !== 'undefined') { newValue = newValue + 'State=\"' + State + '\",' }\n                if (typeof (Package) !== 'undefined') { newValue = newValue + 'Package=\"' + Package + '\",' }\n                if (typeof (Remark) !== 'undefined') { newValue = newValue + 'Remark=\"' + Remark + '\",' }\n                if (typeof (Weight) !== 'undefined') { newValue = newValue + 'Weight=\"' + Weight + '\",' }\n\n                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                VariableSystem.LocalDB.serialize(() => {\n                    let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + _id + '\"'\n                    VariableSystem.LocalDB.run(temp, function (err) {\n                        if (err) {\n                            cb(null, err)\n                        } else {\n                            cb('success')\n                            VariableSystem.LocalDB.all('SELECT * FROM Store' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                                if (err) {\n                                    cb(null, err)\n                                } else {\n                                    //Save Report\n                                    if (SaveReport) {\n                                        VariableSystem.LocalDB.serialize(() => {\n                                            let tempText = ''\n                                            tempText = tempText + '_id text PRIMARY KEY,'\n                                            tempText = tempText + 'id text,'\n                                            tempText = tempText + 'LotId text,'\n                                            tempText = tempText + 'Product text,'\n                                            tempText = tempText + 'Quantity int,'\n                                            tempText = tempText + 'QuantityOrdering int,'\n                                            tempText = tempText + 'Unit text,'\n                                            tempText = tempText + 'Location text,'\n                                            tempText = tempText + 'State text,'\n                                            tempText = tempText + 'Package text,'\n                                            tempText = tempText + 'Remark text,'\n                                            tempText = tempText + 'Weight int,'\n                                            tempText = tempText + 'TimeCreate Date,'\n                                            tempText = tempText + 'User text,'\n                                            tempText = tempText + 'LevelUser text,'\n                                            tempText = tempText + 'TypeReport text,'\n\n                                            let newTempText = tempText.substring(0, tempText.length - 1);\n                                            let element = rows[0]\n                                            VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Report(' + newTempText + ')', (err) => {\n                                                if (err) {\n                                                    cb(null, err)\n                                                } else {\n                                                    let command = `INSERT INTO Store_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                                                    '${'a' + Math.random().toString(36)}',\n                                                    '${_id}',\n                                                    '${element.LotId ? element.LotId : ''}',\n                                                    '${element.Product ? element.Product : ''}',\n                                                    '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                                                    '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                                                    '${element.Unit ? element.Unit : ''}',\n                                                    '${element.Location ? element.Location : ''}',\n                                                    '${element.State ? element.State : ''}',\n                                                    '${element.Package ? element.Package : ''}',\n                                                    '${element.Remark ? element.Remark : ''}',\n                                                    '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                                                    '${Date.now()}',\n                                                    '${User ? User : '_'}',\n                                                    '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                                    'UPDATE'\n                                                    )`\n                                                    VariableSystem.LocalDB.run(command, (err) => {\n                                                        if (err) {\n                                                            node.warn('Update Report Err: ' + err);\n                                                        }\n                                                    });\n                                                }\n\n                                            })\n                                        })\n                                    }\n                                }\n                            })\n                        }\n\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 400,
        "wires": []
    },
    {
        "id": "54723bcbfda4d3bf",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "PLC",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variable = global.get(\"Variable\");\n\nif (Variable.ListString[0][17] != Variable.ListString[1][5].replace(/\\s+/g, '')) {\n    var byteArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var str = Variable.ListString[0][17]\n\n    var buffer = new Buffer(str, 'utf8');\n    for (let i = 0; i < buffer.length; i++) {\n        if (i < 40) byteArray[i] = buffer[i];\n    }\n\n    const intArray = [];\n    for (let i = 0; i < byteArray.length; i += 2) {\n        const byte1 = byteArray[i];\n        const byte2 = byteArray[i + 1];\n        const combinedInt = (byte2 << 8) | byte1;\n        intArray.push(combinedInt);\n    }\n\n    VariableSystem.COMMUNICATION_PLC_OMRON[1].write('D2100', intArray);\n    msg.payload = 'Write Data'\n    node.send(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "9a4faba32088c072",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "Auto Delete",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nif (global.get(\"timer_delete_data\")>0){\n    node.warn(\"my warning OKOKOK\");\n    global.set(\"timer_delete_data\", global.get(\"timer_delete_data\")-1)\n}\n\nif (Variables.ListString[0] && Variables.ListString[1]) {\n\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 4) {\n        global.set(\"timer_delete_data\", 5)\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    node.send(msg);\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n\n    //ThatBai\n    //ThanhCong\n    if (Variables.ListString[1][2].replace(/\\s+/g, '') == Variables.ListString[0][17].replace(/\\s+/g, '') && Variables.ListString[1][2].replace(/\\s+/g, '') != '---' && Variables.WordAdjust[1][2] == 5) {\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                    if (err) {\n                        node.warn(err)\n                    } else {\n                        if (rows.length > 0) {\n                            flow.get(\"global_functions\").UpdateStore({\n                                _id: Variables.ListString[0][14],\n                                State: 'STOCK',\n                                Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                            }, (result, err) => {\n                                if (err) {\n                                    node.warn(err)\n                                } else {\n                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                    flow.get(\"global_functions\").GetStore((result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                            flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                _id: Variables.ListString[0][19],\n                                                User: 'Auto',\n                                                LevelUser: 0,\n                                            }, (result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Delivery_Warehouse', result)\n                                                        }\n                                                    })\n                                                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                    }\n\n                })\n            })\n        } catch (err) {\n            node.warn(err)\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "edc5de9ad9858eeb",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Prepare_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2300,
        "wires": [
            [
                "d73fc31a5344fce3"
            ]
        ]
    },
    {
        "id": "e58a41e4a18444a0",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "name": "GET REPORT PREPARE",
        "url": "/report_prepare_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2300,
        "wires": [
            [
                "edc5de9ad9858eeb"
            ]
        ]
    },
    {
        "id": "d73fc31a5344fce3",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 560,
        "y": 2300,
        "wires": []
    },
    {
        "id": "fa2061cf76b692a2",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "Interval 2 s",
        "func": "msg.payload=''\nsetInterval(()=>{\n    node.send(msg);\n},2000)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2100,
        "wires": [
            [
                "54723bcbfda4d3bf",
                "644801083b51f0a9",
                "362af9907fff85ef"
            ]
        ]
    },
    {
        "id": "091bfe752a139601",
        "type": "link in",
        "z": "29edf33f7ef9dac1",
        "name": "link in 18",
        "links": [
            "355ae0dc15e4ea9b",
            "b7134d9cc532d6f7"
        ],
        "x": 85,
        "y": 2100,
        "wires": [
            [
                "fa2061cf76b692a2"
            ]
        ]
    },
    {
        "id": "644801083b51f0a9",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "Update Data Control Robot",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Delivery\" ORDER BY Order_Item ASC', (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                if (rows.length > 0) {\n                    Variables.ListString[0][14] = rows[0].id;\n                    Variables.ListString[0][15] = rows[0].LotId;\n                    Variables.ListString[0][16] = rows[0].Product;\n                    Variables.ListString[0][17] = rows[0].Destination;\n                    Variables.ListString[0][18] = rows[0].Quantity;\n                    Variables.ListString[0][19] = rows[0]._id;\n                    Variables.ListString[0][20] = rows[0].User;\n                    node.send(msg);\n                } else {\n                    Variables.ListString[0][14] = '---';\n                    Variables.ListString[0][15] = '---';\n                    Variables.ListString[0][16] = '---';\n                    Variables.ListString[0][17] = '---';\n                    Variables.ListString[0][18] = '---';\n                    Variables.ListString[0][20] = '---';\n                }\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2100,
        "wires": [
            [
                "9a4faba32088c072"
            ]
        ]
    },
    {
        "id": "362af9907fff85ef",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "147280e57a5418dd",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "g": "d1c9e5485baaea1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 60,
        "wires": [
            [
                "c9cb3b80e7e5525f"
            ]
        ]
    },
    {
        "id": "c9cb3b80e7e5525f",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "d1c9e5485baaea1f",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 60,
        "wires": [
            [
                "d371d7e6bf025ed9"
            ]
        ]
    },
    {
        "id": "d371d7e6bf025ed9",
        "type": "debug",
        "z": "29edf33f7ef9dac1",
        "g": "d1c9e5485baaea1f",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "c1f993d7aed5bec2",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "g": "d1c9e5485baaea1f",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "3ee0491334e5f834"
            ]
        ]
    },
    {
        "id": "3ee0491334e5f834",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "d1c9e5485baaea1f",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb6957b22e2a94a7",
        "type": "Config_Web Begin",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "x": 300,
        "y": 1220,
        "wires": [
            [
                "5289b68116b8b3f2"
            ]
        ]
    },
    {
        "id": "f6f8cb4430a237da",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "bb6957b22e2a94a7",
                "3a6128ad576f3d2d",
                "e27fa5bc30c85e5e"
            ]
        ]
    },
    {
        "id": "e27fa5bc30c85e5e",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/MobileRobot_ATC.db\"\nnode.warn(JSON.stringify(Sql_link))\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n// const SocketIO_ProjectOmron = global.get(\"SocketIO_ProjectOmron\");\n// SocketIO_ProjectOmron()\n\nvar global_functions = {};\n\nflow.set(\"global_functions\", global_functions);\nglobal.set(\"check_store\", 1);\nglobal.set(\"check_store_line_select\", 1);\nglobal.set(\"check_store_warehouse_prepare\", 1);\nglobal.set(\"check_store_warehouse_delivery\", 1);\nglobal.set(\"timer_delete_data\", 0);\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "b7134d9cc532d6f7",
                "6f2a67694464ebf4"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "3a6128ad576f3d2d",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "PROCESS CLIENT",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariables.Percent[1] = new Array(20).fill(0);\nVariables.BitAdjust[1] = new Array(20).fill(0);\nVariables.BitDisplay[1] = new Array(20).fill(0);\nVariables.WordAdjust[1] = new Array(20).fill(0);\nVariables.WordDisplay[1] = new Array(20).fill(0);\nVariables.DWordAdjust[1] = new Array(20).fill(0);\nVariables.DWordDisplay[1] = new Array(20).fill(0);\nVariables.ListString[1] = new Array(20).fill('---');\nVariables.TextField[1] = new Array(20).fill('---');\nVariables.TextFieldInput[1] = new Array(10).fill(0);\n\nVariables.ListString[0][11] = '40 Kg'\n\nasync function DeleteStorePrepareWarehouse(id) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").DeleteStorePrepareWarehouse(id, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve('Delete Success');\n            }\n        })\n    });\n}\nasync function InsertStorePrepareWarehouse(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            if (err) {\n                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\n\n\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        console.log(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        //BitAdjust\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.idDevice)) {\n            if (data.idDevice == 'goal') {\n                Variables.ListString[0][5] = data.tag;\n                if (Variables.BitAdjust[0][1]){\n                    VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write('goto ' + data.tag + '\\r\\n')\n                }\n            }\n            if (data.idDevice == 'line' && data.tag == 'confirm') {\n                if (parseInt(data.levelUser) > 0) {\n                    if (Variables.ListString[0][1] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Sản Phẩm' })\n                    } else if (Variables.ListString[0][5] == '---') {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Chọn Vị Trí Giao' })\n                    } else if (parseInt(Variables.WordAdjust[0][1]) == 0) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Chưa Nhập Số Lượng' })\n                    } else if ((parseInt(Variables.ListString[0][3])) < parseInt(Variables.WordAdjust[0][1])) {\n                        // } else if ((parseInt(Variables.ListString[0][3]) - parseInt(Variables.ListString[0][6])) < parseInt(Variables.WordAdjust[0][1])) {\n                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Số Lượng Vượt Quá Trong Kho' })\n                    } else {\n\n                        var temp_Insert = {\n                            id: Variables.ListString[0][0],\n                            LotId: Variables.ListString[0][1],\n                            Product: Variables.ListString[0][2],\n                            Destination: Variables.ListString[0][5],\n                            Quantity: Variables.WordAdjust[0][1],\n                            Unit: Variables.ListString[0][4],\n                            Remark: Variables.ListString[0][7],\n                            Package: Variables.ListString[0][13],\n                            Weight: parseInt(Variables.ListString[0][12]),\n                            Table_Name: 'SelectLine',\n                            User: data.currentUser,\n                            LevelUser: data.levelUser,\n                            SaveReport: true\n                        }\n\n                        flow.get(\"global_functions\").InsertStoreSelected(temp_Insert, (result, err) => {\n                            if (err) {\n                                node.warn('MyError: '+err)\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                            } else {\n                                VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Tạo Yêu Cầu Thành Công' })\n                                Variables.ListString[0][0] = '---'\n                                Variables.ListString[0][1] = '---'\n                                Variables.ListString[0][2] = '---'\n                                Variables.ListString[0][5] = '---'\n                                Variables.ListString[0][3] = '---'\n                                Variables.ListString[0][4] = '---'\n                                Variables.ListString[0][6] = '---'\n                                Variables.ListString[0][7] = '---'\n                                Variables.ListString[0][12] = '---'\n                                Variables.ListString[0][13] = '---'\n                                Variables.WordAdjust[0][1] = 0\n\n                                flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                    if (err) {\n                                        node.warn(err)\n                                        VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n                                    } else {\n                                        global.set(\"check_store_line_select\", global.get(\"check_store_line_select\") + 1);\n                                        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                    }\n                                })\n                            }\n                        })\n                    }\n                } else {\n                    VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Chưa Đăng Nhập' })\n\n                }\n            }\n            if (data.idDevice == 'warehouse' && data.tag == 'manual_delivery') {\n                try {\n                    VariableSystem.LocalDB.serialize(() => {\n                        VariableSystem.LocalDB.all('SELECT * FROM Store WHERE _id=\"' + Variables.ListString[0][14] + '\"', (err, rows) => {\n                            if (err) {\n                                node.warn(err)\n                            } else {\n                                if (rows.length > 0) {\n                                    flow.get(\"global_functions\").UpdateStore({\n                                        _id: Variables.ListString[0][14],\n                                        Status: 'STOCK',\n                                        Quantity: parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) > 0 ? parseInt(rows[0].Quantity) - parseInt(Variables.ListString[0][18]) : 0\n                                    }, (result, err) => {\n                                        if (err) {\n                                            node.warn(err)\n                                        } else {\n                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'info', message: 'Update Store Success' })\n                                            flow.get(\"global_functions\").GetStore((result, err) => {\n                                                if (err) {\n                                                    node.warn(err)\n                                                } else {\n                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse({\n                                                        _id: Variables.ListString[0][19],\n                                                        User: data.currentUser,\n                                                        LevelUser: data.levelUser,\n                                                    }, (result, err) => {\n                                                        if (err) {\n                                                            node.warn(err)\n                                                        } else {\n                                                            flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n                                                                if (err) {\n                                                                    node.warn(err)\n                                                                } else {\n                                                                    VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n                                                                }\n                                                            })\n                                                            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'success', message: 'Delete Success' })\n                                                        }\n                                                    })\n                                                }\n                                            })\n                                        }\n                                    })\n                                }\n                            }\n\n                        })\n                    })\n                } catch (err) {\n                    node.warn(err)\n                }\n            }\n           \n        }\n\n        if (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n            let TempArr = data.tag.split('_')\n            if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n                node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n                VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write(TempArr[1] + '\\r\\n')\n            }\n        }\n\n        //WordAdjust\n        if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n        //TextField Input\n        if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n            if (data.tag !== '') {\n                Variables.ListString[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n            }\n        }\n    });\n\n\n});\nreturn msg;\n\n\n // if (data.idDevice == 'warehouse' && data.tag == 'confirm') {\n            //     flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //         if (err) {\n            //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //         } else {\n\n            //             var promises = result.map(async (item) => {\n            //                 await DeleteStorePrepareWarehouse(item._id);\n            //             });\n            //             Promise.all(promises)\n            //                 .then(() => {\n            //                     node.warn('delete success all')\n            //                     // All async operations are complete\n            //                     var TempSelectWarehouse = global.get(\"TempSelectWarehouse\");\n\n            //                     var promises_insert = TempSelectWarehouse.selectedRowsData.map(async (item) => {\n            //                         await InsertStorePrepareWarehouse(item);\n            //                     });\n            //                     Promise.all(promises_insert)\n            //                         .then(() => {\n            //                             node.warn('ok get new table');\n            //                             flow.get(\"global_functions\").GetStorePrepareWarehouse((result, err) => {\n            //                                 if (err) {\n            //                                     VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                                 } else {\n            //                                     node.warn(result);\n            //                                     VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Prepare_Warehouse', result)\n            //                                 }\n            //                             })\n            //                         })\n            //                         .catch((error) => {\n            //                             // Handle any errors that occurred during async operations\n            //                             console.error(error);\n            //                         });\n\n            //                     // TempSelectWarehouse.selectedRowsData.forEach(function (element) {\n            //                     //     if (element.id !== undefined) {\n            //                     //         // flow.get(\"global_functions\").DeleteStoreSelected(element._id, (result, err) => {\n            //                     //         //     if (err) {\n            //                     //         //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //         //     }\n            //                     //         // })\n            //                     //         flow.get(\"global_functions\").InsertStorePrepareWarehouse(element, (result, err) => {\n            //                     //             if (err) {\n            //                     //                 VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //                     //             } else {\n            //                     //                 node.warn('insert data ');\n            //                     //             }\n            //                     //         })\n            //                     //     }\n            //                     // });\n\n            //                 })\n            //                 .catch((error) => {\n            //                     // Handle any errors that occurred during async operations\n            //                     console.error(error);\n            //                 });\n\n            //             // result.forEach(function (element) {\n            //             //     flow.get(\"global_functions\").DeleteStorePrepareWarehouse(element._id, (result, err) => {\n            //             //         if (err) {\n            //             //             VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //             //         }else{\n            //             //             node.warn(element._id);\n            //             //         }\n            //             //     })\n            //             // });\n            //             // node.warn('finish for');\n\n            //         }\n            //     })\n            //     node.warn('finish delete');\n\n            //     // flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n            //     //     if (err) {\n            //     //         VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: err })\n            //     //     } else {\n            //     //         VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            //     //     }\n            //     // })\n            // }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "6f2a67694464ebf4",
        "type": "Omron Mobile Robot",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "",
        "host": "192.168.1.100",
        "password": "omron",
        "port": "7171",
        "indexPLC": "2",
        "x": 800,
        "y": 1120,
        "wires": [
            [
                "e870ce443b09a927"
            ]
        ]
    },
    {
        "id": "b7134d9cc532d6f7",
        "type": "link out",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "83662695725f9e4c",
            "a43b225f45d0a4b1",
            "80f78f4592b6d4ee",
            "f50aac8ed7b2ac19",
            "0e58c65cb08b085c",
            "7019b2cc50909a2b",
            "eb8d1eec9dd40b38",
            "10bca16ca2a742e0",
            "bd41262ff7e1b09a",
            "6d1c4fc40e355d23",
            "48c814a777836571",
            "091bfe752a139601"
        ],
        "x": 715,
        "y": 1080,
        "wires": []
    },
    {
        "id": "e1a1ddf23cdc99c7",
        "type": "inject",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "bb6957b22e2a94a7"
            ]
        ]
    },
    {
        "id": "ae1980447d5fc580",
        "type": "plc_omron",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "PLC-Onsemi",
        "host": "192.168.0.10",
        "port": "9600",
        "indexPLC": "1",
        "topic": "Topic",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": 500,
        "PLC_Length_ReadWrite": "3000",
        "PLC_Word_Start_ReadWrite": 0,
        "PLC_WordStartElement": 0,
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "100",
        "PLC_WordStartBitAdjust": "400",
        "PLC_LengthOfWordBitAdjust": "100",
        "PLC_WordStartWordDisplay": "500",
        "PLC_LengthOfWordWordDisplay": 200,
        "PLC_WordStartWordAdjust": "700",
        "PLC_LengthOfWordWordAdjust": 200,
        "PLC_WordStartDWordDisplay": "900",
        "PLC_LengthOfWordDWordDisplay": "10",
        "PLC_WordStartDWordAdjust": "920",
        "PLC_LengthOfWordDWordAdjust": "10",
        "PLC_WordStartComPC": 1000,
        "PLC_LengthOfWordComPC": 50,
        "PLC_IntervalWriteData": 500,
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "1000",
        "PLC_NumberWordInString": 20,
        "x": 1070,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f83e87a975349a8a",
        "type": "plc_omron",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "Vibration",
        "host": "192.168.1.10",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "500",
        "PLC_Length_ReadWrite": "2500",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "300",
        "PLC_WordStartBitDisplay": "300",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "310",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "320",
        "PLC_LengthOfWordWordDisplay": "200",
        "PLC_WordStartWordAdjust": "520",
        "PLC_LengthOfWordWordAdjust": "200",
        "PLC_WordStartDWordDisplay": "720",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "770",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "1",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 780,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "e870ce443b09a927",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "setDataStatus",
        "func": "var Variables = global.get(\"Variable\");\nVariables.ListString[0][25] = msg.payload.dataStateOfCharge\nVariables.ListString[0][26] = msg.payload.dataLocalizationsScore\nVariables.ListString[0][27] = msg.payload.dataTemperature",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d3e37cf31d06ad49",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "API DELETE",
        "url": "/onsemi/delete",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1650,
        "y": 380,
        "wires": [
            [
                "d4917ca6e4293e36"
            ]
        ]
    },
    {
        "id": "d4917ca6e4293e36",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 380,
        "wires": [
            [
                "53f67c6bc33f5cdb"
            ]
        ]
    },
    {
        "id": "f82214ad9e0bce35",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "API UPDATE",
        "url": "/onsemi/update",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 1650,
        "y": 420,
        "wires": [
            [
                "1976017552023020"
            ]
        ]
    },
    {
        "id": "1976017552023020",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Update DB",
        "func": "flow.get(\"global_functions\").UpdateStore(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 420,
        "wires": [
            [
                "be3cdffc243c02c6"
            ]
        ]
    },
    {
        "id": "141c3a2c194918ff",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "API INSERT",
        "url": "/onsemi/insert",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1650,
        "y": 300,
        "wires": [
            [
                "f5ccfde39f9e29f0"
            ]
        ]
    },
    {
        "id": "2d90266c778154a1",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "API GET DATA",
        "url": "/onsemi/getdata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1660,
        "y": 260,
        "wires": [
            [
                "7e91aa8e9de1b182"
            ]
        ]
    },
    {
        "id": "7e91aa8e9de1b182",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStore((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 260,
        "wires": [
            [
                "bd5f81dd59194826"
            ]
        ]
    },
    {
        "id": "ac88e180247c0f93",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2420,
        "y": 360,
        "wires": []
    },
    {
        "id": "f5ccfde39f9e29f0",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStore(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload = {}\n        msg.payload.error=err\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 300,
        "wires": [
            [
                "820701375fd01b50"
            ]
        ]
    },
    {
        "id": "381eb58bc3ad2a84",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "SocketOI",
        "func": "if (msg.payload.error) {\n    node.warn(msg.payload.error);\n    node.send(msg);\n    node.warn(msg.payload);\n} else {\n    var VariableSystem = global.get(\"VariableSystem\");\n    global.set(\"check_store\", global.get(\"check_store\") + 1);\n    VariableSystem.IO.sockets.emit('UpdateOnsemi', msg.payload)\n    node.send('success')\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 360,
        "wires": [
            [
                "ac88e180247c0f93"
            ]
        ]
    },
    {
        "id": "bd5f81dd59194826",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2020,
        "y": 260,
        "wires": []
    },
    {
        "id": "d625418e8e89d5e4",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Get DB",
        "func": "\nif (msg.payload.error) {\n    node.warn(msg.payload.error);\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").GetStore((result, err) => {\n        if (err) {\n            msg.payload = {}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            msg.payload = result;\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 360,
        "wires": [
            [
                "381eb58bc3ad2a84"
            ]
        ]
    },
    {
        "id": "d561e8a1ca6296db",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "API IMPORT",
        "url": "/onsemi/import",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "9f73db932a6a9d3a"
            ]
        ]
    },
    {
        "id": "9f73db932a6a9d3a",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "b72343ba88a7866a",
        "name": "Import DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar counterErr = 0\n\nasync function InsertStoreAsync(element) {\n    return new Promise((resolve, reject) => {\n        flow.get(\"global_functions\").InsertStore(element, (result, err) => {\n            if (err) {\n                counterErr = counterErr + 1;\n            } else {\n                resolve(' Success');\n            }\n        })\n    });\n}\n\nvar promises = msg.payload.map(async (item) => {\n    await InsertStoreAsync(item);\n});\nPromise.all(promises)\n    .then(() => {\n        if (counterErr > 0) {\n            VariableSystem.IO.sockets.emit('Server-Send-Snackbar', { status: 'error', message: 'Have ' + counterErr + \"lines cannot import\" })\n        }\n        node.send(msg)\n    })",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 340,
        "wires": [
            [
                "48211b5b254fde4d"
            ]
        ]
    },
    {
        "id": "1643c2ef0ed9ba07",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2260,
        "wires": [
            [
                "76bfcdbe1eeaf780"
            ]
        ]
    },
    {
        "id": "66d9bebc9f6603c2",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "GET REPORT STORE",
        "url": "/report_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 2260,
        "wires": [
            [
                "1643c2ef0ed9ba07"
            ]
        ]
    },
    {
        "id": "76bfcdbe1eeaf780",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 560,
        "y": 2260,
        "wires": []
    },
    {
        "id": "63f940812064b0be",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "GET REPORT DELIVERY",
        "url": "/report_delivery_store/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2340,
        "wires": [
            [
                "27d9b4926f3ee758"
            ]
        ]
    },
    {
        "id": "27d9b4926f3ee758",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Delivery_Warehouse_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2340,
        "wires": [
            [
                "3b933a192530fb40"
            ]
        ]
    },
    {
        "id": "3b933a192530fb40",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 560,
        "y": 2340,
        "wires": []
    },
    {
        "id": "a6c3f2ec4f238b2b",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "GET REPORT SELECT",
        "url": "/report_select_line/report/:start_time/:stop_time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 2380,
        "wires": [
            [
                "5992cfac3c813d62"
            ]
        ]
    },
    {
        "id": "5992cfac3c813d62",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Query DB",
        "func": "let start_time = msg.req.params.start_time\nlet stop_time = msg.req.params.stop_time\n\nvar VariableSystem = global.get(\"VariableSystem\");\ntry {\n    VariableSystem.LocalDB.serialize(() => {\n        VariableSystem.LocalDB.all('SELECT * FROM Store_Select_Report WHERE TimeCreate BETWEEN ' + start_time + ' AND ' + stop_time, (err, rows) => {\n            if (err) {\n                node.warn(err);\n            } else {\n                msg.payload=rows\n                node.send(msg)\n            }\n\n        })\n    })\n} catch (err) {\n    node.warn(err);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2380,
        "wires": [
            [
                "2251c0d3ba177727"
            ]
        ]
    },
    {
        "id": "2251c0d3ba177727",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "e472ca43490ab384",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 560,
        "y": 2380,
        "wires": []
    },
    {
        "id": "929986aa304a623d",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "SubFunc Get Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\n\n\nglobal_functions.GetStoreSelected = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Process ORDER BY Order_Item ASC' , (err, rows) => { // \n                if (err) {\n                    cb(null, err)\n                } else {\n                    cb({\n                        check: global.get(\"check_store_line_select\"),\n                        data: rows\n                    })\n                }\n            })\n        })\n    } catch (err) {\n        cb(null, err)\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d1c4fc40e355d23",
        "type": "link in",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "link in 19",
        "links": [
            "355ae0dc15e4ea9b",
            "b7134d9cc532d6f7"
        ],
        "x": 1045,
        "y": 360,
        "wires": [
            [
                "929986aa304a623d",
                "e522c6a5db1d4a41",
                "503e713a1cc17497"
            ]
        ]
    },
    {
        "id": "e522c6a5db1d4a41",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "SubFunc Insert Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n        let Table_Name = data.Table_Name\n\n        try {\n            VariableSystem.LocalDB.serialize(() => {\n                let tempText = ''\n                tempText = tempText + '_id text PRIMARY KEY,'\n                tempText = tempText + 'id text,'\n                tempText = tempText + 'LotId text,'\n                tempText = tempText + 'Product text,'\n                tempText = tempText + 'Destination text,'\n                tempText = tempText + 'Quantity int,'\n                tempText = tempText + 'Unit text,'\n                tempText = tempText + 'Remark text,'\n                tempText = tempText + 'Package text,'\n                tempText = tempText + 'Weight int,'\n                tempText = tempText + 'User text,'\n                tempText = tempText + 'LevelUser int,'\n                tempText = tempText + 'Table_Name text,'\n                tempText = tempText + 'Order_Item Date,'\n\n                let newTempText = tempText.substring(0, tempText.length - 1);\n\n\n                VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Process(' + newTempText + ')', (err) => {\n                    if (err) {\n                        node.warn(err)\n                        cb(null, err)\n                    } else {\n                        let order_value=0\n                        let command = `INSERT INTO Store_Process(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, Table_Name, Order_Item)VALUES(\n                            '${'a' + Math.random().toString(36)}',\n                            '${id}',\n                            '${LotId}',\n                            '${Product}',\n                            '${Destination}',\n                            '${parseInt(Quantity)}',\n                            '${Unit}',\n                            '${Remark ? Remark : ''}',\n                            '${Package ? Package : ''}',\n                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                            '${User ? User : ''}',\n                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            '${Table_Name}',\n                            0\n                            )`\n                        VariableSystem.LocalDB.run(command, (err) => {\n                            if (err) {\n                                cb(null, err)\n                            } else {\n                                cb('success')\n                                //Update Store Status\n                                try {\n                                    let newValue = '';\n                                    newValue = newValue + 'State=\"UNDER ORDER\",'\n                                    let tempNewValue = newValue.substring(0, newValue.length - 1);\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let temp = 'UPDATE Store SET ' + tempNewValue + ' WHERE _id = \"' + id + '\"'\n                                        VariableSystem.LocalDB.run(temp, function (err) {\n                                            if (err) {\n                                                node.warn('Update Store Status Err:' + err)\n                                            } else {\n                                                flow.get(\"global_functions\").GetStore((result, err) => {\n                                                    if (err) {\n                                                        node.warn('Get Store Err:' + err)\n                                                    } else {\n                                                        VariableSystem.IO.sockets.emit('UpdateOnsemi', result)\n                                                    }\n                                                })\n                                            }\n                                        });\n                                    })\n\n                                } catch (err) {\n                                    cb(null, err)\n                                }\n                                //Save Report\n                                if (SaveReport) {\n                                    VariableSystem.LocalDB.serialize(() => {\n                                        let tempText = ''\n                                        tempText = tempText + '_id text PRIMARY KEY,'\n                                        tempText = tempText + 'id text,'\n                                        tempText = tempText + 'LotId text,'\n                                        tempText = tempText + 'Product text,'\n                                        tempText = tempText + 'Destination text,'\n                                        tempText = tempText + 'Quantity int,'\n                                        tempText = tempText + 'Unit text,'\n                                        tempText = tempText + 'Remark text,'\n                                        tempText = tempText + 'Package text,'\n                                        tempText = tempText + 'Weight int,'\n                                        tempText = tempText + 'User text,'\n                                        tempText = tempText + 'LevelUser int,'\n                                        tempText = tempText + 'TimeCreate Date,'\n                                        tempText = tempText + 'TypeReport text,'\n\n                                        let newTempText = tempText.substring(0, tempText.length - 1);\n                                        VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                                            if (err) {\n                                                cb(null, err)\n                                            } else {\n                                                let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                                            '${'a' + Math.random().toString(36)}',\n                                            '${id}',\n                                            '${LotId}',\n                                            '${Product}',\n                                            '${Destination}',\n                                            '${parseInt(Quantity)}',\n                                            '${Unit}',\n                                            '${Remark ? Remark : ''}',\n                                            '${Package ? Package : ''}',\n                                            '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                                            '${User ? User : ''}',\n                                            '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                                            '${Date.now()}',\n                                            'INSERT'\n                                            )`\n                                                VariableSystem.LocalDB.run(command, (err) => {\n                                                    if (err) {\n                                                        node.warn(err)\n                                                    }\n                                                });\n                                            }\n\n                                        })\n                                    })\n                                }\n                            }\n                        });\n                    }\n                })\n            })\n        } catch (err) {\n            cb(null, err)\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 360,
        "wires": []
    },
    {
        "id": "503e713a1cc17497",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "636a955403559330",
        "name": "SubFunc Delete Order",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreSelected = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                        if (err) {\n                            cb(null, err)\n                        //} else {\n                            // //Save Report\n                            // if (SaveReport) {\n                            //     VariableSystem.LocalDB.serialize(() => {\n                            //         let tempText = ''\n                            //         tempText = tempText + '_id text PRIMARY KEY,'\n                            //         tempText = tempText + 'id text,'\n                            //         tempText = tempText + 'LotId text,'\n                            //         tempText = tempText + 'Product text,'\n                            //         tempText = tempText + 'Destination text,'\n                            //         tempText = tempText + 'Quantity int,'\n                            //         tempText = tempText + 'Unit text,'\n                            //         tempText = tempText + 'Remark text,'\n                            //         tempText = tempText + 'Package text,'\n                            //         tempText = tempText + 'Weight int,'\n                            //         tempText = tempText + 'User text,'\n                            //         tempText = tempText + 'LevelUser int,'\n                            //         tempText = tempText + 'TimeCreate Date,'\n                            //         tempText = tempText + 'TypeReport text,'\n\n                            //         let newTempText = tempText.substring(0, tempText.length - 1);\n                            //         let element = rows[0]\n                            //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Select_Report(' + newTempText + ')', (err) => {\n                            //             if (err) {\n                            //                 cb(null, err)\n                            //             } else {\n                            //                 let command = `INSERT INTO Store_Select_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                            //                 '${'a' + Math.random().toString(36)}',\n                            //                 '${_id}',\n                            //                 '${element.LotId}',\n                            //                 '${element.Product}',\n                            //                 '${element.Destination}',\n                            //                 '${parseInt(element.Quantity)}',\n                            //                 '${element.Unit}',\n                            //                 '${element.Remark ? element.Remark : ''}',\n                            //                 '${element.Package ? element.Package : ''}',\n                            //                 '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                            //                 '${User ? User : ''}',\n                            //                 '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                            //                 '${Date.now()}',\n                            //                 'DELETE'\n                            //                 )`\n                            //                 VariableSystem.LocalDB.run(command, (err) => {\n                            //                     if (err) {\n                            //                         node.warn('Update Report Err: ' + err);\n                            //                     }\n                            //                 });\n                            //             }\n\n                            //         })\n                            //     })\n                            // }\n                        }\n                    })\n                    VariableSystem.LocalDB.run('DELETE from Store_Process WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                    });\n                })\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "16b9e6204d183bed",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "0ae961d5e0851921",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 500,
        "y": 240,
        "wires": []
    },
    {
        "id": "f8c65b08ba4b18e6",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0ae961d5e0851921",
        "name": "Select Row",
        "func": "var Variables = global.get(\"Variable\");\n\nVariables.ListString[0][0] = msg.payload.id;\nVariables.ListString[0][1] = msg.payload.LotId;\nVariables.ListString[0][2] = msg.payload.Product;\nVariables.ListString[0][3] = msg.payload.Quantity;\n// Variables.ListString[0][4] = msg.payload.Unit;\n// Variables.ListString[0][6] = msg.payload.QuantityOrdering;\n// Variables.ListString[0][12] = msg.payload.Weight;\nVariables.ListString[0][13] = msg.payload.Package;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "16b9e6204d183bed"
            ]
        ]
    },
    {
        "id": "942dd997c38bbf97",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "0ae961d5e0851921",
        "name": "API SELECT ROW",
        "url": "/onsemi/select",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "f8c65b08ba4b18e6"
            ]
        ]
    },
    {
        "id": "2ef4b647ff05d4a3",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "9a86a7c8a393028e",
        "name": "API SELECT DELETE",
        "url": "/onsemi/delete_select",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "1b58a09ec636db65"
            ]
        ]
    },
    {
        "id": "1b58a09ec636db65",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9a86a7c8a393028e",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreSelected(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "a828a5216e78e3bf"
            ]
        ]
    },
    {
        "id": "b92cc57c8c9674b2",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "9a86a7c8a393028e",
        "name": "API SELECT GET DATA",
        "url": "/onsemi/getdata_select",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "a828a5216e78e3bf"
            ]
        ]
    },
    {
        "id": "a828a5216e78e3bf",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9a86a7c8a393028e",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nflow.get(\"global_functions\").GetStoreSelected((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "1ac410b6b4c9dd18"
            ]
        ]
    },
    {
        "id": "1ac410b6b4c9dd18",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "9a86a7c8a393028e",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd41262ff7e1b09a",
        "type": "link in",
        "z": "29edf33f7ef9dac1",
        "g": "0c53561c896c5a45",
        "name": "link in 20",
        "links": [
            "355ae0dc15e4ea9b",
            "b7134d9cc532d6f7"
        ],
        "x": 925,
        "y": 560,
        "wires": [
            [
                "8bd49842fb7495f4",
                "6dc263d56b9951be"
            ]
        ]
    },
    {
        "id": "8bd49842fb7495f4",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0c53561c896c5a45",
        "name": "SubFunc Insert Store Prepare Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStorePrepareWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n\n\n        if (data._id !== undefined) {\n            try {\n                let newValue = '';\n                newValue = newValue + 'Table_Name=\"' + 'Prepare' + '\",'\n                newValue = newValue + 'Order_Item=\"' + Date.now() + '\",'\n\n                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Prepare\" ORDER BY Order_Item ASC', (err, rows) => {\n                        if (err) {\n                            node.warn(err);\n                            cb(null, err)\n                        } else {\n                            rows.forEach(function (element) {\n                                if (LotId == element.LotId) {\n                                    node.warn('Trùng Lot ID')\n                                    cb(null, 'Trùng LotID')\n                                    return\n                                }\n                            });\n                        }\n\n                    })\n                    node.warn('check123123123')\n                    let temp = 'UPDATE Store_Process SET ' + tempNewValue + ' WHERE _id = \"' + data._id + '\"'\n                    VariableSystem.LocalDB.run(temp, function (err) {\n                        if (err) {\n                            cb(null, err)\n                        }\n                        cb('success')\n                        // //Save Report\n                        // if (SaveReport) {\n                        //     VariableSystem.LocalDB.serialize(() => {\n                        //         let tempText = ''\n                        //         tempText = tempText + '_id text PRIMARY KEY,'\n                        //         tempText = tempText + 'id text,'\n                        //         tempText = tempText + 'LotId text,'\n                        //         tempText = tempText + 'Product text,'\n                        //         tempText = tempText + 'Destination text,'\n                        //         tempText = tempText + 'Quantity int,'\n                        //         tempText = tempText + 'Unit text,'\n                        //         tempText = tempText + 'Remark text,'\n                        //         tempText = tempText + 'Package text,'\n                        //         tempText = tempText + 'Weight int,'\n                        //         tempText = tempText + 'User text,'\n                        //         tempText = tempText + 'LevelUser int,'\n                        //         tempText = tempText + 'TimeCreate Date,'\n                        //         tempText = tempText + 'TypeReport text,'\n\n                        //         let newTempText = tempText.substring(0, tempText.length - 1);\n                        //         VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Prepare_Warehouse_Report(' + newTempText + ')', (err) => {\n                        //             if (err) {\n                        //                 cb(null, err)\n                        //             } else {\n                        //                 let command = `INSERT INTO Store_Prepare_Warehouse_Report(_id, id, LotId, Product,Destination, Quantity, Unit, Remark, Package, Weight, User, LevelUser, TimeCreate, TypeReport)VALUES(\n                        //                     '${'a' + Math.random().toString(36)}',\n                        //                     '${id}',\n                        //                     '${LotId}',\n                        //                     '${Product}',\n                        //                     '${Destination}',\n                        //                     '${parseInt(Quantity)}',\n                        //                     '${Unit}',\n                        //                     '${Remark ? Remark : ''}',\n                        //                     '${Package ? Package : ''}',\n                        //                     '${parseInt(Weight) ? parseInt(Weight) : 0}',\n                        //                     '${User ? User : ''}',\n                        //                     '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                        //                     '${Date.now()}',\n                        //                     'INSERT'\n                        //                     )`\n                        //                 VariableSystem.LocalDB.run(command, (err) => {\n                        //                     if (err) {\n                        //                         node.warn(err)\n                        //                     }\n                        //                 });\n                        //             }\n                        //         })\n                        //     })\n                        // }\n                    });\n                })\n\n            } catch (err) {\n                cb(null, err)\n            }\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 540,
        "wires": []
    },
    {
        "id": "ee5aab9c5f969aed",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "API SELECT UPDATE",
        "url": "/onsemi/select_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "13ba6fc34378dace"
            ]
        ]
    },
    {
        "id": "d69fe650233fde85",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "Insert Prepare Warehouse",
        "func": "var Variables = global.get(\"Variable\");\nif (msg.payload.error) {\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").InsertStorePrepareWarehouse(msg.payload, (result, err) => {\n        if (err) {\n            msg.payload={}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            node.send(msg);\n        }\n    })\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 640,
        "wires": [
            [
                "766cea9ff7e83bc1"
            ]
        ]
    },
    {
        "id": "daa2384c847b36cf",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 740,
        "y": 580,
        "wires": []
    },
    {
        "id": "6aca80eb8c01b98f",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "Get Temp Select Warehouse Check Weight",
        "func": "var Variables = global.get(\"Variable\");\n\nglobal.set('TempSelectWarehouse',msg.payload)\n\nlet currentWeight=0\nmsg.payload.selectedRowsData.forEach(function(element) {\n    currentWeight = currentWeight+parseInt(element.Weight)*parseInt(element.Quantity)\n});\n\nVariables.ListString[0][10] = parseFloat(currentWeight)/1000 +' kg';\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "766cea9ff7e83bc1",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nif (msg.payload.error) {\n    node.send(msg);\n    node.warn(msg);\n} else {\n    flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n        if (err) {\n            msg.payload={}\n            msg.payload.error=err\n            node.send(msg);\n        } else {\n            global.set(\"check_store_line_select\", global.get(\"check_store_line_select\") + 1);\n            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "daa2384c847b36cf"
            ]
        ]
    },
    {
        "id": "13ba6fc34378dace",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "9ddc234892167110",
        "name": "CheckPrepareConditionWarehouse",
        "func": "var Variables = global.get(\"Variable\");\nflow.get(\"global_functions\").CheckPrepareConditionWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload={}\n        msg.payload.error=err\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "d69fe650233fde85"
            ]
        ]
    },
    {
        "id": "6dc263d56b9951be",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "0c53561c896c5a45",
        "name": "SubFunc Check Prepare Condition",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.CheckPrepareConditionWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let id = data.id\n        let LotId = data.LotId\n        let Product = data.Product\n        let Destination = data.Destination\n        let Quantity = data.Quantity\n        let Unit = data.Unit\n        let Remark = data.Remark\n        let Package = data.Package\n        let Weight = data.Weight\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let SaveReport = data.SaveReport\n        if (data._id !== undefined) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Prepare\" ORDER BY Order_Item ASC', (err, rows) => {\n                        if (err) {\n                            node.warn(err);\n                            cb(null, err)\n                        } else {\n                            let checkTrung=false\n                            rows.forEach(function (element) {\n                                if (LotId == element.LotId) {\n                                    node.warn('Trùng Lot ID')\n                                    checkTrung=true\n                                }\n                            });\n                            if(checkTrung){\n                                cb(null,'Trùng Lot ID')\n                            } else {\n                                if(rows.length>=3){\n                                    cb(null,'Quá Số Lượng')\n                                }else{\n                                    cb(1)\n                                }\n                            }\n                        }\n\n                    })\n                })\n\n            } catch (err) {\n                node.send(err)\n            }\n        }\n    }\n}\n\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 500,
        "wires": []
    },
    {
        "id": "10bca16ca2a742e0",
        "type": "link in",
        "z": "29edf33f7ef9dac1",
        "g": "7ce82893c2287b5a",
        "name": "link in 21",
        "links": [
            "355ae0dc15e4ea9b",
            "b7134d9cc532d6f7"
        ],
        "x": 925,
        "y": 840,
        "wires": [
            [
                "90743a804a0bfb9d",
                "a3b4398076bf26e6",
                "be6356135edbb457"
            ]
        ]
    },
    {
        "id": "90743a804a0bfb9d",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "7ce82893c2287b5a",
        "name": "SubFunc Get Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar Variables = global.get(\"Variable\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.GetStoreDeliveryWarehouse = function (cb) {\n    try {\n        VariableSystem.LocalDB.serialize(() => {\n            VariableSystem.LocalDB.all('SELECT * FROM Store_Process WHERE Table_Name=\"Delivery\" ORDER BY Order_Item ASC', (err, rows) => {\n                if (err) {\n                    node.warn(err);\n                    cb(null, err)\n                } else {\n                    cb(rows)\n                }\n\n            })\n        })\n    } catch (err) {\n        node.warn(err);\n    }\n}\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 800,
        "wires": []
    },
    {
        "id": "a3b4398076bf26e6",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "7ce82893c2287b5a",
        "name": "SubFunc Delete Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.DeleteStoreDeliveryWarehouse = function (data, cb) {\n    if (typeof data === 'object' && data !== null) {\n        let User = data.User\n        let LevelUser = data.LevelUser\n        let _id = data._id\n        let SaveReport = data.SaveReport\n        if (_id) {\n            try {\n                VariableSystem.LocalDB.serialize(() => {\n                    // if (SaveReport) {\n                    //     VariableSystem.LocalDB.all('SELECT * FROM Store_Process' + ' WHERE _id = \"' + _id + '\"', (err, rows) => {\n                    //         if (err) {\n                    //             cb(null, err)\n                    //         } else {\n                    //             //Save Report\n                    //             VariableSystem.LocalDB.serialize(() => {\n                    //                 let tempText = ''\n                    //                 tempText = tempText + '_id text PRIMARY KEY,'\n                    //                 tempText = tempText + 'id text,'\n                    //                 tempText = tempText + 'LotId text,'\n                    //                 tempText = tempText + 'Product text,'\n                    //                 tempText = tempText + 'Quantity int,'\n                    //                 tempText = tempText + 'QuantityOrdering int,'\n                    //                 tempText = tempText + 'Unit text,'\n                    //                 tempText = tempText + 'Location text,'\n                    //                 tempText = tempText + 'State text,'\n                    //                 tempText = tempText + 'Package text,'\n                    //                 tempText = tempText + 'Remark text,'\n                    //                 tempText = tempText + 'Weight int,'\n                    //                 tempText = tempText + 'TimeCreate Date,'\n                    //                 tempText = tempText + 'User text,'\n                    //                 tempText = tempText + 'LevelUser text,'\n                    //                 tempText = tempText + 'TypeReport text,'\n\n                    //                 let newTempText = tempText.substring(0, tempText.length - 1);\n                    //                 let element = rows[0]\n                    //                 VariableSystem.LocalDB.run('CREATE TABLE IF NOT EXISTS Store_Delivery_Warehouse_Report(' + newTempText + ')', (err) => {\n                    //                     if (err) {\n                    //                         node.warn(err);\n                    //                     } else {\n                    //                         let command = `INSERT INTO Store_Delivery_Warehouse_Report(_id, id, LotId, Product, Quantity, QuantityOrdering, Unit, Location, State, Package, Remark, Weight, TimeCreate, User, LevelUser, TypeReport)VALUES(\n                    //                         '${'a' + Math.random().toString(36)}',\n                    //                         '${_id}',\n                    //                         '${element.LotId ? element.LotId : ''}',\n                    //                         '${element.Product ? element.Product : ''}',\n                    //                         '${parseInt(element.Quantity) ? parseInt(element.Quantity) : 0}',\n                    //                         '${parseInt(element.QuantityOrdering) ? parseInt(element.QuantityOrdering) : 0}',\n                    //                         '${element.Unit ? element.Unit : ''}',\n                    //                         '${element.Location ? element.Location : ''}',\n                    //                         '${element.State ? element.State : ''}',\n                    //                         '${element.Package ? element.Package : ''}',\n                    //                         '${element.Remark ? element.Remark : ''}',\n                    //                         '${parseInt(element.Weight) ? parseInt(element.Weight) : 0}',\n                    //                         '${Date.now()}',\n                    //                         '${User ? User : '_'}',\n                    //                         '${parseInt(LevelUser) ? parseInt(LevelUser) : 0}',\n                    //                         'DELETE'\n                    //                         )`\n                    //                         VariableSystem.LocalDB.run(command, (err) => {\n                    //                             if (err) {\n                    //                                 node.warn('Update Report Err: ' + err);\n                    //                             }\n                    //                         });\n                    //                     }\n\n                    //                 })\n                    //             })\n                    //         }\n                    //     })\n                    // }\n                    VariableSystem.LocalDB.run('DELETE from Store_Process WHERE _id = ' + '\"' + _id + '\"', function (err) {\n                        if (err) {\n                            node.warn('err' + err);\n                            cb(null, err)\n                        }else{\n                            cb('success')\n                        }\n                    });\n                })\n            } catch (err) {\n                node.warn('err' + err);\n                cb(null, err)\n            }\n        }\n    }\n}\nflow.set(\"global_functions\", global_functions);\n\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 880,
        "wires": []
    },
    {
        "id": "264dfd626fafebc9",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "API DELETE",
        "url": "/onsemi/delete_delivery_warehouse",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "f1d891052cdaa829"
            ]
        ]
    },
    {
        "id": "f1d891052cdaa829",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Delete DB",
        "func": "flow.get(\"global_functions\").DeleteStoreDeliveryWarehouse(msg.payload, (result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 880,
        "wires": [
            [
                "8ff95e4cbfef965a"
            ]
        ]
    },
    {
        "id": "406997e5a1f2d014",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "API GET DATA",
        "url": "/onsemi/getdata_delivery_warehouse",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "e3a4030b3121db2d"
            ]
        ]
    },
    {
        "id": "e3a4030b3121db2d",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Get DB",
        "func": "flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n    if (err) {\n        msg.payload = {\n            result: \"error\",\n            data: {},\n            message: err\n        };\n        node.send(msg);\n    } else {\n        msg.payload = result;\n        node.send(msg);\n    }\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 800,
        "wires": [
            [
                "d09a91a9a421304b"
            ]
        ]
    },
    {
        "id": "5c10f51374406a23",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 780,
        "y": 860,
        "wires": []
    },
    {
        "id": "d09a91a9a421304b",
        "type": "http response",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 540,
        "y": 800,
        "wires": []
    },
    {
        "id": "8ff95e4cbfef965a",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Get DB",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\n\nif (msg.payload.error) {\n    node.warn(msg.payload.error);\n\n    node.send(msg);\n} else {\n    flow.get(\"global_functions\").GetStoreSelected((result, err) => {\n        if (err) {\n            msg.payload = {}\n            msg.payload.error = err\n            node.send(msg);\n        } else {\n            VariableSystem.IO.sockets.emit('UpdateOnsemi_Store_Selected', result)\n            msg.payload = result;\n            node.send(msg);\n        }\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 860,
        "wires": [
            [
                "5c10f51374406a23"
            ]
        ]
    },
    {
        "id": "e05a179a034f2dd1",
        "type": "http in",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "API INSERT",
        "url": "/onsemi/insert_delivery_warehouse",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "b099febec79c2aad"
            ]
        ]
    },
    {
        "id": "b099febec79c2aad",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "036af4e858331199",
        "name": "Insert DB",
        "func": "flow.get(\"global_functions\").InsertStoreDeliveryWarehouse(msg.payload,(result, err) => {\n    if (err) {\n        msg.payload={}\n        msg.payload.error=err\n        node.warn(msg);\n        node.send(msg);\n    } else {\n        node.send(msg);\n    }\n})\n\n                ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 840,
        "wires": [
            [
                "8ff95e4cbfef965a"
            ]
        ]
    },
    {
        "id": "be6356135edbb457",
        "type": "function",
        "z": "29edf33f7ef9dac1",
        "g": "7ce82893c2287b5a",
        "name": "SubFunc Insert Store Delivery Warehouse",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nlet global_functions = flow.get('global_functions')\nglobal_functions.InsertStoreDeliveryWarehouse = function (arrdata, cb) {\n    flow.get(\"global_functions\").GetStoreDeliveryWarehouse((result, err) => {\n        if (err) {\n            node.warn(err)\n            cb(null, err)\n        } else {\n            if (result.length == 0) {\n                let set_order_value = 0\n                arrdata.forEach(function (data, index) {\n                    if (typeof data === 'object' && data !== null) {\n                        const isLastElement = index === arrdata.length - 1;\n                        let _id = data._id\n                        let id = data.id\n                        let LotId = data.LotId\n                        let Product = data.Product\n                        let Destination = data.Destination\n                        let Quantity = data.Quantity\n                        let Unit = data.Unit\n                        let Remark = data.Remark\n                        let Package = data.Package\n                        let Weight = data.Weight\n                        let User = data.User\n                        let LevelUser = data.LevelUser\n\n                        if (_id !== undefined) {\n                            try {\n                                set_order_value = set_order_value + 1\n\n                                let newValue = '';\n                                newValue = newValue + 'Table_Name=\"' + 'Delivery' + '\",'\n                                newValue = newValue + 'Order_Item=\"' + (Date.now() + set_order_value) + '\",'\n\n                                let tempNewValue = newValue.substring(0, newValue.length - 1);\n                                VariableSystem.LocalDB.serialize(() => {\n                                    let temp = 'UPDATE Store_Process SET ' + tempNewValue + ' WHERE _id = \"' + _id + '\"'\n                                    VariableSystem.LocalDB.run(temp, function (err) {\n                                        if (err) {\n                                            cb(null, err)\n                                        }\n                                        if (isLastElement) {\n                                            cb('success')\n                                        }\n                                    });\n                                })\n\n                            } catch (err) {\n                                cb(null, err)\n                            }\n                        }\n                    }\n                });\n            } else {\n                cb(null,'Đang Còn Giao Hàng')\n            }\n        }\n    })\n}\n\n\nflow.set(\"global_functions\", global_functions);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 840,
        "wires": []
    },
    {
        "id": "b75afc4d440becdd",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "ATC",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "1010",
        "backgroundColor": "457b9d",
        "backgroundImage": "NoThing",
        "idPage": "Scada",
        "scale": "67",
        "header_hide": "0",
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "1180af2a659ef115"
            ]
        ]
    },
    {
        "id": "5289b68116b8b3f2",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "SCADA PAGE",
        "x": 480,
        "y": 1220,
        "wires": [
            [
                "b75afc4d440becdd"
            ]
        ]
    },
    {
        "id": "1180af2a659ef115",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "ConfigSystem",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1900",
        "height": "1010",
        "backgroundColor": "457b9d",
        "backgroundImage": "abc",
        "idPage": "ConfigSystem",
        "scale": "67",
        "header_hide": "0",
        "x": 860,
        "y": 1220,
        "wires": [
            [
                "ea5119662f10a82e"
            ]
        ]
    },
    {
        "id": "ea5119662f10a82e",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "MÀN HÌNH",
        "x": 470,
        "y": 1260,
        "wires": [
            [
                "84b7f26e089e77a0"
            ]
        ]
    },
    {
        "id": "84b7f26e089e77a0",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "MÀN HÌNH LINE",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Line",
        "scale": "75",
        "header_hide": "0",
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "abb35537729b9a5f"
            ]
        ]
    },
    {
        "id": "abb35537729b9a5f",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "MÀN HÌNH KHO",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Kho",
        "scale": "75",
        "header_hide": "0",
        "x": 970,
        "y": 1260,
        "wires": [
            [
                "5d6ae17588b0a863"
            ]
        ]
    },
    {
        "id": "5d6ae17588b0a863",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "FULL SCREEN",
        "x": 480,
        "y": 1320,
        "wires": [
            [
                "fb90a6dd12255682"
            ]
        ]
    },
    {
        "id": "fb90a6dd12255682",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "MÀN HÌNH LINE - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Line",
        "scale": "75",
        "header_hide": "1",
        "x": 750,
        "y": 1320,
        "wires": [
            [
                "dce469c0b1f3c1ad"
            ]
        ]
    },
    {
        "id": "dce469c0b1f3c1ad",
        "type": "Config_Web Page",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "MÀN HÌNH KHO - FULL",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1600",
        "height": "900",
        "backgroundColor": "ced4da",
        "backgroundImage": "",
        "idPage": "Scada_Kho",
        "scale": "75",
        "header_hide": "1",
        "x": 1050,
        "y": 1320,
        "wires": [
            [
                "faf73ea841b3841b"
            ]
        ]
    },
    {
        "id": "faf73ea841b3841b",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "STORE MANAGE",
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "f607309fd8e783f8"
            ]
        ]
    },
    {
        "id": "f607309fd8e783f8",
        "type": "Config_Web Page_Call",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "STORE",
        "url": "/scada/StoreProjectSanofi",
        "icon": "icon-pencil",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "onsemi",
        "x": 740,
        "y": 1380,
        "wires": [
            [
                "ae5e42197c7aaa6e"
            ]
        ]
    },
    {
        "id": "ae5e42197c7aaa6e",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "REPORT",
        "x": 460,
        "y": 1440,
        "wires": [
            [
                "91422f8ab0b926c2"
            ]
        ]
    },
    {
        "id": "91422f8ab0b926c2",
        "type": "Config_Web Page_Report",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "REQUEST LINES",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_select_line",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 700,
        "y": 1440,
        "wires": [
            [
                "3498fe6eeed2648f"
            ]
        ]
    },
    {
        "id": "3498fe6eeed2648f",
        "type": "Config_Web Page_Report",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "PREPARE WARESHOUSE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_prepare_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Destination\",         \"capture\": \"Destination\",         \"width\": \"100\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 730,
        "y": 1480,
        "wires": [
            [
                "1fba7794f2ca3107"
            ]
        ]
    },
    {
        "id": "1fba7794f2ca3107",
        "type": "Config_Web Page_Report",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "DELIVERY",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_delivery_store",
        "table": "[     {         \"dataField\": \"Package\",         \"capture\": \"Package\",         \"width\": \"auto\"     },     {         \"dataField\": \"Product\",         \"capture\": \"Product\",         \"width\": \"auto\"     },     {         \"dataField\": \"LotId\",         \"capture\": \"LotID\",         \"width\": \"auto\"     },     {         \"dataField\": \"Quantity\",         \"capture\": \"Quantity\",         \"width\": \"100\"     },     {         \"dataField\": \"Location\",         \"capture\": \"Location\",         \"width\": \"auto\"     },     {         \"dataField\": \"Remark\",         \"capture\": \"Remark\",         \"width\": \"auto\"     },     {         \"dataField\": \"User\",         \"capture\": \"User\",         \"width\": \"80\"     },     {         \"dataField\": \"TypeReport\",         \"capture\": \"TypeReport\",         \"width\": \"100\"     } ]",
        "x": 1000,
        "y": 1480,
        "wires": [
            [
                "6c8fa6f089aabd67"
            ]
        ]
    },
    {
        "id": "6c8fa6f089aabd67",
        "type": "Config_Web Page_Report",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "STORE",
        "url": "/scada/report_common",
        "icon": "cui-dashboard",
        "scale": "100",
        "nodered_port": "9001",
        "name_api": "report_store",
        "table": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Location\",\"capture\":\"Location\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "e1e69ef389f36cef"
            ]
        ]
    },
    {
        "id": "e1e69ef389f36cef",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "USER MANAGER",
        "x": 490,
        "y": 1580,
        "wires": [
            [
                "b38f5a8e2f8249dd"
            ]
        ]
    },
    {
        "id": "b38f5a8e2f8249dd",
        "type": "Config_Web Page_Call",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 740,
        "y": 1580,
        "wires": [
            [
                "d39549cfe282b938"
            ]
        ]
    },
    {
        "id": "d39549cfe282b938",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "MEMONIC TAG SYSTEM",
        "x": 510,
        "y": 1640,
        "wires": [
            [
                "fa4e5e907340e595"
            ]
        ]
    },
    {
        "id": "fa4e5e907340e595",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - BitDisplay",
        "indexPLC": "1",
        "word_start": "300",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 780,
        "y": 1640,
        "wires": [
            [
                "22f80be43047219d"
            ]
        ]
    },
    {
        "id": "22f80be43047219d",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - BitAdjust",
        "indexPLC": "1",
        "word_start": "310",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1060,
        "y": 1640,
        "wires": [
            [
                "38e7f47dd2718755"
            ]
        ]
    },
    {
        "id": "38e7f47dd2718755",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - WordDisplay",
        "indexPLC": "2",
        "word_start": "320",
        "length_word": "200",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 790,
        "y": 1680,
        "wires": [
            [
                "9526191d69be5bac"
            ]
        ]
    },
    {
        "id": "9526191d69be5bac",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - WordAdjust",
        "indexPLC": "2",
        "word_start": "520",
        "length_word": "200",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1070,
        "y": 1680,
        "wires": [
            [
                "ae3f3f3b1b742969"
            ]
        ]
    },
    {
        "id": "ae3f3f3b1b742969",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - DWordDisplay",
        "indexPLC": "2",
        "word_start": "720",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 800,
        "y": 1720,
        "wires": [
            [
                "fb7693bc2e58e146"
            ]
        ]
    },
    {
        "id": "fb7693bc2e58e146",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - DWordAdjust",
        "indexPLC": "2",
        "word_start": "770",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1090,
        "y": 1720,
        "wires": [
            [
                "f6c96055302ae46e"
            ]
        ]
    },
    {
        "id": "f6c96055302ae46e",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "NJ - Word_Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 780,
        "y": 1760,
        "wires": [
            [
                "42f4f9edc409d7b4"
            ]
        ]
    },
    {
        "id": "42f4f9edc409d7b4",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - String",
        "indexPLC": "2",
        "word_start": "2000",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 1050,
        "y": 1760,
        "wires": [
            [
                "21c4bcda39360c32"
            ]
        ]
    },
    {
        "id": "21c4bcda39360c32",
        "type": "Config_Web Title",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "title": "MEMONIC MOBILE",
        "x": 500,
        "y": 1820,
        "wires": [
            [
                "f17e3341c1a74291"
            ]
        ]
    },
    {
        "id": "f17e3341c1a74291",
        "type": "Config_Web Memonic",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name_page": "System - MOBILE - BITADJUST",
        "indexPLC": "2",
        "word_start": "0",
        "length_word": "100",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 820,
        "y": 1820,
        "wires": [
            [
                "be60e7172e723608"
            ]
        ]
    },
    {
        "id": "be60e7172e723608",
        "type": "Config_Web End",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "port": "8000",
        "x": 450,
        "y": 1900,
        "wires": [
            [
                "13855825f1be951b",
                "c61ba1de490ee524"
            ]
        ]
    },
    {
        "id": "13855825f1be951b",
        "type": "file",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "c61ba1de490ee524",
        "type": "file",
        "z": "29edf33f7ef9dac1",
        "g": "0701920227a2a010",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 750,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "6b97064f7f39a0ec",
        "type": "inject",
        "z": "be379b1fd0218d73",
        "g": "9770913c45c00cc4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "09bb1d915411dbe9"
            ]
        ]
    },
    {
        "id": "09bb1d915411dbe9",
        "type": "function",
        "z": "be379b1fd0218d73",
        "g": "9770913c45c00cc4",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 60,
        "wires": [
            [
                "dbb92c238194206b"
            ]
        ]
    },
    {
        "id": "dbb92c238194206b",
        "type": "debug",
        "z": "be379b1fd0218d73",
        "g": "9770913c45c00cc4",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "36f325d438f1a29f",
        "type": "inject",
        "z": "be379b1fd0218d73",
        "g": "9770913c45c00cc4",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "1b2769c93659f9b4"
            ]
        ]
    },
    {
        "id": "1b2769c93659f9b4",
        "type": "function",
        "z": "be379b1fd0218d73",
        "g": "9770913c45c00cc4",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5f598560a0ec8884",
        "type": "Config_Web Begin",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "x": 280,
        "y": 300,
        "wires": [
            [
                "3a1e46be2607ab76"
            ]
        ]
    },
    {
        "id": "89825ba07d8647a0",
        "type": "inject",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "5f598560a0ec8884",
                "24bf40a5a95c3625",
                "4739c462039b14a0"
            ]
        ]
    },
    {
        "id": "4739c462039b14a0",
        "type": "function",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/HorizontalMachine.db\"\nnode.warn(JSON.stringify(Sql_link))\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\n\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "b3187791683db206"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "24bf40a5a95c3625",
        "type": "function",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "PROCESS CLIENT",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar Variables = global.get(\"Variable\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nVariableSystem.IO.removeAllListeners('connection')\nVariableSystem.IO.sockets.on('connection', function (socket) {\n    SubFunction.setLogServer(JSON.stringify(\"Co nguoi ket noi\" + socket.id))\n\n    socket.on(\"disconnect\", function () {\n        SubFunction.setLogServer(JSON.stringify(\"Ngat Ket Noi\"))\n    });\n    //WRITE TO PLC\n    socket.on(\"Client-send-data\", function (data) {\n        node.warn(`Data socketio client: ${JSON.stringify(data)}`)\n        SubFunction.ProcessSocketIO_Fins(data)\n\n        // //BitAdjust\n        // if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = !Variables.BitAdjust[parseInt(data.idDevice)][parseInt(data.tag)]\n        //     }\n        // }\n        // //WordAdjust\n        // if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         node.warn(data.value);\n        //         Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n        //     }\n        // }\n        // if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n        //     }\n        // }\n        // //TextField Input\n        // if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         Variables.ListString[1][parseInt(data.tag)] = data.value\n        //     }\n        // }\n    });\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "03921dea6c56d8af",
        "type": "inject",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "5f598560a0ec8884"
            ]
        ]
    },
    {
        "id": "b3187791683db206",
        "type": "plc_omron",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "PLC",
        "host": "192.168.1.11",
        "port": "9600",
        "indexPLC": "1",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "200",
        "PLC_Length_ReadWrite": "1000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "100",
        "PLC_WordStartBitDisplay": "100",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "110",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "120",
        "PLC_LengthOfWordWordDisplay": "100",
        "PLC_WordStartWordAdjust": "220",
        "PLC_LengthOfWordWordAdjust": "100",
        "PLC_WordStartDWordDisplay": "320",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "370",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 520,
        "y": 200,
        "wires": [
            [
                "aa5d2768851214f1"
            ]
        ]
    },
    {
        "id": "3a1e46be2607ab76",
        "type": "Config_Web Title",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "title": "SCADA PAGE",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "6ac55fa85a7bcd17"
            ]
        ]
    },
    {
        "id": "6ac55fa85a7bcd17",
        "type": "Config_Web Page",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "MAIN",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1000",
        "height": "700",
        "backgroundColor": "457b9d",
        "backgroundImage": "NoThing",
        "idPage": "Scada",
        "scale": "100",
        "header_hide": "0",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "5d5b9fadb855fca1"
            ]
        ]
    },
    {
        "id": "f0285228168a1ae0",
        "type": "Config_Web Title",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "title": "USER MANAGER",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "16e4a86999d9f82a"
            ]
        ]
    },
    {
        "id": "16e4a86999d9f82a",
        "type": "Config_Web Page_Call",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "User Manager",
        "url": "/UserManager",
        "icon": "icon-pencil",
        "scale": "100",
        "x": 720,
        "y": 360,
        "wires": [
            [
                "af4107680aa9cfe9"
            ]
        ]
    },
    {
        "id": "af4107680aa9cfe9",
        "type": "Config_Web Title",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "title": "MEMONIC TAG SYSTEM",
        "x": 490,
        "y": 420,
        "wires": [
            [
                "36a7f07c80351c1f"
            ]
        ]
    },
    {
        "id": "36a7f07c80351c1f",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - BitDisplay",
        "indexPLC": "1",
        "word_start": "100",
        "length_word": "10",
        "url": "/memonicOmron/bitdisplay",
        "icon": "cui-dashboard",
        "x": 760,
        "y": 420,
        "wires": [
            [
                "4070c8996996fd09"
            ]
        ]
    },
    {
        "id": "4070c8996996fd09",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - BitAdjust",
        "indexPLC": "1",
        "word_start": "110",
        "length_word": "10",
        "url": "/memonicOmron/bitadjust",
        "icon": "cui-dashboard",
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "04aad713c8b3f202"
            ]
        ]
    },
    {
        "id": "04aad713c8b3f202",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - WordDisplay",
        "indexPLC": "1",
        "word_start": "120",
        "length_word": "100",
        "url": "/memonicOmron/worddisplay",
        "icon": "cui-dashboard",
        "x": 770,
        "y": 460,
        "wires": [
            [
                "aec977e3cda21ecb"
            ]
        ]
    },
    {
        "id": "aec977e3cda21ecb",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - WordAdjust",
        "indexPLC": "1",
        "word_start": "220",
        "length_word": "100",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "465acacf517b6a24"
            ]
        ]
    },
    {
        "id": "465acacf517b6a24",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - DWordDisplay",
        "indexPLC": "1",
        "word_start": "320",
        "length_word": "25",
        "url": "/memonicOmron/dworddisplay",
        "icon": "cui-dashboard",
        "x": 780,
        "y": 500,
        "wires": [
            [
                "5d83c9eda0bcfb1b"
            ]
        ]
    },
    {
        "id": "5d83c9eda0bcfb1b",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - DWordAdjust",
        "indexPLC": "1",
        "word_start": "370",
        "length_word": "25",
        "url": "/memonicOmron/dwordadjust",
        "icon": "cui-dashboard",
        "x": 1070,
        "y": 500,
        "wires": [
            [
                "d7b754465fa89f45"
            ]
        ]
    },
    {
        "id": "0c983ae58f488bda",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "NJ - Word_Timer",
        "indexPLC": "1",
        "word_start": "1100",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 720,
        "y": 600,
        "wires": [
            [
                "883488f3e0f9bc50"
            ]
        ]
    },
    {
        "id": "883488f3e0f9bc50",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - String",
        "indexPLC": "2",
        "word_start": "2000",
        "length_word": "100",
        "url": "/memonicOmron/timer",
        "icon": "cui-dashboard",
        "x": 990,
        "y": 600,
        "wires": [
            [
                "7773a27f099fd10a"
            ]
        ]
    },
    {
        "id": "7773a27f099fd10a",
        "type": "Config_Web End",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "port": "8000",
        "x": 470,
        "y": 660,
        "wires": [
            [
                "320d8016baa540c7",
                "e814b582bfb4a119"
            ]
        ]
    },
    {
        "id": "320d8016baa540c7",
        "type": "file",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "",
        "filename": "../RUN_TIME/Run_Client/build/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e814b582bfb4a119",
        "type": "file",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "",
        "filename": "../scada_client/public/data/configPage.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "aa5d2768851214f1",
        "type": "debug",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "d7b754465fa89f45",
        "type": "Config_Web Memonic",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "System - Rotate",
        "indexPLC": "1",
        "word_start": "500",
        "length_word": "100",
        "url": "/memonicOmron/wordadjust",
        "icon": "cui-dashboard",
        "x": 750,
        "y": 540,
        "wires": [
            [
                "0c983ae58f488bda"
            ]
        ]
    },
    {
        "id": "5d5b9fadb855fca1",
        "type": "Config_Web Page",
        "z": "be379b1fd0218d73",
        "g": "20e222a9da1c8e38",
        "name_page": "Horizontal",
        "url": "/scada",
        "icon": "cui-dashboard",
        "width": "1100",
        "height": "700",
        "backgroundColor": "457b9d",
        "backgroundImage": "NoThing",
        "idPage": "Horizontal",
        "scale": "100",
        "header_hide": "0",
        "x": 850,
        "y": 300,
        "wires": [
            [
                "f0285228168a1ae0"
            ]
        ]
    },
    {
        "id": "f79366ec3fbad9e2",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "885fafb2509378d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "04328bba2406a5aa"
            ]
        ]
    },
    {
        "id": "04328bba2406a5aa",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "885fafb2509378d2",
        "name": "TURN OFF SERVER",
        "func": "var Variable = global.get(\"Variable\");\nVariable.turnOff = 1\n// global.set('Variable.turnOff',0)\nmsg.payload = 'TURN OFF SERVER'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "3e4279eee0e9ab6c"
            ]
        ]
    },
    {
        "id": "3e4279eee0e9ab6c",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "885fafb2509378d2",
        "name": "Turn Off Server",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 60,
        "wires": []
    },
    {
        "id": "0d55e9c2c5fb6bc5",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "885fafb2509378d2",
        "name": "Input License",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$2b$10$eLrGtpgjvfznyPbm3.RRuuLKuB2nz6o5jcBvq5hphgKlpiFY0exi6",
        "payloadType": "str",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "d347390626620809"
            ]
        ]
    },
    {
        "id": "d347390626620809",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "885fafb2509378d2",
        "name": "SET LICENSE SCADA",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\n\nVariableSystem.license = msg.payload\nVariableSystem.checkActive = true\n\nmsg.payload = VariableSystem.active\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar VariableSystem = global.get(\"VariableSystem\");\n\nsetInterval(function () {\n    node.status({ fill: VariableSystem.active ? 'green' : 'red', shape: \"dot\", text: VariableSystem.active ? 'ACTIVED' : 'DEACTIVATED' })\n        , 1000\n})",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7d83c61ce99a5e56",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "Write",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "1a5919b185482646",
                "57cb8b154b594e5a",
                "e6ff22fa83d9522a",
                "901e1b866a4b5a22"
            ]
        ]
    },
    {
        "id": "1a5919b185482646",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "Config Project",
        "func": "var PLC = global.get(\"FinsClient\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar sqlite3 = global.get(\"sqlite3\");\n\nvar Sql_link = \"db/OmronTraining.db\"\nnode.warn(JSON.stringify(Sql_link))\n\nSubFunction.setLogServer(JSON.stringify(Sql_link))\nVariableSystem.LocalDB = new sqlite3.Database(Sql_link);\nVariableSystem.RefreshData = true\n\nnode.warn(PLC)\nmsg.payload = { PLC }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "6f2947f55dbe82ab",
                "30f9ecc03c033b18",
                "b24f2841bb3c7811",
                "cbd5e55d8dd25db6"
            ]
        ],
        "icon": "font-awesome/fa-gear",
        "info": "CONFIG PROJECT"
    },
    {
        "id": "28c19cb31c2ce0ca",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "PROCESS CLIENT",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar Variables = global.get(\"Variable\");\n\nlet data=msg.payload\nif (data.idDevice == 0) {\n    SubFunction.ProcessSocketIO_System(data)\n}\nif (data.idDevice == 2 || data.idDevice == 3) {\n    SubFunction.ProcessSocketIO_Fins(data)\n}\nif (data.idDevice == 1) {\n    SubFunction.ProcessSocketIO_Modbus_Server(data)\n    //BitAdjust\n    if (data.NameCommand === 'BitAdjustForce' && !isNaN(data.tag)) {\n        if (data.tag !== '') {\n            Variables.StoreModbusServerBit[parseInt(data.idDevice)][parseInt(VariableSystem.PLC_BitStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)] = !Variables.StoreModbusServerBit[parseInt(data.idDevice)][parseInt(VariableSystem.PLC_BitStartBitAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)]\n        }\n    }\n    // //WordAdjust\n    if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n        if (data.tag !== '') {\n            Variables.StoreModbusServerReg[parseInt(data.idDevice)][parseInt(VariableSystem.PLC_WordStartWordAdjust[parseInt(data.idDevice)]) + parseInt(data.tag)] = data.value\n        }\n    }\n}\nif (data.NameCommand === 'BitAdjustForce' && isNaN(data.tag)) {\n    let TempArr = data.tag.split('_')\n    if (data.NameCommand === 'BitAdjustForce' && (TempArr[0] === \"MobileRobot\")) {\n        node.warn('Mobile Robot:\\r\\n' + TempArr[1] + '\\r\\n')\n        VariableSystem.COMMUNICATION_MOBILE_ROBOT[2].write(TempArr[1] + '\\r\\n')\n    }\n}\n\n        // //WordAdjust\n        // if (data.NameCommand === 'WordAdjustForce' && isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         node.warn(data.value);\n        //         Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n        //     }\n        // }\n        // if (data.NameCommand === 'WordAdjustForce' && !isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         Variables.WordAdjust[parseInt(data.idDevice)][parseInt(data.tag)] = data.value\n        //     }\n        // }\n        // //TextField Input\n        // if (data.NameCommand === 'TextFieldInput' && !isNaN(data.tag)) {\n        //     if (data.tag !== '') {\n        //         Variables.ListString[1][parseInt(data.tag)] = data.value\n        //     }\n        // }\n\n\n// VariableSystem.IO.sockets.emit('RELOAD')\n// VariableSystem.IO.removeAllListeners('connection')\n;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ba79835f165af39f",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "v": "[{\"dataField\":\"Package\",\"capture\":\"Package\",\"width\":\"auto\"},{\"dataField\":\"Product\",\"capture\":\"Product\",\"width\":\"auto\"},{\"dataField\":\"LotId\",\"capture\":\"LotID\",\"width\":\"auto\"},{\"dataField\":\"Destination\",\"capture\":\"Destination\",\"width\":\"100\"},{\"dataField\":\"Quantity\",\"capture\":\"Quantity\",\"width\":\"100\"},{\"dataField\":\"Remark\",\"capture\":\"Remark\",\"width\":\"auto\"},{\"dataField\":\"User\",\"capture\":\"User\",\"width\":\"80\"},{\"dataField\":\"TypeReport\",\"capture\":\"TypeReport\",\"width\":\"100\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "57cb8b154b594e5a"
            ]
        ]
    },
    {
        "id": "6f2947f55dbe82ab",
        "type": "plc_omron",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "PLC NX102",
        "host": "192.168.1.13",
        "port": "9600",
        "indexPLC": "2",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "100",
        "PLC_WordStartBitDisplay": "100",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "110",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "120",
        "PLC_LengthOfWordWordDisplay": "100",
        "PLC_WordStartWordAdjust": "220",
        "PLC_LengthOfWordWordAdjust": "100",
        "PLC_WordStartDWordDisplay": "320",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "370",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 610,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "57cb8b154b594e5a",
        "type": "Scada Web Begin",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "x": 280,
        "y": 480,
        "wires": [
            [
                "5e2c96f2f0a5e7ac"
            ]
        ]
    },
    {
        "id": "4329ad05d76adabe",
        "type": "Scada Web End",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "x": 750,
        "y": 820,
        "wires": []
    },
    {
        "id": "5be0a3dc751b1f66",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "BASIC 1",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada",
        "scale": "100",
        "header_hide": 0,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "f9d0ac47f1caa116"
            ]
        ]
    },
    {
        "id": "aa4c7b314af1c6a0",
        "type": "http in",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "/ConfigPage",
        "url": "/ConfigPage",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "a7a7ba75b3b3c70f"
            ]
        ]
    },
    {
        "id": "a7a7ba75b3b3c70f",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "Get DB",
        "func": "\nmsg.payload=global.get(\"ConfigPageServer\")\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 820,
        "wires": [
            [
                "037526c6a8a2e2c5"
            ]
        ]
    },
    {
        "id": "037526c6a8a2e2c5",
        "type": "http response",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 440,
        "y": 820,
        "wires": []
    },
    {
        "id": "f9d0ac47f1caa116",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "BASIC 2",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada_Basic2",
        "scale": "100",
        "header_hide": 0,
        "x": 340,
        "y": 540,
        "wires": [
            [
                "164af52a80c318ee"
            ]
        ]
    },
    {
        "id": "164af52a80c318ee",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "SYSMAC 1",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada_Sysmac1",
        "scale": "100",
        "header_hide": 0,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "8b188171645d6e50"
            ]
        ]
    },
    {
        "id": "8b188171645d6e50",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "SYSMAC 2",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada_Sysmac2",
        "scale": "100",
        "header_hide": 0,
        "x": 730,
        "y": 540,
        "wires": [
            [
                "6b4d70a2d4f48f54"
            ]
        ]
    },
    {
        "id": "2daf16f707a2c111",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Training KPI",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada5",
        "scale": "100",
        "header_hide": 0,
        "x": 210,
        "y": 640,
        "wires": [
            [
                "7f512ba8e6c36ac0"
            ]
        ]
    },
    {
        "id": "5e2c96f2f0a5e7ac",
        "type": "Scada Web URL",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "USER",
        "url": "User",
        "scale": 100,
        "x": 450,
        "y": 480,
        "wires": [
            [
                "5be0a3dc751b1f66"
            ]
        ]
    },
    {
        "id": "15c459080127cb65",
        "type": "Scada Web URL",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Download PDF",
        "url": "DownloadPDF",
        "scale": 100,
        "x": 740,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "30f9ecc03c033b18",
        "type": "plc_omron",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "PLC NJR",
        "host": "192.168.1.10",
        "port": "9600",
        "indexPLC": "3",
        "topic": "",
        "PLC_WriteUnSafe": "1",
        "PLC_Interval": "300",
        "PLC_Length_ReadWrite": "1000",
        "PLC_Word_Start_ReadWrite": "0",
        "PLC_WordStartElement": "0",
        "PLC_LengthOfWordElement": "100",
        "PLC_WordStartBitDisplay": "100",
        "PLC_LengthOfWordBitDisplay": "10",
        "PLC_WordStartBitAdjust": "110",
        "PLC_LengthOfWordBitAdjust": "10",
        "PLC_WordStartWordDisplay": "120",
        "PLC_LengthOfWordWordDisplay": "100",
        "PLC_WordStartWordAdjust": "220",
        "PLC_LengthOfWordWordAdjust": "100",
        "PLC_WordStartDWordDisplay": "320",
        "PLC_LengthOfWordDWordDisplay": "25",
        "PLC_WordStartDWordAdjust": "370",
        "PLC_LengthOfWordDWordAdjust": "25",
        "PLC_WordStartComPC": "1000",
        "PLC_LengthOfWordComPC": "0",
        "PLC_IntervalWriteData": "500",
        "PLC_Enable_String": "0",
        "PLC_WordStartString": "2000",
        "PLC_LengthOfWordString": "500",
        "PLC_NumberWordInString": "20",
        "x": 600,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "016b2c6eecb919f1",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Bit Adjust",
        "indexPLC": "3",
        "word_start": "110",
        "length_word": "10",
        "type_memonic": "BitAdjust",
        "number_word_for_string": 20,
        "x": 380,
        "y": 760,
        "wires": [
            [
                "d02aabbbee0364bc"
            ]
        ]
    },
    {
        "id": "7f512ba8e6c36ac0",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Horizontal Machine",
        "width": "1952",
        "height": "962",
        "backgroundColor": "457b9d",
        "backgroundImage": "HorizontalMachine",
        "idPage": "Scada6",
        "scale": "68",
        "header_hide": 0,
        "x": 430,
        "y": 640,
        "wires": [
            [
                "87335bfeb0f6e49f"
            ]
        ]
    },
    {
        "id": "e3af69123c46daca",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Bit Display",
        "indexPLC": "3",
        "word_start": "100",
        "length_word": "10",
        "type_memonic": "BitDisplay",
        "number_word_for_string": 20,
        "x": 140,
        "y": 760,
        "wires": [
            [
                "016b2c6eecb919f1"
            ]
        ]
    },
    {
        "id": "d02aabbbee0364bc",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Word Display",
        "indexPLC": "3",
        "word_start": "120",
        "length_word": "200",
        "type_memonic": "WordDisplay",
        "number_word_for_string": 20,
        "x": 620,
        "y": 760,
        "wires": [
            [
                "a1ba240e31b7e419"
            ]
        ]
    },
    {
        "id": "a1ba240e31b7e419",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Word Adjust",
        "indexPLC": "3",
        "word_start": "320",
        "length_word": "200",
        "type_memonic": "WordAdjust",
        "number_word_for_string": 20,
        "x": 870,
        "y": 760,
        "wires": [
            [
                "4329ad05d76adabe"
            ]
        ]
    },
    {
        "id": "87335bfeb0f6e49f",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "BitAdjust- System",
        "indexPLC": "0",
        "word_start": "0",
        "length_word": "20",
        "type_memonic": "BitAdjust",
        "number_word_for_string": 20,
        "x": 160,
        "y": 700,
        "wires": [
            [
                "50b6cd690c732a24"
            ]
        ]
    },
    {
        "id": "50b6cd690c732a24",
        "type": "Scada Web Memonic",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "BitDisplay- System",
        "indexPLC": "0",
        "word_start": "20",
        "length_word": "20",
        "type_memonic": "BitDisplay",
        "number_word_for_string": 20,
        "x": 450,
        "y": 700,
        "wires": [
            [
                "e3af69123c46daca"
            ]
        ]
    },
    {
        "id": "6b4d70a2d4f48f54",
        "type": "Scada Web Page",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name_page": "Mobile Robot",
        "width": "1450",
        "height": "655",
        "backgroundColor": "457b9d",
        "backgroundImage": "2",
        "idPage": "Scada_MobileRobot",
        "scale": "100",
        "header_hide": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "2daf16f707a2c111"
            ]
        ]
    },
    {
        "id": "b24f2841bb3c7811",
        "type": "Omron Mobile Robot",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "",
        "host": "192.168.1.100",
        "password": "omron",
        "port": "7171",
        "indexPLC": "4",
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c99fde83c01dd48b",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 380,
        "wires": []
    },
    {
        "id": "0f7f09d7383af7a1",
        "type": "tcp in",
        "z": "dc9cf18bb9eee563",
        "d": true,
        "g": "1056a6713e893663",
        "name": "Server",
        "server": "server",
        "host": "",
        "port": "9876",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "Server",
        "trim": false,
        "base64": false,
        "tls": "",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "19192884c792fb1f"
            ]
        ]
    },
    {
        "id": "bae1b5a5c43184d4",
        "type": "tcp out",
        "z": "dc9cf18bb9eee563",
        "d": true,
        "g": "1056a6713e893663",
        "name": "Client",
        "host": "127.0.0.1",
        "port": "6000",
        "beserver": "client",
        "base64": false,
        "end": true,
        "tls": "",
        "x": 430,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0ff0bd740ca9b961",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "1056a6713e893663",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "400|10|91",
        "payloadType": "str",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "bae1b5a5c43184d4"
            ]
        ]
    },
    {
        "id": "19192884c792fb1f",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "1056a6713e893663",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 960,
        "wires": []
    },
    {
        "id": "c90e2bfdff612558",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1160,
        "wires": [
            [
                "41ec08af12443e92"
            ]
        ]
    },
    {
        "id": "41ec08af12443e92",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "BIT MODBUS",
        "func": "var Variables = global.get(\"Variable\");\nmsg.payload = Variables.StoreModbusServerBit\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1160,
        "wires": [
            [
                "b9ade0b955d0e967"
            ]
        ]
    },
    {
        "id": "b9ade0b955d0e967",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1160,
        "wires": []
    },
    {
        "id": "38f74cb5b889df58",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "70d074262fa985dd"
            ]
        ]
    },
    {
        "id": "70d074262fa985dd",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "function 21",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nmsg.payload = Variables.WordDisplay\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1120,
        "wires": [
            [
                "83b4978e5fae15f8"
            ]
        ]
    },
    {
        "id": "83b4978e5fae15f8",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1120,
        "wires": []
    },
    {
        "id": "14e7cf4b6e13d14d",
        "type": "debug",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d452ecf024b97db4",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "WORD MODBUS",
        "func": "var Variables = global.get(\"Variable\");\nmsg.payload = Variables.StoreModbusServerReg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1200,
        "wires": [
            [
                "14e7cf4b6e13d14d"
            ]
        ]
    },
    {
        "id": "a50a38bf237553d1",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "g": "aa367b78b9d27788",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1200,
        "wires": [
            [
                "d452ecf024b97db4"
            ]
        ]
    },
    {
        "id": "e6ff22fa83d9522a",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "Simulate Rotate run",
        "func": "var Variables = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nsetInterval(()=>{\n    Variables.WordDisplay[0][1] -= 10;\n    Variables.WordDisplay[0][2] = -Variables.WordDisplay[0][1] + 180;\n\n    if (Variables.WordDisplay[0][1] < -360) {\n        Variables.WordDisplay[0][1] = 0\n    }\n    Variables.ListString[0][1] = Variables.WordDisplay[0][1];\n},100)\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "199df35d43a0504a",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 920,
        "wires": [
            [
                "94e43fa17419ba13"
            ]
        ]
    },
    {
        "id": "94e43fa17419ba13",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "name": "function 24",
        "func": "var VariableSystem = global.get(\"VariableSystem\");\nnode.warn(JSON.stringify(VariableSystem.IO))\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f534b76789367ac8",
        "type": "inject",
        "z": "dc9cf18bb9eee563",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 1020,
        "wires": [
            [
                "0554acf6ca4bbbc8"
            ]
        ]
    },
    {
        "id": "0554acf6ca4bbbc8",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "name": "function 25",
        "func": "var Variables = global.get(\"Variable\");\nvar active = global.get(\"active\");\nif(!Variables.WordDisplay[1][1]){\nVariables.WordDisplay[1][1]=1\n}\nVariables.WordDisplay[1][1]=Variables.WordDisplay[1][1]+1\nnode.warn(active);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "cbd5e55d8dd25db6",
        "type": "plc_modbus_server",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "",
        "host": "localhost",
        "port": 502,
        "unitID": 0,
        "indexPLC": "1",
        "topic": "",
        "PLC_BitStartBitDisplay": 0,
        "PLC_LengthOfBitBitDisplay": 200,
        "PLC_BitStartBitAdjust": 0,
        "PLC_Code_BitAdjust": 100,
        "PLC_LengthOfBitBitAdjust": 200,
        "PLC_WordStartElement": 0,
        "PLC_LengthOfWordElement": 100,
        "PLC_WordStartWordDisplay": 100,
        "PLC_LengthOfWordWordDisplay": 200,
        "PLC_WordStartWordAdjust": 300,
        "PLC_LengthOfWordWordAdjust": 200,
        "PLC_Code_WordAdjust": 101,
        "PLC_WordStartDWordDisplay": 500,
        "PLC_LengthOfWordDWordDisplay": 50,
        "PLC_WordStartDWordAdjust": 600,
        "PLC_LengthOfWordDWordAdjust": 50,
        "PLC_Code_DWordAdjust": 102,
        "PLC_WordStartRotate": 700,
        "PLC_LengthOfWordRotate": 100,
        "PLC_WordStartComPC": 1000,
        "PLC_LengthOfWordComPC": 10,
        "PLC_Enable_String": "False",
        "PLC_WordStartString": 2000,
        "PLC_LengthOfWordString": 20,
        "PLC_NumberWordInString": 1000,
        "x": 630,
        "y": 380,
        "wires": [
            [
                "c99fde83c01dd48b"
            ]
        ]
    },
    {
        "id": "96f3b67463449880",
        "type": "aedes broker",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "",
        "mqtt_port": "1883",
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 130,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ced1b50a48001690",
        "type": "mqtt in",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "",
        "topic": "Client-send-data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "cf0ae1d58e6000b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 260,
        "wires": [
            [
                "28c19cb31c2ce0ca"
            ]
        ]
    },
    {
        "id": "901e1b866a4b5a22",
        "type": "function",
        "z": "dc9cf18bb9eee563",
        "g": "7d66dde138ce9662",
        "name": "PROCESS",
        "func": "// var Variable = global.get(\"Variable\");\nvar VariableSystem = global.get(\"VariableSystem\");\nvar SubFunction = global.get(\"SubFunction\");\nvar Variables = global.get(\"Variable\");\n\nVariables.Percent[0] = new Array(20).fill(0);\nVariables.BitAdjust[0] = new Array(20).fill(0);\nVariables.BitDisplay[0] = new Array(20).fill(0);\nVariables.WordAdjust[0] = new Array(20).fill(0);\nVariables.WordDisplay[0] = new Array(20).fill(0);\nVariables.DWordAdjust[0] = new Array(20).fill(0);\nVariables.DWordDisplay[0] = new Array(20).fill(0);\nVariables.ListString[0] = new Array(20).fill('---');\nVariables.TextField[0] = new Array(20).fill('---');\nVariables.TextFieldInput[0] = new Array(10).fill(0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 360,
        "wires": [
            []
        ]
    }
]